// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportpackage"
	"github.com/safedep/vet/ent/reportvulnerability"
)

// ReportVulnerability is the model entity for the ReportVulnerability schema.
type ReportVulnerability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VulnerabilityID holds the value of the "vulnerability_id" field.
	VulnerabilityID string `json:"vulnerability_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Aliases holds the value of the "aliases" field.
	Aliases []string `json:"aliases,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity string `json:"severity,omitempty"`
	// SeverityType holds the value of the "severity_type" field.
	SeverityType string `json:"severity_type,omitempty"`
	// CvssScore holds the value of the "cvss_score" field.
	CvssScore float64 `json:"cvss_score,omitempty"`
	// SeverityDetails holds the value of the "severity_details" field.
	SeverityDetails map[string]interface{} `json:"severity_details,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportVulnerabilityQuery when eager-loading is set.
	Edges                          ReportVulnerabilityEdges `json:"edges"`
	report_package_vulnerabilities *int
	selectValues                   sql.SelectValues
}

// ReportVulnerabilityEdges holds the relations/edges for other nodes in the graph.
type ReportVulnerabilityEdges struct {
	// Package holds the value of the package edge.
	Package *ReportPackage `json:"package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportVulnerabilityEdges) PackageOrErr() (*ReportPackage, error) {
	if e.Package != nil {
		return e.Package, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportpackage.Label}
	}
	return nil, &NotLoadedError{edge: "package"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportVulnerability) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportvulnerability.FieldAliases, reportvulnerability.FieldSeverityDetails:
			values[i] = new([]byte)
		case reportvulnerability.FieldCvssScore:
			values[i] = new(sql.NullFloat64)
		case reportvulnerability.FieldID:
			values[i] = new(sql.NullInt64)
		case reportvulnerability.FieldVulnerabilityID, reportvulnerability.FieldTitle, reportvulnerability.FieldDescription, reportvulnerability.FieldSeverity, reportvulnerability.FieldSeverityType:
			values[i] = new(sql.NullString)
		case reportvulnerability.FieldCreatedAt, reportvulnerability.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reportvulnerability.ForeignKeys[0]: // report_package_vulnerabilities
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportVulnerability fields.
func (rv *ReportVulnerability) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportvulnerability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rv.ID = int(value.Int64)
		case reportvulnerability.FieldVulnerabilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vulnerability_id", values[i])
			} else if value.Valid {
				rv.VulnerabilityID = value.String
			}
		case reportvulnerability.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rv.Title = value.String
			}
		case reportvulnerability.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rv.Description = value.String
			}
		case reportvulnerability.FieldAliases:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field aliases", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rv.Aliases); err != nil {
					return fmt.Errorf("unmarshal field aliases: %w", err)
				}
			}
		case reportvulnerability.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				rv.Severity = value.String
			}
		case reportvulnerability.FieldSeverityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity_type", values[i])
			} else if value.Valid {
				rv.SeverityType = value.String
			}
		case reportvulnerability.FieldCvssScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cvss_score", values[i])
			} else if value.Valid {
				rv.CvssScore = value.Float64
			}
		case reportvulnerability.FieldSeverityDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field severity_details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rv.SeverityDetails); err != nil {
					return fmt.Errorf("unmarshal field severity_details: %w", err)
				}
			}
		case reportvulnerability.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rv.CreatedAt = value.Time
			}
		case reportvulnerability.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rv.UpdatedAt = value.Time
			}
		case reportvulnerability.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_package_vulnerabilities", value)
			} else if value.Valid {
				rv.report_package_vulnerabilities = new(int)
				*rv.report_package_vulnerabilities = int(value.Int64)
			}
		default:
			rv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportVulnerability.
// This includes values selected through modifiers, order, etc.
func (rv *ReportVulnerability) Value(name string) (ent.Value, error) {
	return rv.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the ReportVulnerability entity.
func (rv *ReportVulnerability) QueryPackage() *ReportPackageQuery {
	return NewReportVulnerabilityClient(rv.config).QueryPackage(rv)
}

// Update returns a builder for updating this ReportVulnerability.
// Note that you need to call ReportVulnerability.Unwrap() before calling this method if this ReportVulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (rv *ReportVulnerability) Update() *ReportVulnerabilityUpdateOne {
	return NewReportVulnerabilityClient(rv.config).UpdateOne(rv)
}

// Unwrap unwraps the ReportVulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rv *ReportVulnerability) Unwrap() *ReportVulnerability {
	_tx, ok := rv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportVulnerability is not a transactional entity")
	}
	rv.config.driver = _tx.drv
	return rv
}

// String implements the fmt.Stringer.
func (rv *ReportVulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("ReportVulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rv.ID))
	builder.WriteString("vulnerability_id=")
	builder.WriteString(rv.VulnerabilityID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(rv.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rv.Description)
	builder.WriteString(", ")
	builder.WriteString("aliases=")
	builder.WriteString(fmt.Sprintf("%v", rv.Aliases))
	builder.WriteString(", ")
	builder.WriteString("severity=")
	builder.WriteString(rv.Severity)
	builder.WriteString(", ")
	builder.WriteString("severity_type=")
	builder.WriteString(rv.SeverityType)
	builder.WriteString(", ")
	builder.WriteString("cvss_score=")
	builder.WriteString(fmt.Sprintf("%v", rv.CvssScore))
	builder.WriteString(", ")
	builder.WriteString("severity_details=")
	builder.WriteString(fmt.Sprintf("%v", rv.SeverityDetails))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportVulnerabilities is a parsable slice of ReportVulnerability.
type ReportVulnerabilities []*ReportVulnerability
