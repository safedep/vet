// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportproject"
	"github.com/safedep/vet/ent/reportscorecard"
)

// ReportScorecard is the model entity for the ReportScorecard schema.
type ReportScorecard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Overall scorecard score
	Score float32 `json:"score,omitempty"`
	// Version of the scorecard tool used
	ScorecardVersion string `json:"scorecard_version,omitempty"`
	// Repository name
	RepoName string `json:"repo_name,omitempty"`
	// Repository commit SHA
	RepoCommit string `json:"repo_commit,omitempty"`
	// Date published by OpenSSF scorecard
	Date string `json:"date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportScorecardQuery when eager-loading is set.
	Edges                    ReportScorecardEdges `json:"edges"`
	report_project_scorecard *int
	selectValues             sql.SelectValues
}

// ReportScorecardEdges holds the relations/edges for other nodes in the graph.
type ReportScorecardEdges struct {
	// Project holds the value of the project edge.
	Project *ReportProject `json:"project,omitempty"`
	// Checks holds the value of the checks edge.
	Checks []*ReportScorecardCheck `json:"checks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportScorecardEdges) ProjectOrErr() (*ReportProject, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportproject.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ChecksOrErr returns the Checks value or an error if the edge
// was not loaded in eager-loading.
func (e ReportScorecardEdges) ChecksOrErr() ([]*ReportScorecardCheck, error) {
	if e.loadedTypes[1] {
		return e.Checks, nil
	}
	return nil, &NotLoadedError{edge: "checks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportScorecard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportscorecard.FieldScore:
			values[i] = new(sql.NullFloat64)
		case reportscorecard.FieldID:
			values[i] = new(sql.NullInt64)
		case reportscorecard.FieldScorecardVersion, reportscorecard.FieldRepoName, reportscorecard.FieldRepoCommit, reportscorecard.FieldDate:
			values[i] = new(sql.NullString)
		case reportscorecard.FieldCreatedAt, reportscorecard.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reportscorecard.ForeignKeys[0]: // report_project_scorecard
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportScorecard fields.
func (rs *ReportScorecard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportscorecard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rs.ID = int(value.Int64)
		case reportscorecard.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				rs.Score = float32(value.Float64)
			}
		case reportscorecard.FieldScorecardVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scorecard_version", values[i])
			} else if value.Valid {
				rs.ScorecardVersion = value.String
			}
		case reportscorecard.FieldRepoName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_name", values[i])
			} else if value.Valid {
				rs.RepoName = value.String
			}
		case reportscorecard.FieldRepoCommit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_commit", values[i])
			} else if value.Valid {
				rs.RepoCommit = value.String
			}
		case reportscorecard.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				rs.Date = value.String
			}
		case reportscorecard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rs.CreatedAt = value.Time
			}
		case reportscorecard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rs.UpdatedAt = value.Time
			}
		case reportscorecard.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_project_scorecard", value)
			} else if value.Valid {
				rs.report_project_scorecard = new(int)
				*rs.report_project_scorecard = int(value.Int64)
			}
		default:
			rs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportScorecard.
// This includes values selected through modifiers, order, etc.
func (rs *ReportScorecard) Value(name string) (ent.Value, error) {
	return rs.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ReportScorecard entity.
func (rs *ReportScorecard) QueryProject() *ReportProjectQuery {
	return NewReportScorecardClient(rs.config).QueryProject(rs)
}

// QueryChecks queries the "checks" edge of the ReportScorecard entity.
func (rs *ReportScorecard) QueryChecks() *ReportScorecardCheckQuery {
	return NewReportScorecardClient(rs.config).QueryChecks(rs)
}

// Update returns a builder for updating this ReportScorecard.
// Note that you need to call ReportScorecard.Unwrap() before calling this method if this ReportScorecard
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *ReportScorecard) Update() *ReportScorecardUpdateOne {
	return NewReportScorecardClient(rs.config).UpdateOne(rs)
}

// Unwrap unwraps the ReportScorecard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rs *ReportScorecard) Unwrap() *ReportScorecard {
	_tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportScorecard is not a transactional entity")
	}
	rs.config.driver = _tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *ReportScorecard) String() string {
	var builder strings.Builder
	builder.WriteString("ReportScorecard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rs.ID))
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", rs.Score))
	builder.WriteString(", ")
	builder.WriteString("scorecard_version=")
	builder.WriteString(rs.ScorecardVersion)
	builder.WriteString(", ")
	builder.WriteString("repo_name=")
	builder.WriteString(rs.RepoName)
	builder.WriteString(", ")
	builder.WriteString("repo_commit=")
	builder.WriteString(rs.RepoCommit)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(rs.Date)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportScorecards is a parsable slice of ReportScorecard.
type ReportScorecards []*ReportScorecard
