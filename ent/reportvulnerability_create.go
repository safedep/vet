// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/reportpackage"
	"github.com/safedep/vet/ent/reportvulnerability"
)

// ReportVulnerabilityCreate is the builder for creating a ReportVulnerability entity.
type ReportVulnerabilityCreate struct {
	config
	mutation *ReportVulnerabilityMutation
	hooks    []Hook
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (rvc *ReportVulnerabilityCreate) SetVulnerabilityID(s string) *ReportVulnerabilityCreate {
	rvc.mutation.SetVulnerabilityID(s)
	return rvc
}

// SetTitle sets the "title" field.
func (rvc *ReportVulnerabilityCreate) SetTitle(s string) *ReportVulnerabilityCreate {
	rvc.mutation.SetTitle(s)
	return rvc
}

// SetDescription sets the "description" field.
func (rvc *ReportVulnerabilityCreate) SetDescription(s string) *ReportVulnerabilityCreate {
	rvc.mutation.SetDescription(s)
	return rvc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rvc *ReportVulnerabilityCreate) SetNillableDescription(s *string) *ReportVulnerabilityCreate {
	if s != nil {
		rvc.SetDescription(*s)
	}
	return rvc
}

// SetAliases sets the "aliases" field.
func (rvc *ReportVulnerabilityCreate) SetAliases(s []string) *ReportVulnerabilityCreate {
	rvc.mutation.SetAliases(s)
	return rvc
}

// SetSeverity sets the "severity" field.
func (rvc *ReportVulnerabilityCreate) SetSeverity(s string) *ReportVulnerabilityCreate {
	rvc.mutation.SetSeverity(s)
	return rvc
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (rvc *ReportVulnerabilityCreate) SetNillableSeverity(s *string) *ReportVulnerabilityCreate {
	if s != nil {
		rvc.SetSeverity(*s)
	}
	return rvc
}

// SetSeverityType sets the "severity_type" field.
func (rvc *ReportVulnerabilityCreate) SetSeverityType(s string) *ReportVulnerabilityCreate {
	rvc.mutation.SetSeverityType(s)
	return rvc
}

// SetNillableSeverityType sets the "severity_type" field if the given value is not nil.
func (rvc *ReportVulnerabilityCreate) SetNillableSeverityType(s *string) *ReportVulnerabilityCreate {
	if s != nil {
		rvc.SetSeverityType(*s)
	}
	return rvc
}

// SetCvssScore sets the "cvss_score" field.
func (rvc *ReportVulnerabilityCreate) SetCvssScore(f float64) *ReportVulnerabilityCreate {
	rvc.mutation.SetCvssScore(f)
	return rvc
}

// SetNillableCvssScore sets the "cvss_score" field if the given value is not nil.
func (rvc *ReportVulnerabilityCreate) SetNillableCvssScore(f *float64) *ReportVulnerabilityCreate {
	if f != nil {
		rvc.SetCvssScore(*f)
	}
	return rvc
}

// SetSeverityDetails sets the "severity_details" field.
func (rvc *ReportVulnerabilityCreate) SetSeverityDetails(m map[string]interface{}) *ReportVulnerabilityCreate {
	rvc.mutation.SetSeverityDetails(m)
	return rvc
}

// SetCreatedAt sets the "created_at" field.
func (rvc *ReportVulnerabilityCreate) SetCreatedAt(t time.Time) *ReportVulnerabilityCreate {
	rvc.mutation.SetCreatedAt(t)
	return rvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rvc *ReportVulnerabilityCreate) SetNillableCreatedAt(t *time.Time) *ReportVulnerabilityCreate {
	if t != nil {
		rvc.SetCreatedAt(*t)
	}
	return rvc
}

// SetUpdatedAt sets the "updated_at" field.
func (rvc *ReportVulnerabilityCreate) SetUpdatedAt(t time.Time) *ReportVulnerabilityCreate {
	rvc.mutation.SetUpdatedAt(t)
	return rvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rvc *ReportVulnerabilityCreate) SetNillableUpdatedAt(t *time.Time) *ReportVulnerabilityCreate {
	if t != nil {
		rvc.SetUpdatedAt(*t)
	}
	return rvc
}

// SetPackageID sets the "package" edge to the ReportPackage entity by ID.
func (rvc *ReportVulnerabilityCreate) SetPackageID(id int) *ReportVulnerabilityCreate {
	rvc.mutation.SetPackageID(id)
	return rvc
}

// SetNillablePackageID sets the "package" edge to the ReportPackage entity by ID if the given value is not nil.
func (rvc *ReportVulnerabilityCreate) SetNillablePackageID(id *int) *ReportVulnerabilityCreate {
	if id != nil {
		rvc = rvc.SetPackageID(*id)
	}
	return rvc
}

// SetPackage sets the "package" edge to the ReportPackage entity.
func (rvc *ReportVulnerabilityCreate) SetPackage(r *ReportPackage) *ReportVulnerabilityCreate {
	return rvc.SetPackageID(r.ID)
}

// Mutation returns the ReportVulnerabilityMutation object of the builder.
func (rvc *ReportVulnerabilityCreate) Mutation() *ReportVulnerabilityMutation {
	return rvc.mutation
}

// Save creates the ReportVulnerability in the database.
func (rvc *ReportVulnerabilityCreate) Save(ctx context.Context) (*ReportVulnerability, error) {
	return withHooks(ctx, rvc.sqlSave, rvc.mutation, rvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rvc *ReportVulnerabilityCreate) SaveX(ctx context.Context) *ReportVulnerability {
	v, err := rvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rvc *ReportVulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := rvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvc *ReportVulnerabilityCreate) ExecX(ctx context.Context) {
	if err := rvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rvc *ReportVulnerabilityCreate) check() error {
	if _, ok := rvc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required field "ReportVulnerability.vulnerability_id"`)}
	}
	if v, ok := rvc.mutation.VulnerabilityID(); ok {
		if err := reportvulnerability.VulnerabilityIDValidator(v); err != nil {
			return &ValidationError{Name: "vulnerability_id", err: fmt.Errorf(`ent: validator failed for field "ReportVulnerability.vulnerability_id": %w`, err)}
		}
	}
	if _, ok := rvc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ReportVulnerability.title"`)}
	}
	if v, ok := rvc.mutation.Title(); ok {
		if err := reportvulnerability.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ReportVulnerability.title": %w`, err)}
		}
	}
	return nil
}

func (rvc *ReportVulnerabilityCreate) sqlSave(ctx context.Context) (*ReportVulnerability, error) {
	if err := rvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rvc.mutation.id = &_node.ID
	rvc.mutation.done = true
	return _node, nil
}

func (rvc *ReportVulnerabilityCreate) createSpec() (*ReportVulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportVulnerability{config: rvc.config}
		_spec = sqlgraph.NewCreateSpec(reportvulnerability.Table, sqlgraph.NewFieldSpec(reportvulnerability.FieldID, field.TypeInt))
	)
	if value, ok := rvc.mutation.VulnerabilityID(); ok {
		_spec.SetField(reportvulnerability.FieldVulnerabilityID, field.TypeString, value)
		_node.VulnerabilityID = value
	}
	if value, ok := rvc.mutation.Title(); ok {
		_spec.SetField(reportvulnerability.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rvc.mutation.Description(); ok {
		_spec.SetField(reportvulnerability.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rvc.mutation.Aliases(); ok {
		_spec.SetField(reportvulnerability.FieldAliases, field.TypeJSON, value)
		_node.Aliases = value
	}
	if value, ok := rvc.mutation.Severity(); ok {
		_spec.SetField(reportvulnerability.FieldSeverity, field.TypeString, value)
		_node.Severity = value
	}
	if value, ok := rvc.mutation.SeverityType(); ok {
		_spec.SetField(reportvulnerability.FieldSeverityType, field.TypeString, value)
		_node.SeverityType = value
	}
	if value, ok := rvc.mutation.CvssScore(); ok {
		_spec.SetField(reportvulnerability.FieldCvssScore, field.TypeFloat64, value)
		_node.CvssScore = value
	}
	if value, ok := rvc.mutation.SeverityDetails(); ok {
		_spec.SetField(reportvulnerability.FieldSeverityDetails, field.TypeJSON, value)
		_node.SeverityDetails = value
	}
	if value, ok := rvc.mutation.CreatedAt(); ok {
		_spec.SetField(reportvulnerability.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rvc.mutation.UpdatedAt(); ok {
		_spec.SetField(reportvulnerability.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rvc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportvulnerability.PackageTable,
			Columns: []string{reportvulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.report_package_vulnerabilities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReportVulnerabilityCreateBulk is the builder for creating many ReportVulnerability entities in bulk.
type ReportVulnerabilityCreateBulk struct {
	config
	err      error
	builders []*ReportVulnerabilityCreate
}

// Save creates the ReportVulnerability entities in the database.
func (rvcb *ReportVulnerabilityCreateBulk) Save(ctx context.Context) ([]*ReportVulnerability, error) {
	if rvcb.err != nil {
		return nil, rvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rvcb.builders))
	nodes := make([]*ReportVulnerability, len(rvcb.builders))
	mutators := make([]Mutator, len(rvcb.builders))
	for i := range rvcb.builders {
		func(i int, root context.Context) {
			builder := rvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportVulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rvcb *ReportVulnerabilityCreateBulk) SaveX(ctx context.Context) []*ReportVulnerability {
	v, err := rvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rvcb *ReportVulnerabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := rvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvcb *ReportVulnerabilityCreateBulk) ExecX(ctx context.Context) {
	if err := rvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
