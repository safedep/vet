// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/codesourcefile"
	"github.com/safedep/vet/ent/depsusageevidence"
)

// DepsUsageEvidence is the model entity for the DepsUsageEvidence schema.
type DepsUsageEvidence struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageHint holds the value of the "package_hint" field.
	PackageHint *string `json:"package_hint,omitempty"`
	// ModuleName holds the value of the "module_name" field.
	ModuleName string `json:"module_name,omitempty"`
	// ModuleItem holds the value of the "module_item" field.
	ModuleItem *string `json:"module_item,omitempty"`
	// ModuleAlias holds the value of the "module_alias" field.
	ModuleAlias *string `json:"module_alias,omitempty"`
	// IsWildCardUsage holds the value of the "is_wild_card_usage" field.
	IsWildCardUsage bool `json:"is_wild_card_usage,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier *string `json:"identifier,omitempty"`
	// UsageFilePath holds the value of the "usage_file_path" field.
	UsageFilePath string `json:"usage_file_path,omitempty"`
	// Line holds the value of the "line" field.
	Line uint `json:"line,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DepsUsageEvidenceQuery when eager-loading is set.
	Edges                       DepsUsageEvidenceEdges `json:"edges"`
	deps_usage_evidence_used_in *int
	selectValues                sql.SelectValues
}

// DepsUsageEvidenceEdges holds the relations/edges for other nodes in the graph.
type DepsUsageEvidenceEdges struct {
	// UsedIn holds the value of the used_in edge.
	UsedIn *CodeSourceFile `json:"used_in,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsedInOrErr returns the UsedIn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DepsUsageEvidenceEdges) UsedInOrErr() (*CodeSourceFile, error) {
	if e.UsedIn != nil {
		return e.UsedIn, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: codesourcefile.Label}
	}
	return nil, &NotLoadedError{edge: "used_in"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DepsUsageEvidence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case depsusageevidence.FieldIsWildCardUsage:
			values[i] = new(sql.NullBool)
		case depsusageevidence.FieldID, depsusageevidence.FieldLine:
			values[i] = new(sql.NullInt64)
		case depsusageevidence.FieldPackageHint, depsusageevidence.FieldModuleName, depsusageevidence.FieldModuleItem, depsusageevidence.FieldModuleAlias, depsusageevidence.FieldIdentifier, depsusageevidence.FieldUsageFilePath:
			values[i] = new(sql.NullString)
		case depsusageevidence.ForeignKeys[0]: // deps_usage_evidence_used_in
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DepsUsageEvidence fields.
func (due *DepsUsageEvidence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case depsusageevidence.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			due.ID = int(value.Int64)
		case depsusageevidence.FieldPackageHint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_hint", values[i])
			} else if value.Valid {
				due.PackageHint = new(string)
				*due.PackageHint = value.String
			}
		case depsusageevidence.FieldModuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_name", values[i])
			} else if value.Valid {
				due.ModuleName = value.String
			}
		case depsusageevidence.FieldModuleItem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_item", values[i])
			} else if value.Valid {
				due.ModuleItem = new(string)
				*due.ModuleItem = value.String
			}
		case depsusageevidence.FieldModuleAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_alias", values[i])
			} else if value.Valid {
				due.ModuleAlias = new(string)
				*due.ModuleAlias = value.String
			}
		case depsusageevidence.FieldIsWildCardUsage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_wild_card_usage", values[i])
			} else if value.Valid {
				due.IsWildCardUsage = value.Bool
			}
		case depsusageevidence.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				due.Identifier = new(string)
				*due.Identifier = value.String
			}
		case depsusageevidence.FieldUsageFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_file_path", values[i])
			} else if value.Valid {
				due.UsageFilePath = value.String
			}
		case depsusageevidence.FieldLine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line", values[i])
			} else if value.Valid {
				due.Line = uint(value.Int64)
			}
		case depsusageevidence.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deps_usage_evidence_used_in", value)
			} else if value.Valid {
				due.deps_usage_evidence_used_in = new(int)
				*due.deps_usage_evidence_used_in = int(value.Int64)
			}
		default:
			due.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DepsUsageEvidence.
// This includes values selected through modifiers, order, etc.
func (due *DepsUsageEvidence) Value(name string) (ent.Value, error) {
	return due.selectValues.Get(name)
}

// QueryUsedIn queries the "used_in" edge of the DepsUsageEvidence entity.
func (due *DepsUsageEvidence) QueryUsedIn() *CodeSourceFileQuery {
	return NewDepsUsageEvidenceClient(due.config).QueryUsedIn(due)
}

// Update returns a builder for updating this DepsUsageEvidence.
// Note that you need to call DepsUsageEvidence.Unwrap() before calling this method if this DepsUsageEvidence
// was returned from a transaction, and the transaction was committed or rolled back.
func (due *DepsUsageEvidence) Update() *DepsUsageEvidenceUpdateOne {
	return NewDepsUsageEvidenceClient(due.config).UpdateOne(due)
}

// Unwrap unwraps the DepsUsageEvidence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (due *DepsUsageEvidence) Unwrap() *DepsUsageEvidence {
	_tx, ok := due.config.driver.(*txDriver)
	if !ok {
		panic("ent: DepsUsageEvidence is not a transactional entity")
	}
	due.config.driver = _tx.drv
	return due
}

// String implements the fmt.Stringer.
func (due *DepsUsageEvidence) String() string {
	var builder strings.Builder
	builder.WriteString("DepsUsageEvidence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", due.ID))
	if v := due.PackageHint; v != nil {
		builder.WriteString("package_hint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("module_name=")
	builder.WriteString(due.ModuleName)
	builder.WriteString(", ")
	if v := due.ModuleItem; v != nil {
		builder.WriteString("module_item=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := due.ModuleAlias; v != nil {
		builder.WriteString("module_alias=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_wild_card_usage=")
	builder.WriteString(fmt.Sprintf("%v", due.IsWildCardUsage))
	builder.WriteString(", ")
	if v := due.Identifier; v != nil {
		builder.WriteString("identifier=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("usage_file_path=")
	builder.WriteString(due.UsageFilePath)
	builder.WriteString(", ")
	builder.WriteString("line=")
	builder.WriteString(fmt.Sprintf("%v", due.Line))
	builder.WriteByte(')')
	return builder.String()
}

// DepsUsageEvidences is a parsable slice of DepsUsageEvidence.
type DepsUsageEvidences []*DepsUsageEvidence
