// Code generated by ent, DO NOT EDIT.

package reportmalware

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportmalware type in the database.
	Label = "report_malware"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAnalysisID holds the string denoting the analysis_id field in the database.
	FieldAnalysisID = "analysis_id"
	// FieldIsMalware holds the string denoting the is_malware field in the database.
	FieldIsMalware = "is_malware"
	// FieldIsSuspicious holds the string denoting the is_suspicious field in the database.
	FieldIsSuspicious = "is_suspicious"
	// FieldConfidence holds the string denoting the confidence field in the database.
	FieldConfidence = "confidence"
	// FieldReport holds the string denoting the report field in the database.
	FieldReport = "report"
	// FieldVerificationRecord holds the string denoting the verification_record field in the database.
	FieldVerificationRecord = "verification_record"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// Table holds the table name of the reportmalware in the database.
	Table = "report_malwares"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "report_malwares"
	// PackageInverseTable is the table name for the ReportPackage entity.
	// It exists in this package in order to avoid circular dependency with the "reportpackage" package.
	PackageInverseTable = "report_packages"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "report_package_malware_analysis"
)

// Columns holds all SQL columns for reportmalware fields.
var Columns = []string{
	FieldID,
	FieldAnalysisID,
	FieldIsMalware,
	FieldIsSuspicious,
	FieldConfidence,
	FieldReport,
	FieldVerificationRecord,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "report_malwares"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"report_package_malware_analysis",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AnalysisIDValidator is a validator for the "analysis_id" field. It is called by the builders before save.
	AnalysisIDValidator func(string) error
	// DefaultIsMalware holds the default value on creation for the "is_malware" field.
	DefaultIsMalware bool
	// DefaultIsSuspicious holds the default value on creation for the "is_suspicious" field.
	DefaultIsSuspicious bool
)

// OrderOption defines the ordering options for the ReportMalware queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAnalysisID orders the results by the analysis_id field.
func ByAnalysisID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnalysisID, opts...).ToFunc()
}

// ByIsMalware orders the results by the is_malware field.
func ByIsMalware(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMalware, opts...).ToFunc()
}

// ByIsSuspicious orders the results by the is_suspicious field.
func ByIsSuspicious(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSuspicious, opts...).ToFunc()
}

// ByConfidence orders the results by the confidence field.
func ByConfidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfidence, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PackageTable, PackageColumn),
	)
}
