// Code generated by ent, DO NOT EDIT.

package reportmalware

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLTE(FieldID, id))
}

// AnalysisID applies equality check predicate on the "analysis_id" field. It's identical to AnalysisIDEQ.
func AnalysisID(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldAnalysisID, v))
}

// IsMalware applies equality check predicate on the "is_malware" field. It's identical to IsMalwareEQ.
func IsMalware(v bool) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldIsMalware, v))
}

// IsSuspicious applies equality check predicate on the "is_suspicious" field. It's identical to IsSuspiciousEQ.
func IsSuspicious(v bool) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldIsSuspicious, v))
}

// Confidence applies equality check predicate on the "confidence" field. It's identical to ConfidenceEQ.
func Confidence(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldConfidence, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldUpdatedAt, v))
}

// AnalysisIDEQ applies the EQ predicate on the "analysis_id" field.
func AnalysisIDEQ(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldAnalysisID, v))
}

// AnalysisIDNEQ applies the NEQ predicate on the "analysis_id" field.
func AnalysisIDNEQ(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNEQ(FieldAnalysisID, v))
}

// AnalysisIDIn applies the In predicate on the "analysis_id" field.
func AnalysisIDIn(vs ...string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIn(FieldAnalysisID, vs...))
}

// AnalysisIDNotIn applies the NotIn predicate on the "analysis_id" field.
func AnalysisIDNotIn(vs ...string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotIn(FieldAnalysisID, vs...))
}

// AnalysisIDGT applies the GT predicate on the "analysis_id" field.
func AnalysisIDGT(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGT(FieldAnalysisID, v))
}

// AnalysisIDGTE applies the GTE predicate on the "analysis_id" field.
func AnalysisIDGTE(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGTE(FieldAnalysisID, v))
}

// AnalysisIDLT applies the LT predicate on the "analysis_id" field.
func AnalysisIDLT(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLT(FieldAnalysisID, v))
}

// AnalysisIDLTE applies the LTE predicate on the "analysis_id" field.
func AnalysisIDLTE(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLTE(FieldAnalysisID, v))
}

// AnalysisIDContains applies the Contains predicate on the "analysis_id" field.
func AnalysisIDContains(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldContains(FieldAnalysisID, v))
}

// AnalysisIDHasPrefix applies the HasPrefix predicate on the "analysis_id" field.
func AnalysisIDHasPrefix(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldHasPrefix(FieldAnalysisID, v))
}

// AnalysisIDHasSuffix applies the HasSuffix predicate on the "analysis_id" field.
func AnalysisIDHasSuffix(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldHasSuffix(FieldAnalysisID, v))
}

// AnalysisIDEqualFold applies the EqualFold predicate on the "analysis_id" field.
func AnalysisIDEqualFold(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEqualFold(FieldAnalysisID, v))
}

// AnalysisIDContainsFold applies the ContainsFold predicate on the "analysis_id" field.
func AnalysisIDContainsFold(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldContainsFold(FieldAnalysisID, v))
}

// IsMalwareEQ applies the EQ predicate on the "is_malware" field.
func IsMalwareEQ(v bool) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldIsMalware, v))
}

// IsMalwareNEQ applies the NEQ predicate on the "is_malware" field.
func IsMalwareNEQ(v bool) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNEQ(FieldIsMalware, v))
}

// IsSuspiciousEQ applies the EQ predicate on the "is_suspicious" field.
func IsSuspiciousEQ(v bool) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldIsSuspicious, v))
}

// IsSuspiciousNEQ applies the NEQ predicate on the "is_suspicious" field.
func IsSuspiciousNEQ(v bool) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNEQ(FieldIsSuspicious, v))
}

// ConfidenceEQ applies the EQ predicate on the "confidence" field.
func ConfidenceEQ(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldConfidence, v))
}

// ConfidenceNEQ applies the NEQ predicate on the "confidence" field.
func ConfidenceNEQ(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNEQ(FieldConfidence, v))
}

// ConfidenceIn applies the In predicate on the "confidence" field.
func ConfidenceIn(vs ...string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIn(FieldConfidence, vs...))
}

// ConfidenceNotIn applies the NotIn predicate on the "confidence" field.
func ConfidenceNotIn(vs ...string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotIn(FieldConfidence, vs...))
}

// ConfidenceGT applies the GT predicate on the "confidence" field.
func ConfidenceGT(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGT(FieldConfidence, v))
}

// ConfidenceGTE applies the GTE predicate on the "confidence" field.
func ConfidenceGTE(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGTE(FieldConfidence, v))
}

// ConfidenceLT applies the LT predicate on the "confidence" field.
func ConfidenceLT(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLT(FieldConfidence, v))
}

// ConfidenceLTE applies the LTE predicate on the "confidence" field.
func ConfidenceLTE(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLTE(FieldConfidence, v))
}

// ConfidenceContains applies the Contains predicate on the "confidence" field.
func ConfidenceContains(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldContains(FieldConfidence, v))
}

// ConfidenceHasPrefix applies the HasPrefix predicate on the "confidence" field.
func ConfidenceHasPrefix(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldHasPrefix(FieldConfidence, v))
}

// ConfidenceHasSuffix applies the HasSuffix predicate on the "confidence" field.
func ConfidenceHasSuffix(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldHasSuffix(FieldConfidence, v))
}

// ConfidenceIsNil applies the IsNil predicate on the "confidence" field.
func ConfidenceIsNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIsNull(FieldConfidence))
}

// ConfidenceNotNil applies the NotNil predicate on the "confidence" field.
func ConfidenceNotNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotNull(FieldConfidence))
}

// ConfidenceEqualFold applies the EqualFold predicate on the "confidence" field.
func ConfidenceEqualFold(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEqualFold(FieldConfidence, v))
}

// ConfidenceContainsFold applies the ContainsFold predicate on the "confidence" field.
func ConfidenceContainsFold(v string) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldContainsFold(FieldConfidence, v))
}

// ReportIsNil applies the IsNil predicate on the "report" field.
func ReportIsNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIsNull(FieldReport))
}

// ReportNotNil applies the NotNil predicate on the "report" field.
func ReportNotNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotNull(FieldReport))
}

// VerificationRecordIsNil applies the IsNil predicate on the "verification_record" field.
func VerificationRecordIsNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIsNull(FieldVerificationRecord))
}

// VerificationRecordNotNil applies the NotNil predicate on the "verification_record" field.
func VerificationRecordNotNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotNull(FieldVerificationRecord))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportMalware {
	return predicate.ReportMalware(sql.FieldNotNull(FieldUpdatedAt))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.ReportMalware {
	return predicate.ReportMalware(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.ReportPackage) predicate.ReportMalware {
	return predicate.ReportMalware(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportMalware) predicate.ReportMalware {
	return predicate.ReportMalware(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportMalware) predicate.ReportMalware {
	return predicate.ReportMalware(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportMalware) predicate.ReportMalware {
	return predicate.ReportMalware(sql.NotPredicates(p))
}
