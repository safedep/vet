// Code generated by ent, DO NOT EDIT.

package depsusageevidence

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the depsusageevidence type in the database.
	Label = "deps_usage_evidence"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackageHint holds the string denoting the package_hint field in the database.
	FieldPackageHint = "package_hint"
	// FieldModuleName holds the string denoting the module_name field in the database.
	FieldModuleName = "module_name"
	// FieldModuleItem holds the string denoting the module_item field in the database.
	FieldModuleItem = "module_item"
	// FieldModuleAlias holds the string denoting the module_alias field in the database.
	FieldModuleAlias = "module_alias"
	// FieldIsWildCardUsage holds the string denoting the is_wild_card_usage field in the database.
	FieldIsWildCardUsage = "is_wild_card_usage"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldUsageFilePath holds the string denoting the usage_file_path field in the database.
	FieldUsageFilePath = "usage_file_path"
	// FieldLine holds the string denoting the line field in the database.
	FieldLine = "line"
	// EdgeUsedIn holds the string denoting the used_in edge name in mutations.
	EdgeUsedIn = "used_in"
	// Table holds the table name of the depsusageevidence in the database.
	Table = "deps_usage_evidences"
	// UsedInTable is the table that holds the used_in relation/edge.
	UsedInTable = "deps_usage_evidences"
	// UsedInInverseTable is the table name for the CodeSourceFile entity.
	// It exists in this package in order to avoid circular dependency with the "codesourcefile" package.
	UsedInInverseTable = "code_source_files"
	// UsedInColumn is the table column denoting the used_in relation/edge.
	UsedInColumn = "deps_usage_evidence_used_in"
)

// Columns holds all SQL columns for depsusageevidence fields.
var Columns = []string{
	FieldID,
	FieldPackageHint,
	FieldModuleName,
	FieldModuleItem,
	FieldModuleAlias,
	FieldIsWildCardUsage,
	FieldIdentifier,
	FieldUsageFilePath,
	FieldLine,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "deps_usage_evidences"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deps_usage_evidence_used_in",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsWildCardUsage holds the default value on creation for the "is_wild_card_usage" field.
	DefaultIsWildCardUsage bool
)

// OrderOption defines the ordering options for the DepsUsageEvidence queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackageHint orders the results by the package_hint field.
func ByPackageHint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageHint, opts...).ToFunc()
}

// ByModuleName orders the results by the module_name field.
func ByModuleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleName, opts...).ToFunc()
}

// ByModuleItem orders the results by the module_item field.
func ByModuleItem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleItem, opts...).ToFunc()
}

// ByModuleAlias orders the results by the module_alias field.
func ByModuleAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleAlias, opts...).ToFunc()
}

// ByIsWildCardUsage orders the results by the is_wild_card_usage field.
func ByIsWildCardUsage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsWildCardUsage, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByUsageFilePath orders the results by the usage_file_path field.
func ByUsageFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageFilePath, opts...).ToFunc()
}

// ByLine orders the results by the line field.
func ByLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLine, opts...).ToFunc()
}

// ByUsedInField orders the results by used_in field.
func ByUsedInField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsedInStep(), sql.OrderByField(field, opts...))
	}
}
func newUsedInStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsedInInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UsedInTable, UsedInColumn),
	)
}
