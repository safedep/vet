// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportscorecard"
	"github.com/safedep/vet/ent/reportscorecardcheck"
)

// ReportScorecardCheck is the model entity for the ReportScorecardCheck schema.
type ReportScorecardCheck struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the scorecard check
	Name string `json:"name,omitempty"`
	// Score for this check
	Score float32 `json:"score,omitempty"`
	// Reason for the score
	Reason string `json:"reason,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportScorecardCheckQuery when eager-loading is set.
	Edges                   ReportScorecardCheckEdges `json:"edges"`
	report_scorecard_checks *int
	selectValues            sql.SelectValues
}

// ReportScorecardCheckEdges holds the relations/edges for other nodes in the graph.
type ReportScorecardCheckEdges struct {
	// Scorecard holds the value of the scorecard edge.
	Scorecard *ReportScorecard `json:"scorecard,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScorecardOrErr returns the Scorecard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportScorecardCheckEdges) ScorecardOrErr() (*ReportScorecard, error) {
	if e.Scorecard != nil {
		return e.Scorecard, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportscorecard.Label}
	}
	return nil, &NotLoadedError{edge: "scorecard"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportScorecardCheck) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportscorecardcheck.FieldScore:
			values[i] = new(sql.NullFloat64)
		case reportscorecardcheck.FieldID:
			values[i] = new(sql.NullInt64)
		case reportscorecardcheck.FieldName, reportscorecardcheck.FieldReason:
			values[i] = new(sql.NullString)
		case reportscorecardcheck.FieldCreatedAt, reportscorecardcheck.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reportscorecardcheck.ForeignKeys[0]: // report_scorecard_checks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportScorecardCheck fields.
func (rsc *ReportScorecardCheck) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportscorecardcheck.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rsc.ID = int(value.Int64)
		case reportscorecardcheck.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rsc.Name = value.String
			}
		case reportscorecardcheck.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				rsc.Score = float32(value.Float64)
			}
		case reportscorecardcheck.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				rsc.Reason = value.String
			}
		case reportscorecardcheck.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rsc.CreatedAt = value.Time
			}
		case reportscorecardcheck.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rsc.UpdatedAt = value.Time
			}
		case reportscorecardcheck.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_scorecard_checks", value)
			} else if value.Valid {
				rsc.report_scorecard_checks = new(int)
				*rsc.report_scorecard_checks = int(value.Int64)
			}
		default:
			rsc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportScorecardCheck.
// This includes values selected through modifiers, order, etc.
func (rsc *ReportScorecardCheck) Value(name string) (ent.Value, error) {
	return rsc.selectValues.Get(name)
}

// QueryScorecard queries the "scorecard" edge of the ReportScorecardCheck entity.
func (rsc *ReportScorecardCheck) QueryScorecard() *ReportScorecardQuery {
	return NewReportScorecardCheckClient(rsc.config).QueryScorecard(rsc)
}

// Update returns a builder for updating this ReportScorecardCheck.
// Note that you need to call ReportScorecardCheck.Unwrap() before calling this method if this ReportScorecardCheck
// was returned from a transaction, and the transaction was committed or rolled back.
func (rsc *ReportScorecardCheck) Update() *ReportScorecardCheckUpdateOne {
	return NewReportScorecardCheckClient(rsc.config).UpdateOne(rsc)
}

// Unwrap unwraps the ReportScorecardCheck entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rsc *ReportScorecardCheck) Unwrap() *ReportScorecardCheck {
	_tx, ok := rsc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportScorecardCheck is not a transactional entity")
	}
	rsc.config.driver = _tx.drv
	return rsc
}

// String implements the fmt.Stringer.
func (rsc *ReportScorecardCheck) String() string {
	var builder strings.Builder
	builder.WriteString("ReportScorecardCheck(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rsc.ID))
	builder.WriteString("name=")
	builder.WriteString(rsc.Name)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", rsc.Score))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(rsc.Reason)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rsc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rsc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportScorecardChecks is a parsable slice of ReportScorecardCheck.
type ReportScorecardChecks []*ReportScorecardCheck
