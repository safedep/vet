// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/depsusageevidence"
	"github.com/safedep/vet/ent/predicate"
)

// DepsUsageEvidenceDelete is the builder for deleting a DepsUsageEvidence entity.
type DepsUsageEvidenceDelete struct {
	config
	hooks    []Hook
	mutation *DepsUsageEvidenceMutation
}

// Where appends a list predicates to the DepsUsageEvidenceDelete builder.
func (dued *DepsUsageEvidenceDelete) Where(ps ...predicate.DepsUsageEvidence) *DepsUsageEvidenceDelete {
	dued.mutation.Where(ps...)
	return dued
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dued *DepsUsageEvidenceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dued.sqlExec, dued.mutation, dued.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dued *DepsUsageEvidenceDelete) ExecX(ctx context.Context) int {
	n, err := dued.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dued *DepsUsageEvidenceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(depsusageevidence.Table, sqlgraph.NewFieldSpec(depsusageevidence.FieldID, field.TypeInt))
	if ps := dued.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dued.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dued.mutation.done = true
	return affected, err
}

// DepsUsageEvidenceDeleteOne is the builder for deleting a single DepsUsageEvidence entity.
type DepsUsageEvidenceDeleteOne struct {
	dued *DepsUsageEvidenceDelete
}

// Where appends a list predicates to the DepsUsageEvidenceDelete builder.
func (duedo *DepsUsageEvidenceDeleteOne) Where(ps ...predicate.DepsUsageEvidence) *DepsUsageEvidenceDeleteOne {
	duedo.dued.mutation.Where(ps...)
	return duedo
}

// Exec executes the deletion query.
func (duedo *DepsUsageEvidenceDeleteOne) Exec(ctx context.Context) error {
	n, err := duedo.dued.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{depsusageevidence.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (duedo *DepsUsageEvidenceDeleteOne) ExecX(ctx context.Context) {
	if err := duedo.Exec(ctx); err != nil {
		panic(err)
	}
}
