// Code generated by ent, DO NOT EDIT.

package reportdependencygraph

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldID, id))
}

// FromPackageID applies equality check predicate on the "from_package_id" field. It's identical to FromPackageIDEQ.
func FromPackageID(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageID, v))
}

// FromPackageName applies equality check predicate on the "from_package_name" field. It's identical to FromPackageNameEQ.
func FromPackageName(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageName, v))
}

// FromPackageVersion applies equality check predicate on the "from_package_version" field. It's identical to FromPackageVersionEQ.
func FromPackageVersion(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageVersion, v))
}

// FromPackageEcosystem applies equality check predicate on the "from_package_ecosystem" field. It's identical to FromPackageEcosystemEQ.
func FromPackageEcosystem(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageEcosystem, v))
}

// ToPackageID applies equality check predicate on the "to_package_id" field. It's identical to ToPackageIDEQ.
func ToPackageID(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageID, v))
}

// ToPackageName applies equality check predicate on the "to_package_name" field. It's identical to ToPackageNameEQ.
func ToPackageName(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageName, v))
}

// ToPackageVersion applies equality check predicate on the "to_package_version" field. It's identical to ToPackageVersionEQ.
func ToPackageVersion(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageVersion, v))
}

// ToPackageEcosystem applies equality check predicate on the "to_package_ecosystem" field. It's identical to ToPackageEcosystemEQ.
func ToPackageEcosystem(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageEcosystem, v))
}

// DependencyType applies equality check predicate on the "dependency_type" field. It's identical to DependencyTypeEQ.
func DependencyType(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldDependencyType, v))
}

// VersionConstraint applies equality check predicate on the "version_constraint" field. It's identical to VersionConstraintEQ.
func VersionConstraint(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldVersionConstraint, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldDepth, v))
}

// IsDirect applies equality check predicate on the "is_direct" field. It's identical to IsDirectEQ.
func IsDirect(v bool) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldIsDirect, v))
}

// IsRootEdge applies equality check predicate on the "is_root_edge" field. It's identical to IsRootEdgeEQ.
func IsRootEdge(v bool) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldIsRootEdge, v))
}

// ManifestID applies equality check predicate on the "manifest_id" field. It's identical to ManifestIDEQ.
func ManifestID(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldManifestID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldUpdatedAt, v))
}

// FromPackageIDEQ applies the EQ predicate on the "from_package_id" field.
func FromPackageIDEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageID, v))
}

// FromPackageIDNEQ applies the NEQ predicate on the "from_package_id" field.
func FromPackageIDNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldFromPackageID, v))
}

// FromPackageIDIn applies the In predicate on the "from_package_id" field.
func FromPackageIDIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldFromPackageID, vs...))
}

// FromPackageIDNotIn applies the NotIn predicate on the "from_package_id" field.
func FromPackageIDNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldFromPackageID, vs...))
}

// FromPackageIDGT applies the GT predicate on the "from_package_id" field.
func FromPackageIDGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldFromPackageID, v))
}

// FromPackageIDGTE applies the GTE predicate on the "from_package_id" field.
func FromPackageIDGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldFromPackageID, v))
}

// FromPackageIDLT applies the LT predicate on the "from_package_id" field.
func FromPackageIDLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldFromPackageID, v))
}

// FromPackageIDLTE applies the LTE predicate on the "from_package_id" field.
func FromPackageIDLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldFromPackageID, v))
}

// FromPackageIDContains applies the Contains predicate on the "from_package_id" field.
func FromPackageIDContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldFromPackageID, v))
}

// FromPackageIDHasPrefix applies the HasPrefix predicate on the "from_package_id" field.
func FromPackageIDHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldFromPackageID, v))
}

// FromPackageIDHasSuffix applies the HasSuffix predicate on the "from_package_id" field.
func FromPackageIDHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldFromPackageID, v))
}

// FromPackageIDEqualFold applies the EqualFold predicate on the "from_package_id" field.
func FromPackageIDEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldFromPackageID, v))
}

// FromPackageIDContainsFold applies the ContainsFold predicate on the "from_package_id" field.
func FromPackageIDContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldFromPackageID, v))
}

// FromPackageNameEQ applies the EQ predicate on the "from_package_name" field.
func FromPackageNameEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageName, v))
}

// FromPackageNameNEQ applies the NEQ predicate on the "from_package_name" field.
func FromPackageNameNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldFromPackageName, v))
}

// FromPackageNameIn applies the In predicate on the "from_package_name" field.
func FromPackageNameIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldFromPackageName, vs...))
}

// FromPackageNameNotIn applies the NotIn predicate on the "from_package_name" field.
func FromPackageNameNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldFromPackageName, vs...))
}

// FromPackageNameGT applies the GT predicate on the "from_package_name" field.
func FromPackageNameGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldFromPackageName, v))
}

// FromPackageNameGTE applies the GTE predicate on the "from_package_name" field.
func FromPackageNameGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldFromPackageName, v))
}

// FromPackageNameLT applies the LT predicate on the "from_package_name" field.
func FromPackageNameLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldFromPackageName, v))
}

// FromPackageNameLTE applies the LTE predicate on the "from_package_name" field.
func FromPackageNameLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldFromPackageName, v))
}

// FromPackageNameContains applies the Contains predicate on the "from_package_name" field.
func FromPackageNameContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldFromPackageName, v))
}

// FromPackageNameHasPrefix applies the HasPrefix predicate on the "from_package_name" field.
func FromPackageNameHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldFromPackageName, v))
}

// FromPackageNameHasSuffix applies the HasSuffix predicate on the "from_package_name" field.
func FromPackageNameHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldFromPackageName, v))
}

// FromPackageNameEqualFold applies the EqualFold predicate on the "from_package_name" field.
func FromPackageNameEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldFromPackageName, v))
}

// FromPackageNameContainsFold applies the ContainsFold predicate on the "from_package_name" field.
func FromPackageNameContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldFromPackageName, v))
}

// FromPackageVersionEQ applies the EQ predicate on the "from_package_version" field.
func FromPackageVersionEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageVersion, v))
}

// FromPackageVersionNEQ applies the NEQ predicate on the "from_package_version" field.
func FromPackageVersionNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldFromPackageVersion, v))
}

// FromPackageVersionIn applies the In predicate on the "from_package_version" field.
func FromPackageVersionIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldFromPackageVersion, vs...))
}

// FromPackageVersionNotIn applies the NotIn predicate on the "from_package_version" field.
func FromPackageVersionNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldFromPackageVersion, vs...))
}

// FromPackageVersionGT applies the GT predicate on the "from_package_version" field.
func FromPackageVersionGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldFromPackageVersion, v))
}

// FromPackageVersionGTE applies the GTE predicate on the "from_package_version" field.
func FromPackageVersionGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldFromPackageVersion, v))
}

// FromPackageVersionLT applies the LT predicate on the "from_package_version" field.
func FromPackageVersionLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldFromPackageVersion, v))
}

// FromPackageVersionLTE applies the LTE predicate on the "from_package_version" field.
func FromPackageVersionLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldFromPackageVersion, v))
}

// FromPackageVersionContains applies the Contains predicate on the "from_package_version" field.
func FromPackageVersionContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldFromPackageVersion, v))
}

// FromPackageVersionHasPrefix applies the HasPrefix predicate on the "from_package_version" field.
func FromPackageVersionHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldFromPackageVersion, v))
}

// FromPackageVersionHasSuffix applies the HasSuffix predicate on the "from_package_version" field.
func FromPackageVersionHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldFromPackageVersion, v))
}

// FromPackageVersionEqualFold applies the EqualFold predicate on the "from_package_version" field.
func FromPackageVersionEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldFromPackageVersion, v))
}

// FromPackageVersionContainsFold applies the ContainsFold predicate on the "from_package_version" field.
func FromPackageVersionContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldFromPackageVersion, v))
}

// FromPackageEcosystemEQ applies the EQ predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemNEQ applies the NEQ predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemIn applies the In predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldFromPackageEcosystem, vs...))
}

// FromPackageEcosystemNotIn applies the NotIn predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldFromPackageEcosystem, vs...))
}

// FromPackageEcosystemGT applies the GT predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemGTE applies the GTE predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemLT applies the LT predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemLTE applies the LTE predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemContains applies the Contains predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemHasPrefix applies the HasPrefix predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemHasSuffix applies the HasSuffix predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemEqualFold applies the EqualFold predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldFromPackageEcosystem, v))
}

// FromPackageEcosystemContainsFold applies the ContainsFold predicate on the "from_package_ecosystem" field.
func FromPackageEcosystemContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldFromPackageEcosystem, v))
}

// ToPackageIDEQ applies the EQ predicate on the "to_package_id" field.
func ToPackageIDEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageID, v))
}

// ToPackageIDNEQ applies the NEQ predicate on the "to_package_id" field.
func ToPackageIDNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldToPackageID, v))
}

// ToPackageIDIn applies the In predicate on the "to_package_id" field.
func ToPackageIDIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldToPackageID, vs...))
}

// ToPackageIDNotIn applies the NotIn predicate on the "to_package_id" field.
func ToPackageIDNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldToPackageID, vs...))
}

// ToPackageIDGT applies the GT predicate on the "to_package_id" field.
func ToPackageIDGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldToPackageID, v))
}

// ToPackageIDGTE applies the GTE predicate on the "to_package_id" field.
func ToPackageIDGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldToPackageID, v))
}

// ToPackageIDLT applies the LT predicate on the "to_package_id" field.
func ToPackageIDLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldToPackageID, v))
}

// ToPackageIDLTE applies the LTE predicate on the "to_package_id" field.
func ToPackageIDLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldToPackageID, v))
}

// ToPackageIDContains applies the Contains predicate on the "to_package_id" field.
func ToPackageIDContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldToPackageID, v))
}

// ToPackageIDHasPrefix applies the HasPrefix predicate on the "to_package_id" field.
func ToPackageIDHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldToPackageID, v))
}

// ToPackageIDHasSuffix applies the HasSuffix predicate on the "to_package_id" field.
func ToPackageIDHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldToPackageID, v))
}

// ToPackageIDEqualFold applies the EqualFold predicate on the "to_package_id" field.
func ToPackageIDEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldToPackageID, v))
}

// ToPackageIDContainsFold applies the ContainsFold predicate on the "to_package_id" field.
func ToPackageIDContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldToPackageID, v))
}

// ToPackageNameEQ applies the EQ predicate on the "to_package_name" field.
func ToPackageNameEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageName, v))
}

// ToPackageNameNEQ applies the NEQ predicate on the "to_package_name" field.
func ToPackageNameNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldToPackageName, v))
}

// ToPackageNameIn applies the In predicate on the "to_package_name" field.
func ToPackageNameIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldToPackageName, vs...))
}

// ToPackageNameNotIn applies the NotIn predicate on the "to_package_name" field.
func ToPackageNameNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldToPackageName, vs...))
}

// ToPackageNameGT applies the GT predicate on the "to_package_name" field.
func ToPackageNameGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldToPackageName, v))
}

// ToPackageNameGTE applies the GTE predicate on the "to_package_name" field.
func ToPackageNameGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldToPackageName, v))
}

// ToPackageNameLT applies the LT predicate on the "to_package_name" field.
func ToPackageNameLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldToPackageName, v))
}

// ToPackageNameLTE applies the LTE predicate on the "to_package_name" field.
func ToPackageNameLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldToPackageName, v))
}

// ToPackageNameContains applies the Contains predicate on the "to_package_name" field.
func ToPackageNameContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldToPackageName, v))
}

// ToPackageNameHasPrefix applies the HasPrefix predicate on the "to_package_name" field.
func ToPackageNameHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldToPackageName, v))
}

// ToPackageNameHasSuffix applies the HasSuffix predicate on the "to_package_name" field.
func ToPackageNameHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldToPackageName, v))
}

// ToPackageNameEqualFold applies the EqualFold predicate on the "to_package_name" field.
func ToPackageNameEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldToPackageName, v))
}

// ToPackageNameContainsFold applies the ContainsFold predicate on the "to_package_name" field.
func ToPackageNameContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldToPackageName, v))
}

// ToPackageVersionEQ applies the EQ predicate on the "to_package_version" field.
func ToPackageVersionEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageVersion, v))
}

// ToPackageVersionNEQ applies the NEQ predicate on the "to_package_version" field.
func ToPackageVersionNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldToPackageVersion, v))
}

// ToPackageVersionIn applies the In predicate on the "to_package_version" field.
func ToPackageVersionIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldToPackageVersion, vs...))
}

// ToPackageVersionNotIn applies the NotIn predicate on the "to_package_version" field.
func ToPackageVersionNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldToPackageVersion, vs...))
}

// ToPackageVersionGT applies the GT predicate on the "to_package_version" field.
func ToPackageVersionGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldToPackageVersion, v))
}

// ToPackageVersionGTE applies the GTE predicate on the "to_package_version" field.
func ToPackageVersionGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldToPackageVersion, v))
}

// ToPackageVersionLT applies the LT predicate on the "to_package_version" field.
func ToPackageVersionLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldToPackageVersion, v))
}

// ToPackageVersionLTE applies the LTE predicate on the "to_package_version" field.
func ToPackageVersionLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldToPackageVersion, v))
}

// ToPackageVersionContains applies the Contains predicate on the "to_package_version" field.
func ToPackageVersionContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldToPackageVersion, v))
}

// ToPackageVersionHasPrefix applies the HasPrefix predicate on the "to_package_version" field.
func ToPackageVersionHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldToPackageVersion, v))
}

// ToPackageVersionHasSuffix applies the HasSuffix predicate on the "to_package_version" field.
func ToPackageVersionHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldToPackageVersion, v))
}

// ToPackageVersionEqualFold applies the EqualFold predicate on the "to_package_version" field.
func ToPackageVersionEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldToPackageVersion, v))
}

// ToPackageVersionContainsFold applies the ContainsFold predicate on the "to_package_version" field.
func ToPackageVersionContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldToPackageVersion, v))
}

// ToPackageEcosystemEQ applies the EQ predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemNEQ applies the NEQ predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemIn applies the In predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldToPackageEcosystem, vs...))
}

// ToPackageEcosystemNotIn applies the NotIn predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldToPackageEcosystem, vs...))
}

// ToPackageEcosystemGT applies the GT predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemGTE applies the GTE predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemLT applies the LT predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemLTE applies the LTE predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemContains applies the Contains predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemHasPrefix applies the HasPrefix predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemHasSuffix applies the HasSuffix predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemEqualFold applies the EqualFold predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldToPackageEcosystem, v))
}

// ToPackageEcosystemContainsFold applies the ContainsFold predicate on the "to_package_ecosystem" field.
func ToPackageEcosystemContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldToPackageEcosystem, v))
}

// DependencyTypeEQ applies the EQ predicate on the "dependency_type" field.
func DependencyTypeEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldDependencyType, v))
}

// DependencyTypeNEQ applies the NEQ predicate on the "dependency_type" field.
func DependencyTypeNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldDependencyType, v))
}

// DependencyTypeIn applies the In predicate on the "dependency_type" field.
func DependencyTypeIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldDependencyType, vs...))
}

// DependencyTypeNotIn applies the NotIn predicate on the "dependency_type" field.
func DependencyTypeNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldDependencyType, vs...))
}

// DependencyTypeGT applies the GT predicate on the "dependency_type" field.
func DependencyTypeGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldDependencyType, v))
}

// DependencyTypeGTE applies the GTE predicate on the "dependency_type" field.
func DependencyTypeGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldDependencyType, v))
}

// DependencyTypeLT applies the LT predicate on the "dependency_type" field.
func DependencyTypeLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldDependencyType, v))
}

// DependencyTypeLTE applies the LTE predicate on the "dependency_type" field.
func DependencyTypeLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldDependencyType, v))
}

// DependencyTypeContains applies the Contains predicate on the "dependency_type" field.
func DependencyTypeContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldDependencyType, v))
}

// DependencyTypeHasPrefix applies the HasPrefix predicate on the "dependency_type" field.
func DependencyTypeHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldDependencyType, v))
}

// DependencyTypeHasSuffix applies the HasSuffix predicate on the "dependency_type" field.
func DependencyTypeHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldDependencyType, v))
}

// DependencyTypeIsNil applies the IsNil predicate on the "dependency_type" field.
func DependencyTypeIsNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIsNull(FieldDependencyType))
}

// DependencyTypeNotNil applies the NotNil predicate on the "dependency_type" field.
func DependencyTypeNotNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotNull(FieldDependencyType))
}

// DependencyTypeEqualFold applies the EqualFold predicate on the "dependency_type" field.
func DependencyTypeEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldDependencyType, v))
}

// DependencyTypeContainsFold applies the ContainsFold predicate on the "dependency_type" field.
func DependencyTypeContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldDependencyType, v))
}

// VersionConstraintEQ applies the EQ predicate on the "version_constraint" field.
func VersionConstraintEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldVersionConstraint, v))
}

// VersionConstraintNEQ applies the NEQ predicate on the "version_constraint" field.
func VersionConstraintNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldVersionConstraint, v))
}

// VersionConstraintIn applies the In predicate on the "version_constraint" field.
func VersionConstraintIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldVersionConstraint, vs...))
}

// VersionConstraintNotIn applies the NotIn predicate on the "version_constraint" field.
func VersionConstraintNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldVersionConstraint, vs...))
}

// VersionConstraintGT applies the GT predicate on the "version_constraint" field.
func VersionConstraintGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldVersionConstraint, v))
}

// VersionConstraintGTE applies the GTE predicate on the "version_constraint" field.
func VersionConstraintGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldVersionConstraint, v))
}

// VersionConstraintLT applies the LT predicate on the "version_constraint" field.
func VersionConstraintLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldVersionConstraint, v))
}

// VersionConstraintLTE applies the LTE predicate on the "version_constraint" field.
func VersionConstraintLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldVersionConstraint, v))
}

// VersionConstraintContains applies the Contains predicate on the "version_constraint" field.
func VersionConstraintContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldVersionConstraint, v))
}

// VersionConstraintHasPrefix applies the HasPrefix predicate on the "version_constraint" field.
func VersionConstraintHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldVersionConstraint, v))
}

// VersionConstraintHasSuffix applies the HasSuffix predicate on the "version_constraint" field.
func VersionConstraintHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldVersionConstraint, v))
}

// VersionConstraintIsNil applies the IsNil predicate on the "version_constraint" field.
func VersionConstraintIsNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIsNull(FieldVersionConstraint))
}

// VersionConstraintNotNil applies the NotNil predicate on the "version_constraint" field.
func VersionConstraintNotNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotNull(FieldVersionConstraint))
}

// VersionConstraintEqualFold applies the EqualFold predicate on the "version_constraint" field.
func VersionConstraintEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldVersionConstraint, v))
}

// VersionConstraintContainsFold applies the ContainsFold predicate on the "version_constraint" field.
func VersionConstraintContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldVersionConstraint, v))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v int) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldDepth, v))
}

// IsDirectEQ applies the EQ predicate on the "is_direct" field.
func IsDirectEQ(v bool) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldIsDirect, v))
}

// IsDirectNEQ applies the NEQ predicate on the "is_direct" field.
func IsDirectNEQ(v bool) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldIsDirect, v))
}

// IsRootEdgeEQ applies the EQ predicate on the "is_root_edge" field.
func IsRootEdgeEQ(v bool) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldIsRootEdge, v))
}

// IsRootEdgeNEQ applies the NEQ predicate on the "is_root_edge" field.
func IsRootEdgeNEQ(v bool) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldIsRootEdge, v))
}

// ManifestIDEQ applies the EQ predicate on the "manifest_id" field.
func ManifestIDEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldManifestID, v))
}

// ManifestIDNEQ applies the NEQ predicate on the "manifest_id" field.
func ManifestIDNEQ(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldManifestID, v))
}

// ManifestIDIn applies the In predicate on the "manifest_id" field.
func ManifestIDIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldManifestID, vs...))
}

// ManifestIDNotIn applies the NotIn predicate on the "manifest_id" field.
func ManifestIDNotIn(vs ...string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldManifestID, vs...))
}

// ManifestIDGT applies the GT predicate on the "manifest_id" field.
func ManifestIDGT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldManifestID, v))
}

// ManifestIDGTE applies the GTE predicate on the "manifest_id" field.
func ManifestIDGTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldManifestID, v))
}

// ManifestIDLT applies the LT predicate on the "manifest_id" field.
func ManifestIDLT(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldManifestID, v))
}

// ManifestIDLTE applies the LTE predicate on the "manifest_id" field.
func ManifestIDLTE(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldManifestID, v))
}

// ManifestIDContains applies the Contains predicate on the "manifest_id" field.
func ManifestIDContains(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContains(FieldManifestID, v))
}

// ManifestIDHasPrefix applies the HasPrefix predicate on the "manifest_id" field.
func ManifestIDHasPrefix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasPrefix(FieldManifestID, v))
}

// ManifestIDHasSuffix applies the HasSuffix predicate on the "manifest_id" field.
func ManifestIDHasSuffix(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldHasSuffix(FieldManifestID, v))
}

// ManifestIDEqualFold applies the EqualFold predicate on the "manifest_id" field.
func ManifestIDEqualFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEqualFold(FieldManifestID, v))
}

// ManifestIDContainsFold applies the ContainsFold predicate on the "manifest_id" field.
func ManifestIDContainsFold(v string) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldContainsFold(FieldManifestID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportDependencyGraph) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportDependencyGraph) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportDependencyGraph) predicate.ReportDependencyGraph {
	return predicate.ReportDependencyGraph(sql.NotPredicates(p))
}
