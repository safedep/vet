// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/predicate"
	"github.com/safedep/vet/ent/reportpackage"
	"github.com/safedep/vet/ent/reportvulnerability"
)

// ReportVulnerabilityUpdate is the builder for updating ReportVulnerability entities.
type ReportVulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *ReportVulnerabilityMutation
}

// Where appends a list predicates to the ReportVulnerabilityUpdate builder.
func (rvu *ReportVulnerabilityUpdate) Where(ps ...predicate.ReportVulnerability) *ReportVulnerabilityUpdate {
	rvu.mutation.Where(ps...)
	return rvu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (rvu *ReportVulnerabilityUpdate) SetVulnerabilityID(s string) *ReportVulnerabilityUpdate {
	rvu.mutation.SetVulnerabilityID(s)
	return rvu
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableVulnerabilityID(s *string) *ReportVulnerabilityUpdate {
	if s != nil {
		rvu.SetVulnerabilityID(*s)
	}
	return rvu
}

// SetTitle sets the "title" field.
func (rvu *ReportVulnerabilityUpdate) SetTitle(s string) *ReportVulnerabilityUpdate {
	rvu.mutation.SetTitle(s)
	return rvu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableTitle(s *string) *ReportVulnerabilityUpdate {
	if s != nil {
		rvu.SetTitle(*s)
	}
	return rvu
}

// SetDescription sets the "description" field.
func (rvu *ReportVulnerabilityUpdate) SetDescription(s string) *ReportVulnerabilityUpdate {
	rvu.mutation.SetDescription(s)
	return rvu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableDescription(s *string) *ReportVulnerabilityUpdate {
	if s != nil {
		rvu.SetDescription(*s)
	}
	return rvu
}

// ClearDescription clears the value of the "description" field.
func (rvu *ReportVulnerabilityUpdate) ClearDescription() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearDescription()
	return rvu
}

// SetAliases sets the "aliases" field.
func (rvu *ReportVulnerabilityUpdate) SetAliases(s []string) *ReportVulnerabilityUpdate {
	rvu.mutation.SetAliases(s)
	return rvu
}

// AppendAliases appends s to the "aliases" field.
func (rvu *ReportVulnerabilityUpdate) AppendAliases(s []string) *ReportVulnerabilityUpdate {
	rvu.mutation.AppendAliases(s)
	return rvu
}

// ClearAliases clears the value of the "aliases" field.
func (rvu *ReportVulnerabilityUpdate) ClearAliases() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearAliases()
	return rvu
}

// SetSeverity sets the "severity" field.
func (rvu *ReportVulnerabilityUpdate) SetSeverity(s string) *ReportVulnerabilityUpdate {
	rvu.mutation.SetSeverity(s)
	return rvu
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableSeverity(s *string) *ReportVulnerabilityUpdate {
	if s != nil {
		rvu.SetSeverity(*s)
	}
	return rvu
}

// ClearSeverity clears the value of the "severity" field.
func (rvu *ReportVulnerabilityUpdate) ClearSeverity() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearSeverity()
	return rvu
}

// SetSeverityType sets the "severity_type" field.
func (rvu *ReportVulnerabilityUpdate) SetSeverityType(s string) *ReportVulnerabilityUpdate {
	rvu.mutation.SetSeverityType(s)
	return rvu
}

// SetNillableSeverityType sets the "severity_type" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableSeverityType(s *string) *ReportVulnerabilityUpdate {
	if s != nil {
		rvu.SetSeverityType(*s)
	}
	return rvu
}

// ClearSeverityType clears the value of the "severity_type" field.
func (rvu *ReportVulnerabilityUpdate) ClearSeverityType() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearSeverityType()
	return rvu
}

// SetCvssScore sets the "cvss_score" field.
func (rvu *ReportVulnerabilityUpdate) SetCvssScore(f float64) *ReportVulnerabilityUpdate {
	rvu.mutation.ResetCvssScore()
	rvu.mutation.SetCvssScore(f)
	return rvu
}

// SetNillableCvssScore sets the "cvss_score" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableCvssScore(f *float64) *ReportVulnerabilityUpdate {
	if f != nil {
		rvu.SetCvssScore(*f)
	}
	return rvu
}

// AddCvssScore adds f to the "cvss_score" field.
func (rvu *ReportVulnerabilityUpdate) AddCvssScore(f float64) *ReportVulnerabilityUpdate {
	rvu.mutation.AddCvssScore(f)
	return rvu
}

// ClearCvssScore clears the value of the "cvss_score" field.
func (rvu *ReportVulnerabilityUpdate) ClearCvssScore() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearCvssScore()
	return rvu
}

// SetSeverityDetails sets the "severity_details" field.
func (rvu *ReportVulnerabilityUpdate) SetSeverityDetails(m map[string]interface{}) *ReportVulnerabilityUpdate {
	rvu.mutation.SetSeverityDetails(m)
	return rvu
}

// ClearSeverityDetails clears the value of the "severity_details" field.
func (rvu *ReportVulnerabilityUpdate) ClearSeverityDetails() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearSeverityDetails()
	return rvu
}

// SetCreatedAt sets the "created_at" field.
func (rvu *ReportVulnerabilityUpdate) SetCreatedAt(t time.Time) *ReportVulnerabilityUpdate {
	rvu.mutation.SetCreatedAt(t)
	return rvu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableCreatedAt(t *time.Time) *ReportVulnerabilityUpdate {
	if t != nil {
		rvu.SetCreatedAt(*t)
	}
	return rvu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rvu *ReportVulnerabilityUpdate) ClearCreatedAt() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearCreatedAt()
	return rvu
}

// SetUpdatedAt sets the "updated_at" field.
func (rvu *ReportVulnerabilityUpdate) SetUpdatedAt(t time.Time) *ReportVulnerabilityUpdate {
	rvu.mutation.SetUpdatedAt(t)
	return rvu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillableUpdatedAt(t *time.Time) *ReportVulnerabilityUpdate {
	if t != nil {
		rvu.SetUpdatedAt(*t)
	}
	return rvu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rvu *ReportVulnerabilityUpdate) ClearUpdatedAt() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearUpdatedAt()
	return rvu
}

// SetPackageID sets the "package" edge to the ReportPackage entity by ID.
func (rvu *ReportVulnerabilityUpdate) SetPackageID(id int) *ReportVulnerabilityUpdate {
	rvu.mutation.SetPackageID(id)
	return rvu
}

// SetNillablePackageID sets the "package" edge to the ReportPackage entity by ID if the given value is not nil.
func (rvu *ReportVulnerabilityUpdate) SetNillablePackageID(id *int) *ReportVulnerabilityUpdate {
	if id != nil {
		rvu = rvu.SetPackageID(*id)
	}
	return rvu
}

// SetPackage sets the "package" edge to the ReportPackage entity.
func (rvu *ReportVulnerabilityUpdate) SetPackage(r *ReportPackage) *ReportVulnerabilityUpdate {
	return rvu.SetPackageID(r.ID)
}

// Mutation returns the ReportVulnerabilityMutation object of the builder.
func (rvu *ReportVulnerabilityUpdate) Mutation() *ReportVulnerabilityMutation {
	return rvu.mutation
}

// ClearPackage clears the "package" edge to the ReportPackage entity.
func (rvu *ReportVulnerabilityUpdate) ClearPackage() *ReportVulnerabilityUpdate {
	rvu.mutation.ClearPackage()
	return rvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rvu *ReportVulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rvu.sqlSave, rvu.mutation, rvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rvu *ReportVulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := rvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rvu *ReportVulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := rvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvu *ReportVulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := rvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rvu *ReportVulnerabilityUpdate) check() error {
	if v, ok := rvu.mutation.VulnerabilityID(); ok {
		if err := reportvulnerability.VulnerabilityIDValidator(v); err != nil {
			return &ValidationError{Name: "vulnerability_id", err: fmt.Errorf(`ent: validator failed for field "ReportVulnerability.vulnerability_id": %w`, err)}
		}
	}
	if v, ok := rvu.mutation.Title(); ok {
		if err := reportvulnerability.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ReportVulnerability.title": %w`, err)}
		}
	}
	return nil
}

func (rvu *ReportVulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportvulnerability.Table, reportvulnerability.Columns, sqlgraph.NewFieldSpec(reportvulnerability.FieldID, field.TypeInt))
	if ps := rvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rvu.mutation.VulnerabilityID(); ok {
		_spec.SetField(reportvulnerability.FieldVulnerabilityID, field.TypeString, value)
	}
	if value, ok := rvu.mutation.Title(); ok {
		_spec.SetField(reportvulnerability.FieldTitle, field.TypeString, value)
	}
	if value, ok := rvu.mutation.Description(); ok {
		_spec.SetField(reportvulnerability.FieldDescription, field.TypeString, value)
	}
	if rvu.mutation.DescriptionCleared() {
		_spec.ClearField(reportvulnerability.FieldDescription, field.TypeString)
	}
	if value, ok := rvu.mutation.Aliases(); ok {
		_spec.SetField(reportvulnerability.FieldAliases, field.TypeJSON, value)
	}
	if value, ok := rvu.mutation.AppendedAliases(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, reportvulnerability.FieldAliases, value)
		})
	}
	if rvu.mutation.AliasesCleared() {
		_spec.ClearField(reportvulnerability.FieldAliases, field.TypeJSON)
	}
	if value, ok := rvu.mutation.Severity(); ok {
		_spec.SetField(reportvulnerability.FieldSeverity, field.TypeString, value)
	}
	if rvu.mutation.SeverityCleared() {
		_spec.ClearField(reportvulnerability.FieldSeverity, field.TypeString)
	}
	if value, ok := rvu.mutation.SeverityType(); ok {
		_spec.SetField(reportvulnerability.FieldSeverityType, field.TypeString, value)
	}
	if rvu.mutation.SeverityTypeCleared() {
		_spec.ClearField(reportvulnerability.FieldSeverityType, field.TypeString)
	}
	if value, ok := rvu.mutation.CvssScore(); ok {
		_spec.SetField(reportvulnerability.FieldCvssScore, field.TypeFloat64, value)
	}
	if value, ok := rvu.mutation.AddedCvssScore(); ok {
		_spec.AddField(reportvulnerability.FieldCvssScore, field.TypeFloat64, value)
	}
	if rvu.mutation.CvssScoreCleared() {
		_spec.ClearField(reportvulnerability.FieldCvssScore, field.TypeFloat64)
	}
	if value, ok := rvu.mutation.SeverityDetails(); ok {
		_spec.SetField(reportvulnerability.FieldSeverityDetails, field.TypeJSON, value)
	}
	if rvu.mutation.SeverityDetailsCleared() {
		_spec.ClearField(reportvulnerability.FieldSeverityDetails, field.TypeJSON)
	}
	if value, ok := rvu.mutation.CreatedAt(); ok {
		_spec.SetField(reportvulnerability.FieldCreatedAt, field.TypeTime, value)
	}
	if rvu.mutation.CreatedAtCleared() {
		_spec.ClearField(reportvulnerability.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rvu.mutation.UpdatedAt(); ok {
		_spec.SetField(reportvulnerability.FieldUpdatedAt, field.TypeTime, value)
	}
	if rvu.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportvulnerability.FieldUpdatedAt, field.TypeTime)
	}
	if rvu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportvulnerability.PackageTable,
			Columns: []string{reportvulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportvulnerability.PackageTable,
			Columns: []string{reportvulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportvulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rvu.mutation.done = true
	return n, nil
}

// ReportVulnerabilityUpdateOne is the builder for updating a single ReportVulnerability entity.
type ReportVulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportVulnerabilityMutation
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetVulnerabilityID(s string) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetVulnerabilityID(s)
	return rvuo
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableVulnerabilityID(s *string) *ReportVulnerabilityUpdateOne {
	if s != nil {
		rvuo.SetVulnerabilityID(*s)
	}
	return rvuo
}

// SetTitle sets the "title" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetTitle(s string) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetTitle(s)
	return rvuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableTitle(s *string) *ReportVulnerabilityUpdateOne {
	if s != nil {
		rvuo.SetTitle(*s)
	}
	return rvuo
}

// SetDescription sets the "description" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetDescription(s string) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetDescription(s)
	return rvuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableDescription(s *string) *ReportVulnerabilityUpdateOne {
	if s != nil {
		rvuo.SetDescription(*s)
	}
	return rvuo
}

// ClearDescription clears the value of the "description" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearDescription() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearDescription()
	return rvuo
}

// SetAliases sets the "aliases" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetAliases(s []string) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetAliases(s)
	return rvuo
}

// AppendAliases appends s to the "aliases" field.
func (rvuo *ReportVulnerabilityUpdateOne) AppendAliases(s []string) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.AppendAliases(s)
	return rvuo
}

// ClearAliases clears the value of the "aliases" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearAliases() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearAliases()
	return rvuo
}

// SetSeverity sets the "severity" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetSeverity(s string) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetSeverity(s)
	return rvuo
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableSeverity(s *string) *ReportVulnerabilityUpdateOne {
	if s != nil {
		rvuo.SetSeverity(*s)
	}
	return rvuo
}

// ClearSeverity clears the value of the "severity" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearSeverity() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearSeverity()
	return rvuo
}

// SetSeverityType sets the "severity_type" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetSeverityType(s string) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetSeverityType(s)
	return rvuo
}

// SetNillableSeverityType sets the "severity_type" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableSeverityType(s *string) *ReportVulnerabilityUpdateOne {
	if s != nil {
		rvuo.SetSeverityType(*s)
	}
	return rvuo
}

// ClearSeverityType clears the value of the "severity_type" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearSeverityType() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearSeverityType()
	return rvuo
}

// SetCvssScore sets the "cvss_score" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetCvssScore(f float64) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ResetCvssScore()
	rvuo.mutation.SetCvssScore(f)
	return rvuo
}

// SetNillableCvssScore sets the "cvss_score" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableCvssScore(f *float64) *ReportVulnerabilityUpdateOne {
	if f != nil {
		rvuo.SetCvssScore(*f)
	}
	return rvuo
}

// AddCvssScore adds f to the "cvss_score" field.
func (rvuo *ReportVulnerabilityUpdateOne) AddCvssScore(f float64) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.AddCvssScore(f)
	return rvuo
}

// ClearCvssScore clears the value of the "cvss_score" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearCvssScore() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearCvssScore()
	return rvuo
}

// SetSeverityDetails sets the "severity_details" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetSeverityDetails(m map[string]interface{}) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetSeverityDetails(m)
	return rvuo
}

// ClearSeverityDetails clears the value of the "severity_details" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearSeverityDetails() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearSeverityDetails()
	return rvuo
}

// SetCreatedAt sets the "created_at" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetCreatedAt(t time.Time) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetCreatedAt(t)
	return rvuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableCreatedAt(t *time.Time) *ReportVulnerabilityUpdateOne {
	if t != nil {
		rvuo.SetCreatedAt(*t)
	}
	return rvuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearCreatedAt() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearCreatedAt()
	return rvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rvuo *ReportVulnerabilityUpdateOne) SetUpdatedAt(t time.Time) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetUpdatedAt(t)
	return rvuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReportVulnerabilityUpdateOne {
	if t != nil {
		rvuo.SetUpdatedAt(*t)
	}
	return rvuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rvuo *ReportVulnerabilityUpdateOne) ClearUpdatedAt() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearUpdatedAt()
	return rvuo
}

// SetPackageID sets the "package" edge to the ReportPackage entity by ID.
func (rvuo *ReportVulnerabilityUpdateOne) SetPackageID(id int) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.SetPackageID(id)
	return rvuo
}

// SetNillablePackageID sets the "package" edge to the ReportPackage entity by ID if the given value is not nil.
func (rvuo *ReportVulnerabilityUpdateOne) SetNillablePackageID(id *int) *ReportVulnerabilityUpdateOne {
	if id != nil {
		rvuo = rvuo.SetPackageID(*id)
	}
	return rvuo
}

// SetPackage sets the "package" edge to the ReportPackage entity.
func (rvuo *ReportVulnerabilityUpdateOne) SetPackage(r *ReportPackage) *ReportVulnerabilityUpdateOne {
	return rvuo.SetPackageID(r.ID)
}

// Mutation returns the ReportVulnerabilityMutation object of the builder.
func (rvuo *ReportVulnerabilityUpdateOne) Mutation() *ReportVulnerabilityMutation {
	return rvuo.mutation
}

// ClearPackage clears the "package" edge to the ReportPackage entity.
func (rvuo *ReportVulnerabilityUpdateOne) ClearPackage() *ReportVulnerabilityUpdateOne {
	rvuo.mutation.ClearPackage()
	return rvuo
}

// Where appends a list predicates to the ReportVulnerabilityUpdate builder.
func (rvuo *ReportVulnerabilityUpdateOne) Where(ps ...predicate.ReportVulnerability) *ReportVulnerabilityUpdateOne {
	rvuo.mutation.Where(ps...)
	return rvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rvuo *ReportVulnerabilityUpdateOne) Select(field string, fields ...string) *ReportVulnerabilityUpdateOne {
	rvuo.fields = append([]string{field}, fields...)
	return rvuo
}

// Save executes the query and returns the updated ReportVulnerability entity.
func (rvuo *ReportVulnerabilityUpdateOne) Save(ctx context.Context) (*ReportVulnerability, error) {
	return withHooks(ctx, rvuo.sqlSave, rvuo.mutation, rvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rvuo *ReportVulnerabilityUpdateOne) SaveX(ctx context.Context) *ReportVulnerability {
	node, err := rvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rvuo *ReportVulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := rvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvuo *ReportVulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := rvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rvuo *ReportVulnerabilityUpdateOne) check() error {
	if v, ok := rvuo.mutation.VulnerabilityID(); ok {
		if err := reportvulnerability.VulnerabilityIDValidator(v); err != nil {
			return &ValidationError{Name: "vulnerability_id", err: fmt.Errorf(`ent: validator failed for field "ReportVulnerability.vulnerability_id": %w`, err)}
		}
	}
	if v, ok := rvuo.mutation.Title(); ok {
		if err := reportvulnerability.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ReportVulnerability.title": %w`, err)}
		}
	}
	return nil
}

func (rvuo *ReportVulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *ReportVulnerability, err error) {
	if err := rvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportvulnerability.Table, reportvulnerability.Columns, sqlgraph.NewFieldSpec(reportvulnerability.FieldID, field.TypeInt))
	id, ok := rvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportVulnerability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reportvulnerability.FieldID)
		for _, f := range fields {
			if !reportvulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reportvulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rvuo.mutation.VulnerabilityID(); ok {
		_spec.SetField(reportvulnerability.FieldVulnerabilityID, field.TypeString, value)
	}
	if value, ok := rvuo.mutation.Title(); ok {
		_spec.SetField(reportvulnerability.FieldTitle, field.TypeString, value)
	}
	if value, ok := rvuo.mutation.Description(); ok {
		_spec.SetField(reportvulnerability.FieldDescription, field.TypeString, value)
	}
	if rvuo.mutation.DescriptionCleared() {
		_spec.ClearField(reportvulnerability.FieldDescription, field.TypeString)
	}
	if value, ok := rvuo.mutation.Aliases(); ok {
		_spec.SetField(reportvulnerability.FieldAliases, field.TypeJSON, value)
	}
	if value, ok := rvuo.mutation.AppendedAliases(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, reportvulnerability.FieldAliases, value)
		})
	}
	if rvuo.mutation.AliasesCleared() {
		_spec.ClearField(reportvulnerability.FieldAliases, field.TypeJSON)
	}
	if value, ok := rvuo.mutation.Severity(); ok {
		_spec.SetField(reportvulnerability.FieldSeverity, field.TypeString, value)
	}
	if rvuo.mutation.SeverityCleared() {
		_spec.ClearField(reportvulnerability.FieldSeverity, field.TypeString)
	}
	if value, ok := rvuo.mutation.SeverityType(); ok {
		_spec.SetField(reportvulnerability.FieldSeverityType, field.TypeString, value)
	}
	if rvuo.mutation.SeverityTypeCleared() {
		_spec.ClearField(reportvulnerability.FieldSeverityType, field.TypeString)
	}
	if value, ok := rvuo.mutation.CvssScore(); ok {
		_spec.SetField(reportvulnerability.FieldCvssScore, field.TypeFloat64, value)
	}
	if value, ok := rvuo.mutation.AddedCvssScore(); ok {
		_spec.AddField(reportvulnerability.FieldCvssScore, field.TypeFloat64, value)
	}
	if rvuo.mutation.CvssScoreCleared() {
		_spec.ClearField(reportvulnerability.FieldCvssScore, field.TypeFloat64)
	}
	if value, ok := rvuo.mutation.SeverityDetails(); ok {
		_spec.SetField(reportvulnerability.FieldSeverityDetails, field.TypeJSON, value)
	}
	if rvuo.mutation.SeverityDetailsCleared() {
		_spec.ClearField(reportvulnerability.FieldSeverityDetails, field.TypeJSON)
	}
	if value, ok := rvuo.mutation.CreatedAt(); ok {
		_spec.SetField(reportvulnerability.FieldCreatedAt, field.TypeTime, value)
	}
	if rvuo.mutation.CreatedAtCleared() {
		_spec.ClearField(reportvulnerability.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(reportvulnerability.FieldUpdatedAt, field.TypeTime, value)
	}
	if rvuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportvulnerability.FieldUpdatedAt, field.TypeTime)
	}
	if rvuo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportvulnerability.PackageTable,
			Columns: []string{reportvulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportvulnerability.PackageTable,
			Columns: []string{reportvulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReportVulnerability{config: rvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportvulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rvuo.mutation.done = true
	return _node, nil
}
