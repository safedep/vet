// Code generated by ent, DO NOT EDIT.

package reportpackagemanifest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldID, id))
}

// ManifestID applies equality check predicate on the "manifest_id" field. It's identical to ManifestIDEQ.
func ManifestID(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldManifestID, v))
}

// SourceType applies equality check predicate on the "source_type" field. It's identical to SourceTypeEQ.
func SourceType(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldSourceType, v))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldNamespace, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldPath, v))
}

// DisplayPath applies equality check predicate on the "display_path" field. It's identical to DisplayPathEQ.
func DisplayPath(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldDisplayPath, v))
}

// Ecosystem applies equality check predicate on the "ecosystem" field. It's identical to EcosystemEQ.
func Ecosystem(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldEcosystem, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldUpdatedAt, v))
}

// ManifestIDEQ applies the EQ predicate on the "manifest_id" field.
func ManifestIDEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldManifestID, v))
}

// ManifestIDNEQ applies the NEQ predicate on the "manifest_id" field.
func ManifestIDNEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldManifestID, v))
}

// ManifestIDIn applies the In predicate on the "manifest_id" field.
func ManifestIDIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldManifestID, vs...))
}

// ManifestIDNotIn applies the NotIn predicate on the "manifest_id" field.
func ManifestIDNotIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldManifestID, vs...))
}

// ManifestIDGT applies the GT predicate on the "manifest_id" field.
func ManifestIDGT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldManifestID, v))
}

// ManifestIDGTE applies the GTE predicate on the "manifest_id" field.
func ManifestIDGTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldManifestID, v))
}

// ManifestIDLT applies the LT predicate on the "manifest_id" field.
func ManifestIDLT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldManifestID, v))
}

// ManifestIDLTE applies the LTE predicate on the "manifest_id" field.
func ManifestIDLTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldManifestID, v))
}

// ManifestIDContains applies the Contains predicate on the "manifest_id" field.
func ManifestIDContains(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContains(FieldManifestID, v))
}

// ManifestIDHasPrefix applies the HasPrefix predicate on the "manifest_id" field.
func ManifestIDHasPrefix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasPrefix(FieldManifestID, v))
}

// ManifestIDHasSuffix applies the HasSuffix predicate on the "manifest_id" field.
func ManifestIDHasSuffix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasSuffix(FieldManifestID, v))
}

// ManifestIDEqualFold applies the EqualFold predicate on the "manifest_id" field.
func ManifestIDEqualFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEqualFold(FieldManifestID, v))
}

// ManifestIDContainsFold applies the ContainsFold predicate on the "manifest_id" field.
func ManifestIDContainsFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContainsFold(FieldManifestID, v))
}

// SourceTypeEQ applies the EQ predicate on the "source_type" field.
func SourceTypeEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldSourceType, v))
}

// SourceTypeNEQ applies the NEQ predicate on the "source_type" field.
func SourceTypeNEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldSourceType, v))
}

// SourceTypeIn applies the In predicate on the "source_type" field.
func SourceTypeIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldSourceType, vs...))
}

// SourceTypeNotIn applies the NotIn predicate on the "source_type" field.
func SourceTypeNotIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldSourceType, vs...))
}

// SourceTypeGT applies the GT predicate on the "source_type" field.
func SourceTypeGT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldSourceType, v))
}

// SourceTypeGTE applies the GTE predicate on the "source_type" field.
func SourceTypeGTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldSourceType, v))
}

// SourceTypeLT applies the LT predicate on the "source_type" field.
func SourceTypeLT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldSourceType, v))
}

// SourceTypeLTE applies the LTE predicate on the "source_type" field.
func SourceTypeLTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldSourceType, v))
}

// SourceTypeContains applies the Contains predicate on the "source_type" field.
func SourceTypeContains(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContains(FieldSourceType, v))
}

// SourceTypeHasPrefix applies the HasPrefix predicate on the "source_type" field.
func SourceTypeHasPrefix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasPrefix(FieldSourceType, v))
}

// SourceTypeHasSuffix applies the HasSuffix predicate on the "source_type" field.
func SourceTypeHasSuffix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasSuffix(FieldSourceType, v))
}

// SourceTypeEqualFold applies the EqualFold predicate on the "source_type" field.
func SourceTypeEqualFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEqualFold(FieldSourceType, v))
}

// SourceTypeContainsFold applies the ContainsFold predicate on the "source_type" field.
func SourceTypeContainsFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContainsFold(FieldSourceType, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContainsFold(FieldNamespace, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContainsFold(FieldPath, v))
}

// DisplayPathEQ applies the EQ predicate on the "display_path" field.
func DisplayPathEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldDisplayPath, v))
}

// DisplayPathNEQ applies the NEQ predicate on the "display_path" field.
func DisplayPathNEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldDisplayPath, v))
}

// DisplayPathIn applies the In predicate on the "display_path" field.
func DisplayPathIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldDisplayPath, vs...))
}

// DisplayPathNotIn applies the NotIn predicate on the "display_path" field.
func DisplayPathNotIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldDisplayPath, vs...))
}

// DisplayPathGT applies the GT predicate on the "display_path" field.
func DisplayPathGT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldDisplayPath, v))
}

// DisplayPathGTE applies the GTE predicate on the "display_path" field.
func DisplayPathGTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldDisplayPath, v))
}

// DisplayPathLT applies the LT predicate on the "display_path" field.
func DisplayPathLT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldDisplayPath, v))
}

// DisplayPathLTE applies the LTE predicate on the "display_path" field.
func DisplayPathLTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldDisplayPath, v))
}

// DisplayPathContains applies the Contains predicate on the "display_path" field.
func DisplayPathContains(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContains(FieldDisplayPath, v))
}

// DisplayPathHasPrefix applies the HasPrefix predicate on the "display_path" field.
func DisplayPathHasPrefix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasPrefix(FieldDisplayPath, v))
}

// DisplayPathHasSuffix applies the HasSuffix predicate on the "display_path" field.
func DisplayPathHasSuffix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasSuffix(FieldDisplayPath, v))
}

// DisplayPathEqualFold applies the EqualFold predicate on the "display_path" field.
func DisplayPathEqualFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEqualFold(FieldDisplayPath, v))
}

// DisplayPathContainsFold applies the ContainsFold predicate on the "display_path" field.
func DisplayPathContainsFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContainsFold(FieldDisplayPath, v))
}

// EcosystemEQ applies the EQ predicate on the "ecosystem" field.
func EcosystemEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldEcosystem, v))
}

// EcosystemNEQ applies the NEQ predicate on the "ecosystem" field.
func EcosystemNEQ(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldEcosystem, v))
}

// EcosystemIn applies the In predicate on the "ecosystem" field.
func EcosystemIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldEcosystem, vs...))
}

// EcosystemNotIn applies the NotIn predicate on the "ecosystem" field.
func EcosystemNotIn(vs ...string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldEcosystem, vs...))
}

// EcosystemGT applies the GT predicate on the "ecosystem" field.
func EcosystemGT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldEcosystem, v))
}

// EcosystemGTE applies the GTE predicate on the "ecosystem" field.
func EcosystemGTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldEcosystem, v))
}

// EcosystemLT applies the LT predicate on the "ecosystem" field.
func EcosystemLT(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldEcosystem, v))
}

// EcosystemLTE applies the LTE predicate on the "ecosystem" field.
func EcosystemLTE(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldEcosystem, v))
}

// EcosystemContains applies the Contains predicate on the "ecosystem" field.
func EcosystemContains(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContains(FieldEcosystem, v))
}

// EcosystemHasPrefix applies the HasPrefix predicate on the "ecosystem" field.
func EcosystemHasPrefix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasPrefix(FieldEcosystem, v))
}

// EcosystemHasSuffix applies the HasSuffix predicate on the "ecosystem" field.
func EcosystemHasSuffix(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldHasSuffix(FieldEcosystem, v))
}

// EcosystemEqualFold applies the EqualFold predicate on the "ecosystem" field.
func EcosystemEqualFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEqualFold(FieldEcosystem, v))
}

// EcosystemContainsFold applies the ContainsFold predicate on the "ecosystem" field.
func EcosystemContainsFold(v string) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldContainsFold(FieldEcosystem, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.FieldNotNull(FieldUpdatedAt))
}

// HasPackages applies the HasEdge predicate on the "packages" edge.
func HasPackages() predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PackagesTable, PackagesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagesWith applies the HasEdge predicate on the "packages" edge with a given conditions (other predicates).
func HasPackagesWith(preds ...predicate.ReportPackage) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(func(s *sql.Selector) {
		step := newPackagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportPackageManifest) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportPackageManifest) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportPackageManifest) predicate.ReportPackageManifest {
	return predicate.ReportPackageManifest(sql.NotPredicates(p))
}
