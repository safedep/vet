// Code generated by ent, DO NOT EDIT.

package reportvulnerability

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportvulnerability type in the database.
	Label = "report_vulnerability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVulnerabilityID holds the string denoting the vulnerability_id field in the database.
	FieldVulnerabilityID = "vulnerability_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAliases holds the string denoting the aliases field in the database.
	FieldAliases = "aliases"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// FieldSeverityType holds the string denoting the severity_type field in the database.
	FieldSeverityType = "severity_type"
	// FieldCvssScore holds the string denoting the cvss_score field in the database.
	FieldCvssScore = "cvss_score"
	// FieldSeverityDetails holds the string denoting the severity_details field in the database.
	FieldSeverityDetails = "severity_details"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// Table holds the table name of the reportvulnerability in the database.
	Table = "report_vulnerabilities"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "report_vulnerabilities"
	// PackageInverseTable is the table name for the ReportPackage entity.
	// It exists in this package in order to avoid circular dependency with the "reportpackage" package.
	PackageInverseTable = "report_packages"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "report_package_vulnerabilities"
)

// Columns holds all SQL columns for reportvulnerability fields.
var Columns = []string{
	FieldID,
	FieldVulnerabilityID,
	FieldTitle,
	FieldDescription,
	FieldAliases,
	FieldSeverity,
	FieldSeverityType,
	FieldCvssScore,
	FieldSeverityDetails,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "report_vulnerabilities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"report_package_vulnerabilities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// VulnerabilityIDValidator is a validator for the "vulnerability_id" field. It is called by the builders before save.
	VulnerabilityIDValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
)

// OrderOption defines the ordering options for the ReportVulnerability queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVulnerabilityID orders the results by the vulnerability_id field.
func ByVulnerabilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnerabilityID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySeverity orders the results by the severity field.
func BySeverity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeverity, opts...).ToFunc()
}

// BySeverityType orders the results by the severity_type field.
func BySeverityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeverityType, opts...).ToFunc()
}

// ByCvssScore orders the results by the cvss_score field.
func ByCvssScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCvssScore, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PackageTable, PackageColumn),
	)
}
