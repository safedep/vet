// Code generated by ent, DO NOT EDIT.

package reportvulnerability

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldID, id))
}

// VulnerabilityID applies equality check predicate on the "vulnerability_id" field. It's identical to VulnerabilityIDEQ.
func VulnerabilityID(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldVulnerabilityID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldDescription, v))
}

// Severity applies equality check predicate on the "severity" field. It's identical to SeverityEQ.
func Severity(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldSeverity, v))
}

// SeverityType applies equality check predicate on the "severity_type" field. It's identical to SeverityTypeEQ.
func SeverityType(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldSeverityType, v))
}

// CvssScore applies equality check predicate on the "cvss_score" field. It's identical to CvssScoreEQ.
func CvssScore(v float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldCvssScore, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldUpdatedAt, v))
}

// VulnerabilityIDEQ applies the EQ predicate on the "vulnerability_id" field.
func VulnerabilityIDEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldVulnerabilityID, v))
}

// VulnerabilityIDNEQ applies the NEQ predicate on the "vulnerability_id" field.
func VulnerabilityIDNEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldVulnerabilityID, v))
}

// VulnerabilityIDIn applies the In predicate on the "vulnerability_id" field.
func VulnerabilityIDIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldVulnerabilityID, vs...))
}

// VulnerabilityIDNotIn applies the NotIn predicate on the "vulnerability_id" field.
func VulnerabilityIDNotIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldVulnerabilityID, vs...))
}

// VulnerabilityIDGT applies the GT predicate on the "vulnerability_id" field.
func VulnerabilityIDGT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldVulnerabilityID, v))
}

// VulnerabilityIDGTE applies the GTE predicate on the "vulnerability_id" field.
func VulnerabilityIDGTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldVulnerabilityID, v))
}

// VulnerabilityIDLT applies the LT predicate on the "vulnerability_id" field.
func VulnerabilityIDLT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldVulnerabilityID, v))
}

// VulnerabilityIDLTE applies the LTE predicate on the "vulnerability_id" field.
func VulnerabilityIDLTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldVulnerabilityID, v))
}

// VulnerabilityIDContains applies the Contains predicate on the "vulnerability_id" field.
func VulnerabilityIDContains(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContains(FieldVulnerabilityID, v))
}

// VulnerabilityIDHasPrefix applies the HasPrefix predicate on the "vulnerability_id" field.
func VulnerabilityIDHasPrefix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasPrefix(FieldVulnerabilityID, v))
}

// VulnerabilityIDHasSuffix applies the HasSuffix predicate on the "vulnerability_id" field.
func VulnerabilityIDHasSuffix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasSuffix(FieldVulnerabilityID, v))
}

// VulnerabilityIDEqualFold applies the EqualFold predicate on the "vulnerability_id" field.
func VulnerabilityIDEqualFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEqualFold(FieldVulnerabilityID, v))
}

// VulnerabilityIDContainsFold applies the ContainsFold predicate on the "vulnerability_id" field.
func VulnerabilityIDContainsFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContainsFold(FieldVulnerabilityID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContainsFold(FieldDescription, v))
}

// AliasesIsNil applies the IsNil predicate on the "aliases" field.
func AliasesIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldAliases))
}

// AliasesNotNil applies the NotNil predicate on the "aliases" field.
func AliasesNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldAliases))
}

// SeverityEQ applies the EQ predicate on the "severity" field.
func SeverityEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldSeverity, v))
}

// SeverityNEQ applies the NEQ predicate on the "severity" field.
func SeverityNEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldSeverity, v))
}

// SeverityIn applies the In predicate on the "severity" field.
func SeverityIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldSeverity, vs...))
}

// SeverityNotIn applies the NotIn predicate on the "severity" field.
func SeverityNotIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldSeverity, vs...))
}

// SeverityGT applies the GT predicate on the "severity" field.
func SeverityGT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldSeverity, v))
}

// SeverityGTE applies the GTE predicate on the "severity" field.
func SeverityGTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldSeverity, v))
}

// SeverityLT applies the LT predicate on the "severity" field.
func SeverityLT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldSeverity, v))
}

// SeverityLTE applies the LTE predicate on the "severity" field.
func SeverityLTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldSeverity, v))
}

// SeverityContains applies the Contains predicate on the "severity" field.
func SeverityContains(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContains(FieldSeverity, v))
}

// SeverityHasPrefix applies the HasPrefix predicate on the "severity" field.
func SeverityHasPrefix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasPrefix(FieldSeverity, v))
}

// SeverityHasSuffix applies the HasSuffix predicate on the "severity" field.
func SeverityHasSuffix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasSuffix(FieldSeverity, v))
}

// SeverityIsNil applies the IsNil predicate on the "severity" field.
func SeverityIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldSeverity))
}

// SeverityNotNil applies the NotNil predicate on the "severity" field.
func SeverityNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldSeverity))
}

// SeverityEqualFold applies the EqualFold predicate on the "severity" field.
func SeverityEqualFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEqualFold(FieldSeverity, v))
}

// SeverityContainsFold applies the ContainsFold predicate on the "severity" field.
func SeverityContainsFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContainsFold(FieldSeverity, v))
}

// SeverityTypeEQ applies the EQ predicate on the "severity_type" field.
func SeverityTypeEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldSeverityType, v))
}

// SeverityTypeNEQ applies the NEQ predicate on the "severity_type" field.
func SeverityTypeNEQ(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldSeverityType, v))
}

// SeverityTypeIn applies the In predicate on the "severity_type" field.
func SeverityTypeIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldSeverityType, vs...))
}

// SeverityTypeNotIn applies the NotIn predicate on the "severity_type" field.
func SeverityTypeNotIn(vs ...string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldSeverityType, vs...))
}

// SeverityTypeGT applies the GT predicate on the "severity_type" field.
func SeverityTypeGT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldSeverityType, v))
}

// SeverityTypeGTE applies the GTE predicate on the "severity_type" field.
func SeverityTypeGTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldSeverityType, v))
}

// SeverityTypeLT applies the LT predicate on the "severity_type" field.
func SeverityTypeLT(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldSeverityType, v))
}

// SeverityTypeLTE applies the LTE predicate on the "severity_type" field.
func SeverityTypeLTE(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldSeverityType, v))
}

// SeverityTypeContains applies the Contains predicate on the "severity_type" field.
func SeverityTypeContains(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContains(FieldSeverityType, v))
}

// SeverityTypeHasPrefix applies the HasPrefix predicate on the "severity_type" field.
func SeverityTypeHasPrefix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasPrefix(FieldSeverityType, v))
}

// SeverityTypeHasSuffix applies the HasSuffix predicate on the "severity_type" field.
func SeverityTypeHasSuffix(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldHasSuffix(FieldSeverityType, v))
}

// SeverityTypeIsNil applies the IsNil predicate on the "severity_type" field.
func SeverityTypeIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldSeverityType))
}

// SeverityTypeNotNil applies the NotNil predicate on the "severity_type" field.
func SeverityTypeNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldSeverityType))
}

// SeverityTypeEqualFold applies the EqualFold predicate on the "severity_type" field.
func SeverityTypeEqualFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEqualFold(FieldSeverityType, v))
}

// SeverityTypeContainsFold applies the ContainsFold predicate on the "severity_type" field.
func SeverityTypeContainsFold(v string) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldContainsFold(FieldSeverityType, v))
}

// CvssScoreEQ applies the EQ predicate on the "cvss_score" field.
func CvssScoreEQ(v float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldCvssScore, v))
}

// CvssScoreNEQ applies the NEQ predicate on the "cvss_score" field.
func CvssScoreNEQ(v float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldCvssScore, v))
}

// CvssScoreIn applies the In predicate on the "cvss_score" field.
func CvssScoreIn(vs ...float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldCvssScore, vs...))
}

// CvssScoreNotIn applies the NotIn predicate on the "cvss_score" field.
func CvssScoreNotIn(vs ...float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldCvssScore, vs...))
}

// CvssScoreGT applies the GT predicate on the "cvss_score" field.
func CvssScoreGT(v float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldCvssScore, v))
}

// CvssScoreGTE applies the GTE predicate on the "cvss_score" field.
func CvssScoreGTE(v float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldCvssScore, v))
}

// CvssScoreLT applies the LT predicate on the "cvss_score" field.
func CvssScoreLT(v float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldCvssScore, v))
}

// CvssScoreLTE applies the LTE predicate on the "cvss_score" field.
func CvssScoreLTE(v float64) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldCvssScore, v))
}

// CvssScoreIsNil applies the IsNil predicate on the "cvss_score" field.
func CvssScoreIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldCvssScore))
}

// CvssScoreNotNil applies the NotNil predicate on the "cvss_score" field.
func CvssScoreNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldCvssScore))
}

// SeverityDetailsIsNil applies the IsNil predicate on the "severity_details" field.
func SeverityDetailsIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldSeverityDetails))
}

// SeverityDetailsNotNil applies the NotNil predicate on the "severity_details" field.
func SeverityDetailsNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldSeverityDetails))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.FieldNotNull(FieldUpdatedAt))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.ReportVulnerability {
	return predicate.ReportVulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.ReportPackage) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportVulnerability) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportVulnerability) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportVulnerability) predicate.ReportVulnerability {
	return predicate.ReportVulnerability(sql.NotPredicates(p))
}
