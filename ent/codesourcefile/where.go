// Code generated by ent, DO NOT EDIT.

package codesourcefile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldLTE(FieldID, id))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldEQ(FieldPath, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.FieldContainsFold(FieldPath, v))
}

// HasDepsUsageEvidences applies the HasEdge predicate on the "deps_usage_evidences" edge.
func HasDepsUsageEvidences() predicate.CodeSourceFile {
	return predicate.CodeSourceFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DepsUsageEvidencesTable, DepsUsageEvidencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepsUsageEvidencesWith applies the HasEdge predicate on the "deps_usage_evidences" edge with a given conditions (other predicates).
func HasDepsUsageEvidencesWith(preds ...predicate.DepsUsageEvidence) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(func(s *sql.Selector) {
		step := newDepsUsageEvidencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CodeSourceFile) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CodeSourceFile) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CodeSourceFile) predicate.CodeSourceFile {
	return predicate.CodeSourceFile(sql.NotPredicates(p))
}
