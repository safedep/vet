// Code generated by ent, DO NOT EDIT.

package reportpackage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportpackage type in the database.
	Label = "report_package"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldEcosystem holds the string denoting the ecosystem field in the database.
	FieldEcosystem = "ecosystem"
	// FieldPackageURL holds the string denoting the package_url field in the database.
	FieldPackageURL = "package_url"
	// FieldDepth holds the string denoting the depth field in the database.
	FieldDepth = "depth"
	// FieldIsDirect holds the string denoting the is_direct field in the database.
	FieldIsDirect = "is_direct"
	// FieldIsMalware holds the string denoting the is_malware field in the database.
	FieldIsMalware = "is_malware"
	// FieldIsSuspicious holds the string denoting the is_suspicious field in the database.
	FieldIsSuspicious = "is_suspicious"
	// FieldPackageDetails holds the string denoting the package_details field in the database.
	FieldPackageDetails = "package_details"
	// FieldInsightsV2 holds the string denoting the insights_v2 field in the database.
	FieldInsightsV2 = "insights_v2"
	// FieldCodeAnalysis holds the string denoting the code_analysis field in the database.
	FieldCodeAnalysis = "code_analysis"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeManifests holds the string denoting the manifests edge name in mutations.
	EdgeManifests = "manifests"
	// EdgeVulnerabilities holds the string denoting the vulnerabilities edge name in mutations.
	EdgeVulnerabilities = "vulnerabilities"
	// EdgeLicenses holds the string denoting the licenses edge name in mutations.
	EdgeLicenses = "licenses"
	// EdgeDependencies holds the string denoting the dependencies edge name in mutations.
	EdgeDependencies = "dependencies"
	// EdgeMalwareAnalysis holds the string denoting the malware_analysis edge name in mutations.
	EdgeMalwareAnalysis = "malware_analysis"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeSlsaProvenances holds the string denoting the slsa_provenances edge name in mutations.
	EdgeSlsaProvenances = "slsa_provenances"
	// Table holds the table name of the reportpackage in the database.
	Table = "report_packages"
	// ManifestsTable is the table that holds the manifests relation/edge. The primary key declared below.
	ManifestsTable = "report_package_manifest_packages"
	// ManifestsInverseTable is the table name for the ReportPackageManifest entity.
	// It exists in this package in order to avoid circular dependency with the "reportpackagemanifest" package.
	ManifestsInverseTable = "report_package_manifests"
	// VulnerabilitiesTable is the table that holds the vulnerabilities relation/edge.
	VulnerabilitiesTable = "report_vulnerabilities"
	// VulnerabilitiesInverseTable is the table name for the ReportVulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "reportvulnerability" package.
	VulnerabilitiesInverseTable = "report_vulnerabilities"
	// VulnerabilitiesColumn is the table column denoting the vulnerabilities relation/edge.
	VulnerabilitiesColumn = "report_package_vulnerabilities"
	// LicensesTable is the table that holds the licenses relation/edge.
	LicensesTable = "report_licenses"
	// LicensesInverseTable is the table name for the ReportLicense entity.
	// It exists in this package in order to avoid circular dependency with the "reportlicense" package.
	LicensesInverseTable = "report_licenses"
	// LicensesColumn is the table column denoting the licenses relation/edge.
	LicensesColumn = "report_package_licenses"
	// DependenciesTable is the table that holds the dependencies relation/edge.
	DependenciesTable = "report_dependencies"
	// DependenciesInverseTable is the table name for the ReportDependency entity.
	// It exists in this package in order to avoid circular dependency with the "reportdependency" package.
	DependenciesInverseTable = "report_dependencies"
	// DependenciesColumn is the table column denoting the dependencies relation/edge.
	DependenciesColumn = "report_package_dependencies"
	// MalwareAnalysisTable is the table that holds the malware_analysis relation/edge.
	MalwareAnalysisTable = "report_malwares"
	// MalwareAnalysisInverseTable is the table name for the ReportMalware entity.
	// It exists in this package in order to avoid circular dependency with the "reportmalware" package.
	MalwareAnalysisInverseTable = "report_malwares"
	// MalwareAnalysisColumn is the table column denoting the malware_analysis relation/edge.
	MalwareAnalysisColumn = "report_package_malware_analysis"
	// ProjectsTable is the table that holds the projects relation/edge.
	ProjectsTable = "report_projects"
	// ProjectsInverseTable is the table name for the ReportProject entity.
	// It exists in this package in order to avoid circular dependency with the "reportproject" package.
	ProjectsInverseTable = "report_projects"
	// ProjectsColumn is the table column denoting the projects relation/edge.
	ProjectsColumn = "report_package_projects"
	// SlsaProvenancesTable is the table that holds the slsa_provenances relation/edge.
	SlsaProvenancesTable = "report_slsa_provenances"
	// SlsaProvenancesInverseTable is the table name for the ReportSlsaProvenance entity.
	// It exists in this package in order to avoid circular dependency with the "reportslsaprovenance" package.
	SlsaProvenancesInverseTable = "report_slsa_provenances"
	// SlsaProvenancesColumn is the table column denoting the slsa_provenances relation/edge.
	SlsaProvenancesColumn = "report_package_slsa_provenances"
)

// Columns holds all SQL columns for reportpackage fields.
var Columns = []string{
	FieldID,
	FieldPackageID,
	FieldName,
	FieldVersion,
	FieldEcosystem,
	FieldPackageURL,
	FieldDepth,
	FieldIsDirect,
	FieldIsMalware,
	FieldIsSuspicious,
	FieldPackageDetails,
	FieldInsightsV2,
	FieldCodeAnalysis,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// ManifestsPrimaryKey and ManifestsColumn2 are the table columns denoting the
	// primary key for the manifests relation (M2M).
	ManifestsPrimaryKey = []string{"report_package_manifest_id", "report_package_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PackageIDValidator is a validator for the "package_id" field. It is called by the builders before save.
	PackageIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(string) error
	// EcosystemValidator is a validator for the "ecosystem" field. It is called by the builders before save.
	EcosystemValidator func(string) error
	// PackageURLValidator is a validator for the "package_url" field. It is called by the builders before save.
	PackageURLValidator func(string) error
	// DefaultDepth holds the default value on creation for the "depth" field.
	DefaultDepth int
	// DefaultIsDirect holds the default value on creation for the "is_direct" field.
	DefaultIsDirect bool
	// DefaultIsMalware holds the default value on creation for the "is_malware" field.
	DefaultIsMalware bool
	// DefaultIsSuspicious holds the default value on creation for the "is_suspicious" field.
	DefaultIsSuspicious bool
)

// OrderOption defines the ordering options for the ReportPackage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByEcosystem orders the results by the ecosystem field.
func ByEcosystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEcosystem, opts...).ToFunc()
}

// ByPackageURL orders the results by the package_url field.
func ByPackageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageURL, opts...).ToFunc()
}

// ByDepth orders the results by the depth field.
func ByDepth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepth, opts...).ToFunc()
}

// ByIsDirect orders the results by the is_direct field.
func ByIsDirect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDirect, opts...).ToFunc()
}

// ByIsMalware orders the results by the is_malware field.
func ByIsMalware(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMalware, opts...).ToFunc()
}

// ByIsSuspicious orders the results by the is_suspicious field.
func ByIsSuspicious(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSuspicious, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByManifestsCount orders the results by manifests count.
func ByManifestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManifestsStep(), opts...)
	}
}

// ByManifests orders the results by manifests terms.
func ByManifests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManifestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVulnerabilitiesCount orders the results by vulnerabilities count.
func ByVulnerabilitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVulnerabilitiesStep(), opts...)
	}
}

// ByVulnerabilities orders the results by vulnerabilities terms.
func ByVulnerabilities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLicensesCount orders the results by licenses count.
func ByLicensesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLicensesStep(), opts...)
	}
}

// ByLicenses orders the results by licenses terms.
func ByLicenses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLicensesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependenciesCount orders the results by dependencies count.
func ByDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependenciesStep(), opts...)
	}
}

// ByDependencies orders the results by dependencies terms.
func ByDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMalwareAnalysisField orders the results by malware_analysis field.
func ByMalwareAnalysisField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMalwareAnalysisStep(), sql.OrderByField(field, opts...))
	}
}

// ByProjectsCount orders the results by projects count.
func ByProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectsStep(), opts...)
	}
}

// ByProjects orders the results by projects terms.
func ByProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySlsaProvenancesCount orders the results by slsa_provenances count.
func BySlsaProvenancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSlsaProvenancesStep(), opts...)
	}
}

// BySlsaProvenances orders the results by slsa_provenances terms.
func BySlsaProvenances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSlsaProvenancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newManifestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManifestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ManifestsTable, ManifestsPrimaryKey...),
	)
}
func newVulnerabilitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VulnerabilitiesTable, VulnerabilitiesColumn),
	)
}
func newLicensesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LicensesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LicensesTable, LicensesColumn),
	)
}
func newDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DependenciesTable, DependenciesColumn),
	)
}
func newMalwareAnalysisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MalwareAnalysisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MalwareAnalysisTable, MalwareAnalysisColumn),
	)
}
func newProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
	)
}
func newSlsaProvenancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SlsaProvenancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SlsaProvenancesTable, SlsaProvenancesColumn),
	)
}
