// Code generated by ent, DO NOT EDIT.

package reportpackage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldID, id))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldPackageID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldVersion, v))
}

// Ecosystem applies equality check predicate on the "ecosystem" field. It's identical to EcosystemEQ.
func Ecosystem(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldEcosystem, v))
}

// PackageURL applies equality check predicate on the "package_url" field. It's identical to PackageURLEQ.
func PackageURL(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldPackageURL, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldDepth, v))
}

// IsDirect applies equality check predicate on the "is_direct" field. It's identical to IsDirectEQ.
func IsDirect(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldIsDirect, v))
}

// IsMalware applies equality check predicate on the "is_malware" field. It's identical to IsMalwareEQ.
func IsMalware(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldIsMalware, v))
}

// IsSuspicious applies equality check predicate on the "is_suspicious" field. It's identical to IsSuspiciousEQ.
func IsSuspicious(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldIsSuspicious, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldUpdatedAt, v))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDGT applies the GT predicate on the "package_id" field.
func PackageIDGT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldPackageID, v))
}

// PackageIDGTE applies the GTE predicate on the "package_id" field.
func PackageIDGTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldPackageID, v))
}

// PackageIDLT applies the LT predicate on the "package_id" field.
func PackageIDLT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldPackageID, v))
}

// PackageIDLTE applies the LTE predicate on the "package_id" field.
func PackageIDLTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldPackageID, v))
}

// PackageIDContains applies the Contains predicate on the "package_id" field.
func PackageIDContains(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContains(FieldPackageID, v))
}

// PackageIDHasPrefix applies the HasPrefix predicate on the "package_id" field.
func PackageIDHasPrefix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasPrefix(FieldPackageID, v))
}

// PackageIDHasSuffix applies the HasSuffix predicate on the "package_id" field.
func PackageIDHasSuffix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasSuffix(FieldPackageID, v))
}

// PackageIDEqualFold applies the EqualFold predicate on the "package_id" field.
func PackageIDEqualFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEqualFold(FieldPackageID, v))
}

// PackageIDContainsFold applies the ContainsFold predicate on the "package_id" field.
func PackageIDContainsFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContainsFold(FieldPackageID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContainsFold(FieldVersion, v))
}

// EcosystemEQ applies the EQ predicate on the "ecosystem" field.
func EcosystemEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldEcosystem, v))
}

// EcosystemNEQ applies the NEQ predicate on the "ecosystem" field.
func EcosystemNEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldEcosystem, v))
}

// EcosystemIn applies the In predicate on the "ecosystem" field.
func EcosystemIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldEcosystem, vs...))
}

// EcosystemNotIn applies the NotIn predicate on the "ecosystem" field.
func EcosystemNotIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldEcosystem, vs...))
}

// EcosystemGT applies the GT predicate on the "ecosystem" field.
func EcosystemGT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldEcosystem, v))
}

// EcosystemGTE applies the GTE predicate on the "ecosystem" field.
func EcosystemGTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldEcosystem, v))
}

// EcosystemLT applies the LT predicate on the "ecosystem" field.
func EcosystemLT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldEcosystem, v))
}

// EcosystemLTE applies the LTE predicate on the "ecosystem" field.
func EcosystemLTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldEcosystem, v))
}

// EcosystemContains applies the Contains predicate on the "ecosystem" field.
func EcosystemContains(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContains(FieldEcosystem, v))
}

// EcosystemHasPrefix applies the HasPrefix predicate on the "ecosystem" field.
func EcosystemHasPrefix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasPrefix(FieldEcosystem, v))
}

// EcosystemHasSuffix applies the HasSuffix predicate on the "ecosystem" field.
func EcosystemHasSuffix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasSuffix(FieldEcosystem, v))
}

// EcosystemEqualFold applies the EqualFold predicate on the "ecosystem" field.
func EcosystemEqualFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEqualFold(FieldEcosystem, v))
}

// EcosystemContainsFold applies the ContainsFold predicate on the "ecosystem" field.
func EcosystemContainsFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContainsFold(FieldEcosystem, v))
}

// PackageURLEQ applies the EQ predicate on the "package_url" field.
func PackageURLEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldPackageURL, v))
}

// PackageURLNEQ applies the NEQ predicate on the "package_url" field.
func PackageURLNEQ(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldPackageURL, v))
}

// PackageURLIn applies the In predicate on the "package_url" field.
func PackageURLIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldPackageURL, vs...))
}

// PackageURLNotIn applies the NotIn predicate on the "package_url" field.
func PackageURLNotIn(vs ...string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldPackageURL, vs...))
}

// PackageURLGT applies the GT predicate on the "package_url" field.
func PackageURLGT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldPackageURL, v))
}

// PackageURLGTE applies the GTE predicate on the "package_url" field.
func PackageURLGTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldPackageURL, v))
}

// PackageURLLT applies the LT predicate on the "package_url" field.
func PackageURLLT(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldPackageURL, v))
}

// PackageURLLTE applies the LTE predicate on the "package_url" field.
func PackageURLLTE(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldPackageURL, v))
}

// PackageURLContains applies the Contains predicate on the "package_url" field.
func PackageURLContains(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContains(FieldPackageURL, v))
}

// PackageURLHasPrefix applies the HasPrefix predicate on the "package_url" field.
func PackageURLHasPrefix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasPrefix(FieldPackageURL, v))
}

// PackageURLHasSuffix applies the HasSuffix predicate on the "package_url" field.
func PackageURLHasSuffix(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldHasSuffix(FieldPackageURL, v))
}

// PackageURLEqualFold applies the EqualFold predicate on the "package_url" field.
func PackageURLEqualFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEqualFold(FieldPackageURL, v))
}

// PackageURLContainsFold applies the ContainsFold predicate on the "package_url" field.
func PackageURLContainsFold(v string) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldContainsFold(FieldPackageURL, v))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v int) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldDepth, v))
}

// IsDirectEQ applies the EQ predicate on the "is_direct" field.
func IsDirectEQ(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldIsDirect, v))
}

// IsDirectNEQ applies the NEQ predicate on the "is_direct" field.
func IsDirectNEQ(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldIsDirect, v))
}

// IsMalwareEQ applies the EQ predicate on the "is_malware" field.
func IsMalwareEQ(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldIsMalware, v))
}

// IsMalwareNEQ applies the NEQ predicate on the "is_malware" field.
func IsMalwareNEQ(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldIsMalware, v))
}

// IsSuspiciousEQ applies the EQ predicate on the "is_suspicious" field.
func IsSuspiciousEQ(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldIsSuspicious, v))
}

// IsSuspiciousNEQ applies the NEQ predicate on the "is_suspicious" field.
func IsSuspiciousNEQ(v bool) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldIsSuspicious, v))
}

// PackageDetailsIsNil applies the IsNil predicate on the "package_details" field.
func PackageDetailsIsNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIsNull(FieldPackageDetails))
}

// PackageDetailsNotNil applies the NotNil predicate on the "package_details" field.
func PackageDetailsNotNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotNull(FieldPackageDetails))
}

// InsightsV2IsNil applies the IsNil predicate on the "insights_v2" field.
func InsightsV2IsNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIsNull(FieldInsightsV2))
}

// InsightsV2NotNil applies the NotNil predicate on the "insights_v2" field.
func InsightsV2NotNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotNull(FieldInsightsV2))
}

// CodeAnalysisIsNil applies the IsNil predicate on the "code_analysis" field.
func CodeAnalysisIsNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIsNull(FieldCodeAnalysis))
}

// CodeAnalysisNotNil applies the NotNil predicate on the "code_analysis" field.
func CodeAnalysisNotNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotNull(FieldCodeAnalysis))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportPackage {
	return predicate.ReportPackage(sql.FieldNotNull(FieldUpdatedAt))
}

// HasManifests applies the HasEdge predicate on the "manifests" edge.
func HasManifests() predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ManifestsTable, ManifestsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManifestsWith applies the HasEdge predicate on the "manifests" edge with a given conditions (other predicates).
func HasManifestsWith(preds ...predicate.ReportPackageManifest) predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := newManifestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVulnerabilities applies the HasEdge predicate on the "vulnerabilities" edge.
func HasVulnerabilities() predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VulnerabilitiesTable, VulnerabilitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVulnerabilitiesWith applies the HasEdge predicate on the "vulnerabilities" edge with a given conditions (other predicates).
func HasVulnerabilitiesWith(preds ...predicate.ReportVulnerability) predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := newVulnerabilitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicenses applies the HasEdge predicate on the "licenses" edge.
func HasLicenses() predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LicensesTable, LicensesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicensesWith applies the HasEdge predicate on the "licenses" edge with a given conditions (other predicates).
func HasLicensesWith(preds ...predicate.ReportLicense) predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := newLicensesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencies applies the HasEdge predicate on the "dependencies" edge.
func HasDependencies() predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DependenciesTable, DependenciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependenciesWith applies the HasEdge predicate on the "dependencies" edge with a given conditions (other predicates).
func HasDependenciesWith(preds ...predicate.ReportDependency) predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := newDependenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMalwareAnalysis applies the HasEdge predicate on the "malware_analysis" edge.
func HasMalwareAnalysis() predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MalwareAnalysisTable, MalwareAnalysisColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMalwareAnalysisWith applies the HasEdge predicate on the "malware_analysis" edge with a given conditions (other predicates).
func HasMalwareAnalysisWith(preds ...predicate.ReportMalware) predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := newMalwareAnalysisStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.ReportProject) predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := newProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSlsaProvenances applies the HasEdge predicate on the "slsa_provenances" edge.
func HasSlsaProvenances() predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SlsaProvenancesTable, SlsaProvenancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSlsaProvenancesWith applies the HasEdge predicate on the "slsa_provenances" edge with a given conditions (other predicates).
func HasSlsaProvenancesWith(preds ...predicate.ReportSlsaProvenance) predicate.ReportPackage {
	return predicate.ReportPackage(func(s *sql.Selector) {
		step := newSlsaProvenancesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportPackage) predicate.ReportPackage {
	return predicate.ReportPackage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportPackage) predicate.ReportPackage {
	return predicate.ReportPackage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportPackage) predicate.ReportPackage {
	return predicate.ReportPackage(sql.NotPredicates(p))
}
