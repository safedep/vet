// Code generated by ent, DO NOT EDIT.

package reportslsaprovenance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLTE(FieldID, id))
}

// SourceRepository applies equality check predicate on the "source_repository" field. It's identical to SourceRepositoryEQ.
func SourceRepository(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldSourceRepository, v))
}

// CommitSha applies equality check predicate on the "commit_sha" field. It's identical to CommitShaEQ.
func CommitSha(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldCommitSha, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldURL, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldVerified, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldUpdatedAt, v))
}

// SourceRepositoryEQ applies the EQ predicate on the "source_repository" field.
func SourceRepositoryEQ(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldSourceRepository, v))
}

// SourceRepositoryNEQ applies the NEQ predicate on the "source_repository" field.
func SourceRepositoryNEQ(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNEQ(FieldSourceRepository, v))
}

// SourceRepositoryIn applies the In predicate on the "source_repository" field.
func SourceRepositoryIn(vs ...string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIn(FieldSourceRepository, vs...))
}

// SourceRepositoryNotIn applies the NotIn predicate on the "source_repository" field.
func SourceRepositoryNotIn(vs ...string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotIn(FieldSourceRepository, vs...))
}

// SourceRepositoryGT applies the GT predicate on the "source_repository" field.
func SourceRepositoryGT(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGT(FieldSourceRepository, v))
}

// SourceRepositoryGTE applies the GTE predicate on the "source_repository" field.
func SourceRepositoryGTE(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGTE(FieldSourceRepository, v))
}

// SourceRepositoryLT applies the LT predicate on the "source_repository" field.
func SourceRepositoryLT(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLT(FieldSourceRepository, v))
}

// SourceRepositoryLTE applies the LTE predicate on the "source_repository" field.
func SourceRepositoryLTE(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLTE(FieldSourceRepository, v))
}

// SourceRepositoryContains applies the Contains predicate on the "source_repository" field.
func SourceRepositoryContains(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldContains(FieldSourceRepository, v))
}

// SourceRepositoryHasPrefix applies the HasPrefix predicate on the "source_repository" field.
func SourceRepositoryHasPrefix(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldHasPrefix(FieldSourceRepository, v))
}

// SourceRepositoryHasSuffix applies the HasSuffix predicate on the "source_repository" field.
func SourceRepositoryHasSuffix(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldHasSuffix(FieldSourceRepository, v))
}

// SourceRepositoryEqualFold applies the EqualFold predicate on the "source_repository" field.
func SourceRepositoryEqualFold(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEqualFold(FieldSourceRepository, v))
}

// SourceRepositoryContainsFold applies the ContainsFold predicate on the "source_repository" field.
func SourceRepositoryContainsFold(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldContainsFold(FieldSourceRepository, v))
}

// CommitShaEQ applies the EQ predicate on the "commit_sha" field.
func CommitShaEQ(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldCommitSha, v))
}

// CommitShaNEQ applies the NEQ predicate on the "commit_sha" field.
func CommitShaNEQ(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNEQ(FieldCommitSha, v))
}

// CommitShaIn applies the In predicate on the "commit_sha" field.
func CommitShaIn(vs ...string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIn(FieldCommitSha, vs...))
}

// CommitShaNotIn applies the NotIn predicate on the "commit_sha" field.
func CommitShaNotIn(vs ...string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotIn(FieldCommitSha, vs...))
}

// CommitShaGT applies the GT predicate on the "commit_sha" field.
func CommitShaGT(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGT(FieldCommitSha, v))
}

// CommitShaGTE applies the GTE predicate on the "commit_sha" field.
func CommitShaGTE(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGTE(FieldCommitSha, v))
}

// CommitShaLT applies the LT predicate on the "commit_sha" field.
func CommitShaLT(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLT(FieldCommitSha, v))
}

// CommitShaLTE applies the LTE predicate on the "commit_sha" field.
func CommitShaLTE(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLTE(FieldCommitSha, v))
}

// CommitShaContains applies the Contains predicate on the "commit_sha" field.
func CommitShaContains(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldContains(FieldCommitSha, v))
}

// CommitShaHasPrefix applies the HasPrefix predicate on the "commit_sha" field.
func CommitShaHasPrefix(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldHasPrefix(FieldCommitSha, v))
}

// CommitShaHasSuffix applies the HasSuffix predicate on the "commit_sha" field.
func CommitShaHasSuffix(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldHasSuffix(FieldCommitSha, v))
}

// CommitShaEqualFold applies the EqualFold predicate on the "commit_sha" field.
func CommitShaEqualFold(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEqualFold(FieldCommitSha, v))
}

// CommitShaContainsFold applies the ContainsFold predicate on the "commit_sha" field.
func CommitShaContainsFold(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldContainsFold(FieldCommitSha, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldContainsFold(FieldURL, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNEQ(FieldVerified, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.FieldNotNull(FieldUpdatedAt))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.ReportPackage) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportSlsaProvenance) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportSlsaProvenance) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportSlsaProvenance) predicate.ReportSlsaProvenance {
	return predicate.ReportSlsaProvenance(sql.NotPredicates(p))
}
