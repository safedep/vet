// Code generated by ent, DO NOT EDIT.

package reportslsaprovenance

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportslsaprovenance type in the database.
	Label = "report_slsa_provenance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceRepository holds the string denoting the source_repository field in the database.
	FieldSourceRepository = "source_repository"
	// FieldCommitSha holds the string denoting the commit_sha field in the database.
	FieldCommitSha = "commit_sha"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldVerified holds the string denoting the verified field in the database.
	FieldVerified = "verified"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// Table holds the table name of the reportslsaprovenance in the database.
	Table = "report_slsa_provenances"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "report_slsa_provenances"
	// PackageInverseTable is the table name for the ReportPackage entity.
	// It exists in this package in order to avoid circular dependency with the "reportpackage" package.
	PackageInverseTable = "report_packages"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "report_package_slsa_provenances"
)

// Columns holds all SQL columns for reportslsaprovenance fields.
var Columns = []string{
	FieldID,
	FieldSourceRepository,
	FieldCommitSha,
	FieldURL,
	FieldVerified,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "report_slsa_provenances"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"report_package_slsa_provenances",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVerified holds the default value on creation for the "verified" field.
	DefaultVerified bool
)

// OrderOption defines the ordering options for the ReportSlsaProvenance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceRepository orders the results by the source_repository field.
func BySourceRepository(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceRepository, opts...).ToFunc()
}

// ByCommitSha orders the results by the commit_sha field.
func ByCommitSha(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitSha, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByVerified orders the results by the verified field.
func ByVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerified, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PackageTable, PackageColumn),
	)
}
