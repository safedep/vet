// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/reportpackage"
	"github.com/safedep/vet/ent/reportpackagemanifest"
)

// ReportPackageManifestCreate is the builder for creating a ReportPackageManifest entity.
type ReportPackageManifestCreate struct {
	config
	mutation *ReportPackageManifestMutation
	hooks    []Hook
}

// SetManifestID sets the "manifest_id" field.
func (rpmc *ReportPackageManifestCreate) SetManifestID(s string) *ReportPackageManifestCreate {
	rpmc.mutation.SetManifestID(s)
	return rpmc
}

// SetSourceType sets the "source_type" field.
func (rpmc *ReportPackageManifestCreate) SetSourceType(s string) *ReportPackageManifestCreate {
	rpmc.mutation.SetSourceType(s)
	return rpmc
}

// SetNamespace sets the "namespace" field.
func (rpmc *ReportPackageManifestCreate) SetNamespace(s string) *ReportPackageManifestCreate {
	rpmc.mutation.SetNamespace(s)
	return rpmc
}

// SetPath sets the "path" field.
func (rpmc *ReportPackageManifestCreate) SetPath(s string) *ReportPackageManifestCreate {
	rpmc.mutation.SetPath(s)
	return rpmc
}

// SetDisplayPath sets the "display_path" field.
func (rpmc *ReportPackageManifestCreate) SetDisplayPath(s string) *ReportPackageManifestCreate {
	rpmc.mutation.SetDisplayPath(s)
	return rpmc
}

// SetEcosystem sets the "ecosystem" field.
func (rpmc *ReportPackageManifestCreate) SetEcosystem(s string) *ReportPackageManifestCreate {
	rpmc.mutation.SetEcosystem(s)
	return rpmc
}

// SetCreatedAt sets the "created_at" field.
func (rpmc *ReportPackageManifestCreate) SetCreatedAt(t time.Time) *ReportPackageManifestCreate {
	rpmc.mutation.SetCreatedAt(t)
	return rpmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpmc *ReportPackageManifestCreate) SetNillableCreatedAt(t *time.Time) *ReportPackageManifestCreate {
	if t != nil {
		rpmc.SetCreatedAt(*t)
	}
	return rpmc
}

// SetUpdatedAt sets the "updated_at" field.
func (rpmc *ReportPackageManifestCreate) SetUpdatedAt(t time.Time) *ReportPackageManifestCreate {
	rpmc.mutation.SetUpdatedAt(t)
	return rpmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpmc *ReportPackageManifestCreate) SetNillableUpdatedAt(t *time.Time) *ReportPackageManifestCreate {
	if t != nil {
		rpmc.SetUpdatedAt(*t)
	}
	return rpmc
}

// AddPackageIDs adds the "packages" edge to the ReportPackage entity by IDs.
func (rpmc *ReportPackageManifestCreate) AddPackageIDs(ids ...int) *ReportPackageManifestCreate {
	rpmc.mutation.AddPackageIDs(ids...)
	return rpmc
}

// AddPackages adds the "packages" edges to the ReportPackage entity.
func (rpmc *ReportPackageManifestCreate) AddPackages(r ...*ReportPackage) *ReportPackageManifestCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpmc.AddPackageIDs(ids...)
}

// Mutation returns the ReportPackageManifestMutation object of the builder.
func (rpmc *ReportPackageManifestCreate) Mutation() *ReportPackageManifestMutation {
	return rpmc.mutation
}

// Save creates the ReportPackageManifest in the database.
func (rpmc *ReportPackageManifestCreate) Save(ctx context.Context) (*ReportPackageManifest, error) {
	return withHooks(ctx, rpmc.sqlSave, rpmc.mutation, rpmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpmc *ReportPackageManifestCreate) SaveX(ctx context.Context) *ReportPackageManifest {
	v, err := rpmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpmc *ReportPackageManifestCreate) Exec(ctx context.Context) error {
	_, err := rpmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpmc *ReportPackageManifestCreate) ExecX(ctx context.Context) {
	if err := rpmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpmc *ReportPackageManifestCreate) check() error {
	if _, ok := rpmc.mutation.ManifestID(); !ok {
		return &ValidationError{Name: "manifest_id", err: errors.New(`ent: missing required field "ReportPackageManifest.manifest_id"`)}
	}
	if v, ok := rpmc.mutation.ManifestID(); ok {
		if err := reportpackagemanifest.ManifestIDValidator(v); err != nil {
			return &ValidationError{Name: "manifest_id", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.manifest_id": %w`, err)}
		}
	}
	if _, ok := rpmc.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "ReportPackageManifest.source_type"`)}
	}
	if v, ok := rpmc.mutation.SourceType(); ok {
		if err := reportpackagemanifest.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.source_type": %w`, err)}
		}
	}
	if _, ok := rpmc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "ReportPackageManifest.namespace"`)}
	}
	if v, ok := rpmc.mutation.Namespace(); ok {
		if err := reportpackagemanifest.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.namespace": %w`, err)}
		}
	}
	if _, ok := rpmc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "ReportPackageManifest.path"`)}
	}
	if v, ok := rpmc.mutation.Path(); ok {
		if err := reportpackagemanifest.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.path": %w`, err)}
		}
	}
	if _, ok := rpmc.mutation.DisplayPath(); !ok {
		return &ValidationError{Name: "display_path", err: errors.New(`ent: missing required field "ReportPackageManifest.display_path"`)}
	}
	if v, ok := rpmc.mutation.DisplayPath(); ok {
		if err := reportpackagemanifest.DisplayPathValidator(v); err != nil {
			return &ValidationError{Name: "display_path", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.display_path": %w`, err)}
		}
	}
	if _, ok := rpmc.mutation.Ecosystem(); !ok {
		return &ValidationError{Name: "ecosystem", err: errors.New(`ent: missing required field "ReportPackageManifest.ecosystem"`)}
	}
	if v, ok := rpmc.mutation.Ecosystem(); ok {
		if err := reportpackagemanifest.EcosystemValidator(v); err != nil {
			return &ValidationError{Name: "ecosystem", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.ecosystem": %w`, err)}
		}
	}
	return nil
}

func (rpmc *ReportPackageManifestCreate) sqlSave(ctx context.Context) (*ReportPackageManifest, error) {
	if err := rpmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rpmc.mutation.id = &_node.ID
	rpmc.mutation.done = true
	return _node, nil
}

func (rpmc *ReportPackageManifestCreate) createSpec() (*ReportPackageManifest, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportPackageManifest{config: rpmc.config}
		_spec = sqlgraph.NewCreateSpec(reportpackagemanifest.Table, sqlgraph.NewFieldSpec(reportpackagemanifest.FieldID, field.TypeInt))
	)
	if value, ok := rpmc.mutation.ManifestID(); ok {
		_spec.SetField(reportpackagemanifest.FieldManifestID, field.TypeString, value)
		_node.ManifestID = value
	}
	if value, ok := rpmc.mutation.SourceType(); ok {
		_spec.SetField(reportpackagemanifest.FieldSourceType, field.TypeString, value)
		_node.SourceType = value
	}
	if value, ok := rpmc.mutation.Namespace(); ok {
		_spec.SetField(reportpackagemanifest.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := rpmc.mutation.Path(); ok {
		_spec.SetField(reportpackagemanifest.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := rpmc.mutation.DisplayPath(); ok {
		_spec.SetField(reportpackagemanifest.FieldDisplayPath, field.TypeString, value)
		_node.DisplayPath = value
	}
	if value, ok := rpmc.mutation.Ecosystem(); ok {
		_spec.SetField(reportpackagemanifest.FieldEcosystem, field.TypeString, value)
		_node.Ecosystem = value
	}
	if value, ok := rpmc.mutation.CreatedAt(); ok {
		_spec.SetField(reportpackagemanifest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rpmc.mutation.UpdatedAt(); ok {
		_spec.SetField(reportpackagemanifest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rpmc.mutation.PackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reportpackagemanifest.PackagesTable,
			Columns: reportpackagemanifest.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReportPackageManifestCreateBulk is the builder for creating many ReportPackageManifest entities in bulk.
type ReportPackageManifestCreateBulk struct {
	config
	err      error
	builders []*ReportPackageManifestCreate
}

// Save creates the ReportPackageManifest entities in the database.
func (rpmcb *ReportPackageManifestCreateBulk) Save(ctx context.Context) ([]*ReportPackageManifest, error) {
	if rpmcb.err != nil {
		return nil, rpmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpmcb.builders))
	nodes := make([]*ReportPackageManifest, len(rpmcb.builders))
	mutators := make([]Mutator, len(rpmcb.builders))
	for i := range rpmcb.builders {
		func(i int, root context.Context) {
			builder := rpmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportPackageManifestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpmcb *ReportPackageManifestCreateBulk) SaveX(ctx context.Context) []*ReportPackageManifest {
	v, err := rpmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpmcb *ReportPackageManifestCreateBulk) Exec(ctx context.Context) error {
	_, err := rpmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpmcb *ReportPackageManifestCreateBulk) ExecX(ctx context.Context) {
	if err := rpmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
