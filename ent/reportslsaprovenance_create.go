// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/reportpackage"
	"github.com/safedep/vet/ent/reportslsaprovenance"
)

// ReportSlsaProvenanceCreate is the builder for creating a ReportSlsaProvenance entity.
type ReportSlsaProvenanceCreate struct {
	config
	mutation *ReportSlsaProvenanceMutation
	hooks    []Hook
}

// SetSourceRepository sets the "source_repository" field.
func (rspc *ReportSlsaProvenanceCreate) SetSourceRepository(s string) *ReportSlsaProvenanceCreate {
	rspc.mutation.SetSourceRepository(s)
	return rspc
}

// SetCommitSha sets the "commit_sha" field.
func (rspc *ReportSlsaProvenanceCreate) SetCommitSha(s string) *ReportSlsaProvenanceCreate {
	rspc.mutation.SetCommitSha(s)
	return rspc
}

// SetURL sets the "url" field.
func (rspc *ReportSlsaProvenanceCreate) SetURL(s string) *ReportSlsaProvenanceCreate {
	rspc.mutation.SetURL(s)
	return rspc
}

// SetVerified sets the "verified" field.
func (rspc *ReportSlsaProvenanceCreate) SetVerified(b bool) *ReportSlsaProvenanceCreate {
	rspc.mutation.SetVerified(b)
	return rspc
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (rspc *ReportSlsaProvenanceCreate) SetNillableVerified(b *bool) *ReportSlsaProvenanceCreate {
	if b != nil {
		rspc.SetVerified(*b)
	}
	return rspc
}

// SetCreatedAt sets the "created_at" field.
func (rspc *ReportSlsaProvenanceCreate) SetCreatedAt(t time.Time) *ReportSlsaProvenanceCreate {
	rspc.mutation.SetCreatedAt(t)
	return rspc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rspc *ReportSlsaProvenanceCreate) SetNillableCreatedAt(t *time.Time) *ReportSlsaProvenanceCreate {
	if t != nil {
		rspc.SetCreatedAt(*t)
	}
	return rspc
}

// SetUpdatedAt sets the "updated_at" field.
func (rspc *ReportSlsaProvenanceCreate) SetUpdatedAt(t time.Time) *ReportSlsaProvenanceCreate {
	rspc.mutation.SetUpdatedAt(t)
	return rspc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rspc *ReportSlsaProvenanceCreate) SetNillableUpdatedAt(t *time.Time) *ReportSlsaProvenanceCreate {
	if t != nil {
		rspc.SetUpdatedAt(*t)
	}
	return rspc
}

// SetPackageID sets the "package" edge to the ReportPackage entity by ID.
func (rspc *ReportSlsaProvenanceCreate) SetPackageID(id int) *ReportSlsaProvenanceCreate {
	rspc.mutation.SetPackageID(id)
	return rspc
}

// SetNillablePackageID sets the "package" edge to the ReportPackage entity by ID if the given value is not nil.
func (rspc *ReportSlsaProvenanceCreate) SetNillablePackageID(id *int) *ReportSlsaProvenanceCreate {
	if id != nil {
		rspc = rspc.SetPackageID(*id)
	}
	return rspc
}

// SetPackage sets the "package" edge to the ReportPackage entity.
func (rspc *ReportSlsaProvenanceCreate) SetPackage(r *ReportPackage) *ReportSlsaProvenanceCreate {
	return rspc.SetPackageID(r.ID)
}

// Mutation returns the ReportSlsaProvenanceMutation object of the builder.
func (rspc *ReportSlsaProvenanceCreate) Mutation() *ReportSlsaProvenanceMutation {
	return rspc.mutation
}

// Save creates the ReportSlsaProvenance in the database.
func (rspc *ReportSlsaProvenanceCreate) Save(ctx context.Context) (*ReportSlsaProvenance, error) {
	rspc.defaults()
	return withHooks(ctx, rspc.sqlSave, rspc.mutation, rspc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rspc *ReportSlsaProvenanceCreate) SaveX(ctx context.Context) *ReportSlsaProvenance {
	v, err := rspc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rspc *ReportSlsaProvenanceCreate) Exec(ctx context.Context) error {
	_, err := rspc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rspc *ReportSlsaProvenanceCreate) ExecX(ctx context.Context) {
	if err := rspc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rspc *ReportSlsaProvenanceCreate) defaults() {
	if _, ok := rspc.mutation.Verified(); !ok {
		v := reportslsaprovenance.DefaultVerified
		rspc.mutation.SetVerified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rspc *ReportSlsaProvenanceCreate) check() error {
	if _, ok := rspc.mutation.SourceRepository(); !ok {
		return &ValidationError{Name: "source_repository", err: errors.New(`ent: missing required field "ReportSlsaProvenance.source_repository"`)}
	}
	if _, ok := rspc.mutation.CommitSha(); !ok {
		return &ValidationError{Name: "commit_sha", err: errors.New(`ent: missing required field "ReportSlsaProvenance.commit_sha"`)}
	}
	if _, ok := rspc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "ReportSlsaProvenance.url"`)}
	}
	if _, ok := rspc.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`ent: missing required field "ReportSlsaProvenance.verified"`)}
	}
	return nil
}

func (rspc *ReportSlsaProvenanceCreate) sqlSave(ctx context.Context) (*ReportSlsaProvenance, error) {
	if err := rspc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rspc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rspc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rspc.mutation.id = &_node.ID
	rspc.mutation.done = true
	return _node, nil
}

func (rspc *ReportSlsaProvenanceCreate) createSpec() (*ReportSlsaProvenance, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportSlsaProvenance{config: rspc.config}
		_spec = sqlgraph.NewCreateSpec(reportslsaprovenance.Table, sqlgraph.NewFieldSpec(reportslsaprovenance.FieldID, field.TypeInt))
	)
	if value, ok := rspc.mutation.SourceRepository(); ok {
		_spec.SetField(reportslsaprovenance.FieldSourceRepository, field.TypeString, value)
		_node.SourceRepository = value
	}
	if value, ok := rspc.mutation.CommitSha(); ok {
		_spec.SetField(reportslsaprovenance.FieldCommitSha, field.TypeString, value)
		_node.CommitSha = value
	}
	if value, ok := rspc.mutation.URL(); ok {
		_spec.SetField(reportslsaprovenance.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := rspc.mutation.Verified(); ok {
		_spec.SetField(reportslsaprovenance.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := rspc.mutation.CreatedAt(); ok {
		_spec.SetField(reportslsaprovenance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rspc.mutation.UpdatedAt(); ok {
		_spec.SetField(reportslsaprovenance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rspc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportslsaprovenance.PackageTable,
			Columns: []string{reportslsaprovenance.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.report_package_slsa_provenances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReportSlsaProvenanceCreateBulk is the builder for creating many ReportSlsaProvenance entities in bulk.
type ReportSlsaProvenanceCreateBulk struct {
	config
	err      error
	builders []*ReportSlsaProvenanceCreate
}

// Save creates the ReportSlsaProvenance entities in the database.
func (rspcb *ReportSlsaProvenanceCreateBulk) Save(ctx context.Context) ([]*ReportSlsaProvenance, error) {
	if rspcb.err != nil {
		return nil, rspcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rspcb.builders))
	nodes := make([]*ReportSlsaProvenance, len(rspcb.builders))
	mutators := make([]Mutator, len(rspcb.builders))
	for i := range rspcb.builders {
		func(i int, root context.Context) {
			builder := rspcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportSlsaProvenanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rspcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rspcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rspcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rspcb *ReportSlsaProvenanceCreateBulk) SaveX(ctx context.Context) []*ReportSlsaProvenance {
	v, err := rspcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rspcb *ReportSlsaProvenanceCreateBulk) Exec(ctx context.Context) error {
	_, err := rspcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rspcb *ReportSlsaProvenanceCreateBulk) ExecX(ctx context.Context) {
	if err := rspcb.Exec(ctx); err != nil {
		panic(err)
	}
}
