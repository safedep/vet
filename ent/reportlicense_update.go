// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/predicate"
	"github.com/safedep/vet/ent/reportlicense"
	"github.com/safedep/vet/ent/reportpackage"
)

// ReportLicenseUpdate is the builder for updating ReportLicense entities.
type ReportLicenseUpdate struct {
	config
	hooks    []Hook
	mutation *ReportLicenseMutation
}

// Where appends a list predicates to the ReportLicenseUpdate builder.
func (rlu *ReportLicenseUpdate) Where(ps ...predicate.ReportLicense) *ReportLicenseUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetLicenseID sets the "license_id" field.
func (rlu *ReportLicenseUpdate) SetLicenseID(s string) *ReportLicenseUpdate {
	rlu.mutation.SetLicenseID(s)
	return rlu
}

// SetNillableLicenseID sets the "license_id" field if the given value is not nil.
func (rlu *ReportLicenseUpdate) SetNillableLicenseID(s *string) *ReportLicenseUpdate {
	if s != nil {
		rlu.SetLicenseID(*s)
	}
	return rlu
}

// SetName sets the "name" field.
func (rlu *ReportLicenseUpdate) SetName(s string) *ReportLicenseUpdate {
	rlu.mutation.SetName(s)
	return rlu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rlu *ReportLicenseUpdate) SetNillableName(s *string) *ReportLicenseUpdate {
	if s != nil {
		rlu.SetName(*s)
	}
	return rlu
}

// ClearName clears the value of the "name" field.
func (rlu *ReportLicenseUpdate) ClearName() *ReportLicenseUpdate {
	rlu.mutation.ClearName()
	return rlu
}

// SetSpdxID sets the "spdx_id" field.
func (rlu *ReportLicenseUpdate) SetSpdxID(s string) *ReportLicenseUpdate {
	rlu.mutation.SetSpdxID(s)
	return rlu
}

// SetNillableSpdxID sets the "spdx_id" field if the given value is not nil.
func (rlu *ReportLicenseUpdate) SetNillableSpdxID(s *string) *ReportLicenseUpdate {
	if s != nil {
		rlu.SetSpdxID(*s)
	}
	return rlu
}

// ClearSpdxID clears the value of the "spdx_id" field.
func (rlu *ReportLicenseUpdate) ClearSpdxID() *ReportLicenseUpdate {
	rlu.mutation.ClearSpdxID()
	return rlu
}

// SetURL sets the "url" field.
func (rlu *ReportLicenseUpdate) SetURL(s string) *ReportLicenseUpdate {
	rlu.mutation.SetURL(s)
	return rlu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (rlu *ReportLicenseUpdate) SetNillableURL(s *string) *ReportLicenseUpdate {
	if s != nil {
		rlu.SetURL(*s)
	}
	return rlu
}

// ClearURL clears the value of the "url" field.
func (rlu *ReportLicenseUpdate) ClearURL() *ReportLicenseUpdate {
	rlu.mutation.ClearURL()
	return rlu
}

// SetCreatedAt sets the "created_at" field.
func (rlu *ReportLicenseUpdate) SetCreatedAt(t time.Time) *ReportLicenseUpdate {
	rlu.mutation.SetCreatedAt(t)
	return rlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rlu *ReportLicenseUpdate) SetNillableCreatedAt(t *time.Time) *ReportLicenseUpdate {
	if t != nil {
		rlu.SetCreatedAt(*t)
	}
	return rlu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rlu *ReportLicenseUpdate) ClearCreatedAt() *ReportLicenseUpdate {
	rlu.mutation.ClearCreatedAt()
	return rlu
}

// SetUpdatedAt sets the "updated_at" field.
func (rlu *ReportLicenseUpdate) SetUpdatedAt(t time.Time) *ReportLicenseUpdate {
	rlu.mutation.SetUpdatedAt(t)
	return rlu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rlu *ReportLicenseUpdate) SetNillableUpdatedAt(t *time.Time) *ReportLicenseUpdate {
	if t != nil {
		rlu.SetUpdatedAt(*t)
	}
	return rlu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rlu *ReportLicenseUpdate) ClearUpdatedAt() *ReportLicenseUpdate {
	rlu.mutation.ClearUpdatedAt()
	return rlu
}

// SetPackageID sets the "package" edge to the ReportPackage entity by ID.
func (rlu *ReportLicenseUpdate) SetPackageID(id int) *ReportLicenseUpdate {
	rlu.mutation.SetPackageID(id)
	return rlu
}

// SetNillablePackageID sets the "package" edge to the ReportPackage entity by ID if the given value is not nil.
func (rlu *ReportLicenseUpdate) SetNillablePackageID(id *int) *ReportLicenseUpdate {
	if id != nil {
		rlu = rlu.SetPackageID(*id)
	}
	return rlu
}

// SetPackage sets the "package" edge to the ReportPackage entity.
func (rlu *ReportLicenseUpdate) SetPackage(r *ReportPackage) *ReportLicenseUpdate {
	return rlu.SetPackageID(r.ID)
}

// Mutation returns the ReportLicenseMutation object of the builder.
func (rlu *ReportLicenseUpdate) Mutation() *ReportLicenseMutation {
	return rlu.mutation
}

// ClearPackage clears the "package" edge to the ReportPackage entity.
func (rlu *ReportLicenseUpdate) ClearPackage() *ReportLicenseUpdate {
	rlu.mutation.ClearPackage()
	return rlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *ReportLicenseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rlu.sqlSave, rlu.mutation, rlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *ReportLicenseUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *ReportLicenseUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *ReportLicenseUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlu *ReportLicenseUpdate) check() error {
	if v, ok := rlu.mutation.LicenseID(); ok {
		if err := reportlicense.LicenseIDValidator(v); err != nil {
			return &ValidationError{Name: "license_id", err: fmt.Errorf(`ent: validator failed for field "ReportLicense.license_id": %w`, err)}
		}
	}
	return nil
}

func (rlu *ReportLicenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportlicense.Table, reportlicense.Columns, sqlgraph.NewFieldSpec(reportlicense.FieldID, field.TypeInt))
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.LicenseID(); ok {
		_spec.SetField(reportlicense.FieldLicenseID, field.TypeString, value)
	}
	if value, ok := rlu.mutation.Name(); ok {
		_spec.SetField(reportlicense.FieldName, field.TypeString, value)
	}
	if rlu.mutation.NameCleared() {
		_spec.ClearField(reportlicense.FieldName, field.TypeString)
	}
	if value, ok := rlu.mutation.SpdxID(); ok {
		_spec.SetField(reportlicense.FieldSpdxID, field.TypeString, value)
	}
	if rlu.mutation.SpdxIDCleared() {
		_spec.ClearField(reportlicense.FieldSpdxID, field.TypeString)
	}
	if value, ok := rlu.mutation.URL(); ok {
		_spec.SetField(reportlicense.FieldURL, field.TypeString, value)
	}
	if rlu.mutation.URLCleared() {
		_spec.ClearField(reportlicense.FieldURL, field.TypeString)
	}
	if value, ok := rlu.mutation.CreatedAt(); ok {
		_spec.SetField(reportlicense.FieldCreatedAt, field.TypeTime, value)
	}
	if rlu.mutation.CreatedAtCleared() {
		_spec.ClearField(reportlicense.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rlu.mutation.UpdatedAt(); ok {
		_spec.SetField(reportlicense.FieldUpdatedAt, field.TypeTime, value)
	}
	if rlu.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportlicense.FieldUpdatedAt, field.TypeTime)
	}
	if rlu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportlicense.PackageTable,
			Columns: []string{reportlicense.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportlicense.PackageTable,
			Columns: []string{reportlicense.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportlicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rlu.mutation.done = true
	return n, nil
}

// ReportLicenseUpdateOne is the builder for updating a single ReportLicense entity.
type ReportLicenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportLicenseMutation
}

// SetLicenseID sets the "license_id" field.
func (rluo *ReportLicenseUpdateOne) SetLicenseID(s string) *ReportLicenseUpdateOne {
	rluo.mutation.SetLicenseID(s)
	return rluo
}

// SetNillableLicenseID sets the "license_id" field if the given value is not nil.
func (rluo *ReportLicenseUpdateOne) SetNillableLicenseID(s *string) *ReportLicenseUpdateOne {
	if s != nil {
		rluo.SetLicenseID(*s)
	}
	return rluo
}

// SetName sets the "name" field.
func (rluo *ReportLicenseUpdateOne) SetName(s string) *ReportLicenseUpdateOne {
	rluo.mutation.SetName(s)
	return rluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rluo *ReportLicenseUpdateOne) SetNillableName(s *string) *ReportLicenseUpdateOne {
	if s != nil {
		rluo.SetName(*s)
	}
	return rluo
}

// ClearName clears the value of the "name" field.
func (rluo *ReportLicenseUpdateOne) ClearName() *ReportLicenseUpdateOne {
	rluo.mutation.ClearName()
	return rluo
}

// SetSpdxID sets the "spdx_id" field.
func (rluo *ReportLicenseUpdateOne) SetSpdxID(s string) *ReportLicenseUpdateOne {
	rluo.mutation.SetSpdxID(s)
	return rluo
}

// SetNillableSpdxID sets the "spdx_id" field if the given value is not nil.
func (rluo *ReportLicenseUpdateOne) SetNillableSpdxID(s *string) *ReportLicenseUpdateOne {
	if s != nil {
		rluo.SetSpdxID(*s)
	}
	return rluo
}

// ClearSpdxID clears the value of the "spdx_id" field.
func (rluo *ReportLicenseUpdateOne) ClearSpdxID() *ReportLicenseUpdateOne {
	rluo.mutation.ClearSpdxID()
	return rluo
}

// SetURL sets the "url" field.
func (rluo *ReportLicenseUpdateOne) SetURL(s string) *ReportLicenseUpdateOne {
	rluo.mutation.SetURL(s)
	return rluo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (rluo *ReportLicenseUpdateOne) SetNillableURL(s *string) *ReportLicenseUpdateOne {
	if s != nil {
		rluo.SetURL(*s)
	}
	return rluo
}

// ClearURL clears the value of the "url" field.
func (rluo *ReportLicenseUpdateOne) ClearURL() *ReportLicenseUpdateOne {
	rluo.mutation.ClearURL()
	return rluo
}

// SetCreatedAt sets the "created_at" field.
func (rluo *ReportLicenseUpdateOne) SetCreatedAt(t time.Time) *ReportLicenseUpdateOne {
	rluo.mutation.SetCreatedAt(t)
	return rluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rluo *ReportLicenseUpdateOne) SetNillableCreatedAt(t *time.Time) *ReportLicenseUpdateOne {
	if t != nil {
		rluo.SetCreatedAt(*t)
	}
	return rluo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rluo *ReportLicenseUpdateOne) ClearCreatedAt() *ReportLicenseUpdateOne {
	rluo.mutation.ClearCreatedAt()
	return rluo
}

// SetUpdatedAt sets the "updated_at" field.
func (rluo *ReportLicenseUpdateOne) SetUpdatedAt(t time.Time) *ReportLicenseUpdateOne {
	rluo.mutation.SetUpdatedAt(t)
	return rluo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rluo *ReportLicenseUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReportLicenseUpdateOne {
	if t != nil {
		rluo.SetUpdatedAt(*t)
	}
	return rluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rluo *ReportLicenseUpdateOne) ClearUpdatedAt() *ReportLicenseUpdateOne {
	rluo.mutation.ClearUpdatedAt()
	return rluo
}

// SetPackageID sets the "package" edge to the ReportPackage entity by ID.
func (rluo *ReportLicenseUpdateOne) SetPackageID(id int) *ReportLicenseUpdateOne {
	rluo.mutation.SetPackageID(id)
	return rluo
}

// SetNillablePackageID sets the "package" edge to the ReportPackage entity by ID if the given value is not nil.
func (rluo *ReportLicenseUpdateOne) SetNillablePackageID(id *int) *ReportLicenseUpdateOne {
	if id != nil {
		rluo = rluo.SetPackageID(*id)
	}
	return rluo
}

// SetPackage sets the "package" edge to the ReportPackage entity.
func (rluo *ReportLicenseUpdateOne) SetPackage(r *ReportPackage) *ReportLicenseUpdateOne {
	return rluo.SetPackageID(r.ID)
}

// Mutation returns the ReportLicenseMutation object of the builder.
func (rluo *ReportLicenseUpdateOne) Mutation() *ReportLicenseMutation {
	return rluo.mutation
}

// ClearPackage clears the "package" edge to the ReportPackage entity.
func (rluo *ReportLicenseUpdateOne) ClearPackage() *ReportLicenseUpdateOne {
	rluo.mutation.ClearPackage()
	return rluo
}

// Where appends a list predicates to the ReportLicenseUpdate builder.
func (rluo *ReportLicenseUpdateOne) Where(ps ...predicate.ReportLicense) *ReportLicenseUpdateOne {
	rluo.mutation.Where(ps...)
	return rluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *ReportLicenseUpdateOne) Select(field string, fields ...string) *ReportLicenseUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated ReportLicense entity.
func (rluo *ReportLicenseUpdateOne) Save(ctx context.Context) (*ReportLicense, error) {
	return withHooks(ctx, rluo.sqlSave, rluo.mutation, rluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *ReportLicenseUpdateOne) SaveX(ctx context.Context) *ReportLicense {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *ReportLicenseUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *ReportLicenseUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rluo *ReportLicenseUpdateOne) check() error {
	if v, ok := rluo.mutation.LicenseID(); ok {
		if err := reportlicense.LicenseIDValidator(v); err != nil {
			return &ValidationError{Name: "license_id", err: fmt.Errorf(`ent: validator failed for field "ReportLicense.license_id": %w`, err)}
		}
	}
	return nil
}

func (rluo *ReportLicenseUpdateOne) sqlSave(ctx context.Context) (_node *ReportLicense, err error) {
	if err := rluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportlicense.Table, reportlicense.Columns, sqlgraph.NewFieldSpec(reportlicense.FieldID, field.TypeInt))
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportLicense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reportlicense.FieldID)
		for _, f := range fields {
			if !reportlicense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reportlicense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rluo.mutation.LicenseID(); ok {
		_spec.SetField(reportlicense.FieldLicenseID, field.TypeString, value)
	}
	if value, ok := rluo.mutation.Name(); ok {
		_spec.SetField(reportlicense.FieldName, field.TypeString, value)
	}
	if rluo.mutation.NameCleared() {
		_spec.ClearField(reportlicense.FieldName, field.TypeString)
	}
	if value, ok := rluo.mutation.SpdxID(); ok {
		_spec.SetField(reportlicense.FieldSpdxID, field.TypeString, value)
	}
	if rluo.mutation.SpdxIDCleared() {
		_spec.ClearField(reportlicense.FieldSpdxID, field.TypeString)
	}
	if value, ok := rluo.mutation.URL(); ok {
		_spec.SetField(reportlicense.FieldURL, field.TypeString, value)
	}
	if rluo.mutation.URLCleared() {
		_spec.ClearField(reportlicense.FieldURL, field.TypeString)
	}
	if value, ok := rluo.mutation.CreatedAt(); ok {
		_spec.SetField(reportlicense.FieldCreatedAt, field.TypeTime, value)
	}
	if rluo.mutation.CreatedAtCleared() {
		_spec.ClearField(reportlicense.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rluo.mutation.UpdatedAt(); ok {
		_spec.SetField(reportlicense.FieldUpdatedAt, field.TypeTime, value)
	}
	if rluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportlicense.FieldUpdatedAt, field.TypeTime)
	}
	if rluo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportlicense.PackageTable,
			Columns: []string{reportlicense.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportlicense.PackageTable,
			Columns: []string{reportlicense.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReportLicense{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportlicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rluo.mutation.done = true
	return _node, nil
}
