// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportproject"
)

// ReportProject is the model entity for the ReportProject schema.
type ReportProject struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Stars holds the value of the "stars" field.
	Stars int32 `json:"stars,omitempty"`
	// Forks holds the value of the "forks" field.
	Forks int32 `json:"forks,omitempty"`
	// Scorecard holds the value of the "scorecard" field.
	Scorecard map[string]interface{} `json:"scorecard,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportproject.FieldScorecard:
			values[i] = new([]byte)
		case reportproject.FieldID, reportproject.FieldStars, reportproject.FieldForks:
			values[i] = new(sql.NullInt64)
		case reportproject.FieldName, reportproject.FieldURL, reportproject.FieldDescription:
			values[i] = new(sql.NullString)
		case reportproject.FieldCreatedAt, reportproject.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportProject fields.
func (rp *ReportProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportproject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rp.ID = int(value.Int64)
		case reportproject.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rp.Name = value.String
			}
		case reportproject.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				rp.URL = value.String
			}
		case reportproject.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rp.Description = value.String
			}
		case reportproject.FieldStars:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stars", values[i])
			} else if value.Valid {
				rp.Stars = int32(value.Int64)
			}
		case reportproject.FieldForks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forks", values[i])
			} else if value.Valid {
				rp.Forks = int32(value.Int64)
			}
		case reportproject.FieldScorecard:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scorecard", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rp.Scorecard); err != nil {
					return fmt.Errorf("unmarshal field scorecard: %w", err)
				}
			}
		case reportproject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rp.CreatedAt = value.Time
			}
		case reportproject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rp.UpdatedAt = value.Time
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportProject.
// This includes values selected through modifiers, order, etc.
func (rp *ReportProject) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// Update returns a builder for updating this ReportProject.
// Note that you need to call ReportProject.Unwrap() before calling this method if this ReportProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *ReportProject) Update() *ReportProjectUpdateOne {
	return NewReportProjectClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the ReportProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *ReportProject) Unwrap() *ReportProject {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportProject is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *ReportProject) String() string {
	var builder strings.Builder
	builder.WriteString("ReportProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("name=")
	builder.WriteString(rp.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(rp.URL)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rp.Description)
	builder.WriteString(", ")
	builder.WriteString("stars=")
	builder.WriteString(fmt.Sprintf("%v", rp.Stars))
	builder.WriteString(", ")
	builder.WriteString("forks=")
	builder.WriteString(fmt.Sprintf("%v", rp.Forks))
	builder.WriteString(", ")
	builder.WriteString("scorecard=")
	builder.WriteString(fmt.Sprintf("%v", rp.Scorecard))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportProjects is a parsable slice of ReportProject.
type ReportProjects []*ReportProject
