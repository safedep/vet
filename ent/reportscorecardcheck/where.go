// Code generated by ent, DO NOT EDIT.

package reportscorecardcheck

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldName, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldScore, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldReason, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldContainsFold(FieldName, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float32) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLTE(FieldScore, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldContainsFold(FieldReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.FieldNotNull(FieldUpdatedAt))
}

// HasScorecard applies the HasEdge predicate on the "scorecard" edge.
func HasScorecard() predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScorecardTable, ScorecardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScorecardWith applies the HasEdge predicate on the "scorecard" edge with a given conditions (other predicates).
func HasScorecardWith(preds ...predicate.ReportScorecard) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(func(s *sql.Selector) {
		step := newScorecardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportScorecardCheck) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportScorecardCheck) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportScorecardCheck) predicate.ReportScorecardCheck {
	return predicate.ReportScorecardCheck(sql.NotPredicates(p))
}
