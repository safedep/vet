// Code generated by ent, DO NOT EDIT.

package reportscorecardcheck

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportscorecardcheck type in the database.
	Label = "report_scorecard_check"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeScorecard holds the string denoting the scorecard edge name in mutations.
	EdgeScorecard = "scorecard"
	// Table holds the table name of the reportscorecardcheck in the database.
	Table = "report_scorecard_checks"
	// ScorecardTable is the table that holds the scorecard relation/edge.
	ScorecardTable = "report_scorecard_checks"
	// ScorecardInverseTable is the table name for the ReportScorecard entity.
	// It exists in this package in order to avoid circular dependency with the "reportscorecard" package.
	ScorecardInverseTable = "report_scorecards"
	// ScorecardColumn is the table column denoting the scorecard relation/edge.
	ScorecardColumn = "report_scorecard_checks"
)

// Columns holds all SQL columns for reportscorecardcheck fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldScore,
	FieldReason,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "report_scorecard_checks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"report_scorecard_checks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ReportScorecardCheck queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByScorecardField orders the results by scorecard field.
func ByScorecardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScorecardStep(), sql.OrderByField(field, opts...))
	}
}
func newScorecardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScorecardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScorecardTable, ScorecardColumn),
	)
}
