// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportdependencygraph"
)

// ReportDependencyGraph is the model entity for the ReportDependencyGraph schema.
type ReportDependencyGraph struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Reference to ReportPackage.package_id
	FromPackageID string `json:"from_package_id,omitempty"`
	// FromPackageName holds the value of the "from_package_name" field.
	FromPackageName string `json:"from_package_name,omitempty"`
	// FromPackageVersion holds the value of the "from_package_version" field.
	FromPackageVersion string `json:"from_package_version,omitempty"`
	// FromPackageEcosystem holds the value of the "from_package_ecosystem" field.
	FromPackageEcosystem string `json:"from_package_ecosystem,omitempty"`
	// Reference to ReportPackage.package_id
	ToPackageID string `json:"to_package_id,omitempty"`
	// ToPackageName holds the value of the "to_package_name" field.
	ToPackageName string `json:"to_package_name,omitempty"`
	// ToPackageVersion holds the value of the "to_package_version" field.
	ToPackageVersion string `json:"to_package_version,omitempty"`
	// ToPackageEcosystem holds the value of the "to_package_ecosystem" field.
	ToPackageEcosystem string `json:"to_package_ecosystem,omitempty"`
	// e.g., runtime, dev, optional
	DependencyType string `json:"dependency_type,omitempty"`
	// e.g., ^1.2.3, >=2.0.0
	VersionConstraint string `json:"version_constraint,omitempty"`
	// Depth in dependency tree
	Depth int `json:"depth,omitempty"`
	// Direct dependency from manifest
	IsDirect bool `json:"is_direct,omitempty"`
	// Edge from root package
	IsRootEdge bool `json:"is_root_edge,omitempty"`
	// Manifest where this edge was discovered
	ManifestID string `json:"manifest_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportDependencyGraph) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportdependencygraph.FieldIsDirect, reportdependencygraph.FieldIsRootEdge:
			values[i] = new(sql.NullBool)
		case reportdependencygraph.FieldID, reportdependencygraph.FieldDepth:
			values[i] = new(sql.NullInt64)
		case reportdependencygraph.FieldFromPackageID, reportdependencygraph.FieldFromPackageName, reportdependencygraph.FieldFromPackageVersion, reportdependencygraph.FieldFromPackageEcosystem, reportdependencygraph.FieldToPackageID, reportdependencygraph.FieldToPackageName, reportdependencygraph.FieldToPackageVersion, reportdependencygraph.FieldToPackageEcosystem, reportdependencygraph.FieldDependencyType, reportdependencygraph.FieldVersionConstraint, reportdependencygraph.FieldManifestID:
			values[i] = new(sql.NullString)
		case reportdependencygraph.FieldCreatedAt, reportdependencygraph.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportDependencyGraph fields.
func (rdg *ReportDependencyGraph) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportdependencygraph.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rdg.ID = int(value.Int64)
		case reportdependencygraph.FieldFromPackageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_package_id", values[i])
			} else if value.Valid {
				rdg.FromPackageID = value.String
			}
		case reportdependencygraph.FieldFromPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_package_name", values[i])
			} else if value.Valid {
				rdg.FromPackageName = value.String
			}
		case reportdependencygraph.FieldFromPackageVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_package_version", values[i])
			} else if value.Valid {
				rdg.FromPackageVersion = value.String
			}
		case reportdependencygraph.FieldFromPackageEcosystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_package_ecosystem", values[i])
			} else if value.Valid {
				rdg.FromPackageEcosystem = value.String
			}
		case reportdependencygraph.FieldToPackageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_package_id", values[i])
			} else if value.Valid {
				rdg.ToPackageID = value.String
			}
		case reportdependencygraph.FieldToPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_package_name", values[i])
			} else if value.Valid {
				rdg.ToPackageName = value.String
			}
		case reportdependencygraph.FieldToPackageVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_package_version", values[i])
			} else if value.Valid {
				rdg.ToPackageVersion = value.String
			}
		case reportdependencygraph.FieldToPackageEcosystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_package_ecosystem", values[i])
			} else if value.Valid {
				rdg.ToPackageEcosystem = value.String
			}
		case reportdependencygraph.FieldDependencyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_type", values[i])
			} else if value.Valid {
				rdg.DependencyType = value.String
			}
		case reportdependencygraph.FieldVersionConstraint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_constraint", values[i])
			} else if value.Valid {
				rdg.VersionConstraint = value.String
			}
		case reportdependencygraph.FieldDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field depth", values[i])
			} else if value.Valid {
				rdg.Depth = int(value.Int64)
			}
		case reportdependencygraph.FieldIsDirect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_direct", values[i])
			} else if value.Valid {
				rdg.IsDirect = value.Bool
			}
		case reportdependencygraph.FieldIsRootEdge:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_root_edge", values[i])
			} else if value.Valid {
				rdg.IsRootEdge = value.Bool
			}
		case reportdependencygraph.FieldManifestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manifest_id", values[i])
			} else if value.Valid {
				rdg.ManifestID = value.String
			}
		case reportdependencygraph.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rdg.CreatedAt = value.Time
			}
		case reportdependencygraph.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rdg.UpdatedAt = value.Time
			}
		default:
			rdg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportDependencyGraph.
// This includes values selected through modifiers, order, etc.
func (rdg *ReportDependencyGraph) Value(name string) (ent.Value, error) {
	return rdg.selectValues.Get(name)
}

// Update returns a builder for updating this ReportDependencyGraph.
// Note that you need to call ReportDependencyGraph.Unwrap() before calling this method if this ReportDependencyGraph
// was returned from a transaction, and the transaction was committed or rolled back.
func (rdg *ReportDependencyGraph) Update() *ReportDependencyGraphUpdateOne {
	return NewReportDependencyGraphClient(rdg.config).UpdateOne(rdg)
}

// Unwrap unwraps the ReportDependencyGraph entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rdg *ReportDependencyGraph) Unwrap() *ReportDependencyGraph {
	_tx, ok := rdg.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportDependencyGraph is not a transactional entity")
	}
	rdg.config.driver = _tx.drv
	return rdg
}

// String implements the fmt.Stringer.
func (rdg *ReportDependencyGraph) String() string {
	var builder strings.Builder
	builder.WriteString("ReportDependencyGraph(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rdg.ID))
	builder.WriteString("from_package_id=")
	builder.WriteString(rdg.FromPackageID)
	builder.WriteString(", ")
	builder.WriteString("from_package_name=")
	builder.WriteString(rdg.FromPackageName)
	builder.WriteString(", ")
	builder.WriteString("from_package_version=")
	builder.WriteString(rdg.FromPackageVersion)
	builder.WriteString(", ")
	builder.WriteString("from_package_ecosystem=")
	builder.WriteString(rdg.FromPackageEcosystem)
	builder.WriteString(", ")
	builder.WriteString("to_package_id=")
	builder.WriteString(rdg.ToPackageID)
	builder.WriteString(", ")
	builder.WriteString("to_package_name=")
	builder.WriteString(rdg.ToPackageName)
	builder.WriteString(", ")
	builder.WriteString("to_package_version=")
	builder.WriteString(rdg.ToPackageVersion)
	builder.WriteString(", ")
	builder.WriteString("to_package_ecosystem=")
	builder.WriteString(rdg.ToPackageEcosystem)
	builder.WriteString(", ")
	builder.WriteString("dependency_type=")
	builder.WriteString(rdg.DependencyType)
	builder.WriteString(", ")
	builder.WriteString("version_constraint=")
	builder.WriteString(rdg.VersionConstraint)
	builder.WriteString(", ")
	builder.WriteString("depth=")
	builder.WriteString(fmt.Sprintf("%v", rdg.Depth))
	builder.WriteString(", ")
	builder.WriteString("is_direct=")
	builder.WriteString(fmt.Sprintf("%v", rdg.IsDirect))
	builder.WriteString(", ")
	builder.WriteString("is_root_edge=")
	builder.WriteString(fmt.Sprintf("%v", rdg.IsRootEdge))
	builder.WriteString(", ")
	builder.WriteString("manifest_id=")
	builder.WriteString(rdg.ManifestID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rdg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rdg.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportDependencyGraphs is a parsable slice of ReportDependencyGraph.
type ReportDependencyGraphs []*ReportDependencyGraph
