// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/predicate"
	"github.com/safedep/vet/ent/reportpackage"
	"github.com/safedep/vet/ent/reportpackagemanifest"
)

// ReportPackageManifestUpdate is the builder for updating ReportPackageManifest entities.
type ReportPackageManifestUpdate struct {
	config
	hooks    []Hook
	mutation *ReportPackageManifestMutation
}

// Where appends a list predicates to the ReportPackageManifestUpdate builder.
func (rpmu *ReportPackageManifestUpdate) Where(ps ...predicate.ReportPackageManifest) *ReportPackageManifestUpdate {
	rpmu.mutation.Where(ps...)
	return rpmu
}

// SetManifestID sets the "manifest_id" field.
func (rpmu *ReportPackageManifestUpdate) SetManifestID(s string) *ReportPackageManifestUpdate {
	rpmu.mutation.SetManifestID(s)
	return rpmu
}

// SetNillableManifestID sets the "manifest_id" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillableManifestID(s *string) *ReportPackageManifestUpdate {
	if s != nil {
		rpmu.SetManifestID(*s)
	}
	return rpmu
}

// SetSourceType sets the "source_type" field.
func (rpmu *ReportPackageManifestUpdate) SetSourceType(s string) *ReportPackageManifestUpdate {
	rpmu.mutation.SetSourceType(s)
	return rpmu
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillableSourceType(s *string) *ReportPackageManifestUpdate {
	if s != nil {
		rpmu.SetSourceType(*s)
	}
	return rpmu
}

// SetNamespace sets the "namespace" field.
func (rpmu *ReportPackageManifestUpdate) SetNamespace(s string) *ReportPackageManifestUpdate {
	rpmu.mutation.SetNamespace(s)
	return rpmu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillableNamespace(s *string) *ReportPackageManifestUpdate {
	if s != nil {
		rpmu.SetNamespace(*s)
	}
	return rpmu
}

// SetPath sets the "path" field.
func (rpmu *ReportPackageManifestUpdate) SetPath(s string) *ReportPackageManifestUpdate {
	rpmu.mutation.SetPath(s)
	return rpmu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillablePath(s *string) *ReportPackageManifestUpdate {
	if s != nil {
		rpmu.SetPath(*s)
	}
	return rpmu
}

// SetDisplayPath sets the "display_path" field.
func (rpmu *ReportPackageManifestUpdate) SetDisplayPath(s string) *ReportPackageManifestUpdate {
	rpmu.mutation.SetDisplayPath(s)
	return rpmu
}

// SetNillableDisplayPath sets the "display_path" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillableDisplayPath(s *string) *ReportPackageManifestUpdate {
	if s != nil {
		rpmu.SetDisplayPath(*s)
	}
	return rpmu
}

// SetEcosystem sets the "ecosystem" field.
func (rpmu *ReportPackageManifestUpdate) SetEcosystem(s string) *ReportPackageManifestUpdate {
	rpmu.mutation.SetEcosystem(s)
	return rpmu
}

// SetNillableEcosystem sets the "ecosystem" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillableEcosystem(s *string) *ReportPackageManifestUpdate {
	if s != nil {
		rpmu.SetEcosystem(*s)
	}
	return rpmu
}

// SetCreatedAt sets the "created_at" field.
func (rpmu *ReportPackageManifestUpdate) SetCreatedAt(t time.Time) *ReportPackageManifestUpdate {
	rpmu.mutation.SetCreatedAt(t)
	return rpmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillableCreatedAt(t *time.Time) *ReportPackageManifestUpdate {
	if t != nil {
		rpmu.SetCreatedAt(*t)
	}
	return rpmu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rpmu *ReportPackageManifestUpdate) ClearCreatedAt() *ReportPackageManifestUpdate {
	rpmu.mutation.ClearCreatedAt()
	return rpmu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpmu *ReportPackageManifestUpdate) SetUpdatedAt(t time.Time) *ReportPackageManifestUpdate {
	rpmu.mutation.SetUpdatedAt(t)
	return rpmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpmu *ReportPackageManifestUpdate) SetNillableUpdatedAt(t *time.Time) *ReportPackageManifestUpdate {
	if t != nil {
		rpmu.SetUpdatedAt(*t)
	}
	return rpmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rpmu *ReportPackageManifestUpdate) ClearUpdatedAt() *ReportPackageManifestUpdate {
	rpmu.mutation.ClearUpdatedAt()
	return rpmu
}

// AddPackageIDs adds the "packages" edge to the ReportPackage entity by IDs.
func (rpmu *ReportPackageManifestUpdate) AddPackageIDs(ids ...int) *ReportPackageManifestUpdate {
	rpmu.mutation.AddPackageIDs(ids...)
	return rpmu
}

// AddPackages adds the "packages" edges to the ReportPackage entity.
func (rpmu *ReportPackageManifestUpdate) AddPackages(r ...*ReportPackage) *ReportPackageManifestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpmu.AddPackageIDs(ids...)
}

// Mutation returns the ReportPackageManifestMutation object of the builder.
func (rpmu *ReportPackageManifestUpdate) Mutation() *ReportPackageManifestMutation {
	return rpmu.mutation
}

// ClearPackages clears all "packages" edges to the ReportPackage entity.
func (rpmu *ReportPackageManifestUpdate) ClearPackages() *ReportPackageManifestUpdate {
	rpmu.mutation.ClearPackages()
	return rpmu
}

// RemovePackageIDs removes the "packages" edge to ReportPackage entities by IDs.
func (rpmu *ReportPackageManifestUpdate) RemovePackageIDs(ids ...int) *ReportPackageManifestUpdate {
	rpmu.mutation.RemovePackageIDs(ids...)
	return rpmu
}

// RemovePackages removes "packages" edges to ReportPackage entities.
func (rpmu *ReportPackageManifestUpdate) RemovePackages(r ...*ReportPackage) *ReportPackageManifestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpmu.RemovePackageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpmu *ReportPackageManifestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpmu.sqlSave, rpmu.mutation, rpmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpmu *ReportPackageManifestUpdate) SaveX(ctx context.Context) int {
	affected, err := rpmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpmu *ReportPackageManifestUpdate) Exec(ctx context.Context) error {
	_, err := rpmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpmu *ReportPackageManifestUpdate) ExecX(ctx context.Context) {
	if err := rpmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpmu *ReportPackageManifestUpdate) check() error {
	if v, ok := rpmu.mutation.ManifestID(); ok {
		if err := reportpackagemanifest.ManifestIDValidator(v); err != nil {
			return &ValidationError{Name: "manifest_id", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.manifest_id": %w`, err)}
		}
	}
	if v, ok := rpmu.mutation.SourceType(); ok {
		if err := reportpackagemanifest.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.source_type": %w`, err)}
		}
	}
	if v, ok := rpmu.mutation.Namespace(); ok {
		if err := reportpackagemanifest.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.namespace": %w`, err)}
		}
	}
	if v, ok := rpmu.mutation.Path(); ok {
		if err := reportpackagemanifest.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.path": %w`, err)}
		}
	}
	if v, ok := rpmu.mutation.DisplayPath(); ok {
		if err := reportpackagemanifest.DisplayPathValidator(v); err != nil {
			return &ValidationError{Name: "display_path", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.display_path": %w`, err)}
		}
	}
	if v, ok := rpmu.mutation.Ecosystem(); ok {
		if err := reportpackagemanifest.EcosystemValidator(v); err != nil {
			return &ValidationError{Name: "ecosystem", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.ecosystem": %w`, err)}
		}
	}
	return nil
}

func (rpmu *ReportPackageManifestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportpackagemanifest.Table, reportpackagemanifest.Columns, sqlgraph.NewFieldSpec(reportpackagemanifest.FieldID, field.TypeInt))
	if ps := rpmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpmu.mutation.ManifestID(); ok {
		_spec.SetField(reportpackagemanifest.FieldManifestID, field.TypeString, value)
	}
	if value, ok := rpmu.mutation.SourceType(); ok {
		_spec.SetField(reportpackagemanifest.FieldSourceType, field.TypeString, value)
	}
	if value, ok := rpmu.mutation.Namespace(); ok {
		_spec.SetField(reportpackagemanifest.FieldNamespace, field.TypeString, value)
	}
	if value, ok := rpmu.mutation.Path(); ok {
		_spec.SetField(reportpackagemanifest.FieldPath, field.TypeString, value)
	}
	if value, ok := rpmu.mutation.DisplayPath(); ok {
		_spec.SetField(reportpackagemanifest.FieldDisplayPath, field.TypeString, value)
	}
	if value, ok := rpmu.mutation.Ecosystem(); ok {
		_spec.SetField(reportpackagemanifest.FieldEcosystem, field.TypeString, value)
	}
	if value, ok := rpmu.mutation.CreatedAt(); ok {
		_spec.SetField(reportpackagemanifest.FieldCreatedAt, field.TypeTime, value)
	}
	if rpmu.mutation.CreatedAtCleared() {
		_spec.ClearField(reportpackagemanifest.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rpmu.mutation.UpdatedAt(); ok {
		_spec.SetField(reportpackagemanifest.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportpackagemanifest.FieldUpdatedAt, field.TypeTime)
	}
	if rpmu.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reportpackagemanifest.PackagesTable,
			Columns: reportpackagemanifest.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpmu.mutation.RemovedPackagesIDs(); len(nodes) > 0 && !rpmu.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reportpackagemanifest.PackagesTable,
			Columns: reportpackagemanifest.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpmu.mutation.PackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reportpackagemanifest.PackagesTable,
			Columns: reportpackagemanifest.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportpackagemanifest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpmu.mutation.done = true
	return n, nil
}

// ReportPackageManifestUpdateOne is the builder for updating a single ReportPackageManifest entity.
type ReportPackageManifestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportPackageManifestMutation
}

// SetManifestID sets the "manifest_id" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetManifestID(s string) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetManifestID(s)
	return rpmuo
}

// SetNillableManifestID sets the "manifest_id" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillableManifestID(s *string) *ReportPackageManifestUpdateOne {
	if s != nil {
		rpmuo.SetManifestID(*s)
	}
	return rpmuo
}

// SetSourceType sets the "source_type" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetSourceType(s string) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetSourceType(s)
	return rpmuo
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillableSourceType(s *string) *ReportPackageManifestUpdateOne {
	if s != nil {
		rpmuo.SetSourceType(*s)
	}
	return rpmuo
}

// SetNamespace sets the "namespace" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetNamespace(s string) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetNamespace(s)
	return rpmuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillableNamespace(s *string) *ReportPackageManifestUpdateOne {
	if s != nil {
		rpmuo.SetNamespace(*s)
	}
	return rpmuo
}

// SetPath sets the "path" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetPath(s string) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetPath(s)
	return rpmuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillablePath(s *string) *ReportPackageManifestUpdateOne {
	if s != nil {
		rpmuo.SetPath(*s)
	}
	return rpmuo
}

// SetDisplayPath sets the "display_path" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetDisplayPath(s string) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetDisplayPath(s)
	return rpmuo
}

// SetNillableDisplayPath sets the "display_path" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillableDisplayPath(s *string) *ReportPackageManifestUpdateOne {
	if s != nil {
		rpmuo.SetDisplayPath(*s)
	}
	return rpmuo
}

// SetEcosystem sets the "ecosystem" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetEcosystem(s string) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetEcosystem(s)
	return rpmuo
}

// SetNillableEcosystem sets the "ecosystem" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillableEcosystem(s *string) *ReportPackageManifestUpdateOne {
	if s != nil {
		rpmuo.SetEcosystem(*s)
	}
	return rpmuo
}

// SetCreatedAt sets the "created_at" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetCreatedAt(t time.Time) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetCreatedAt(t)
	return rpmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillableCreatedAt(t *time.Time) *ReportPackageManifestUpdateOne {
	if t != nil {
		rpmuo.SetCreatedAt(*t)
	}
	return rpmuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rpmuo *ReportPackageManifestUpdateOne) ClearCreatedAt() *ReportPackageManifestUpdateOne {
	rpmuo.mutation.ClearCreatedAt()
	return rpmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpmuo *ReportPackageManifestUpdateOne) SetUpdatedAt(t time.Time) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.SetUpdatedAt(t)
	return rpmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpmuo *ReportPackageManifestUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReportPackageManifestUpdateOne {
	if t != nil {
		rpmuo.SetUpdatedAt(*t)
	}
	return rpmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rpmuo *ReportPackageManifestUpdateOne) ClearUpdatedAt() *ReportPackageManifestUpdateOne {
	rpmuo.mutation.ClearUpdatedAt()
	return rpmuo
}

// AddPackageIDs adds the "packages" edge to the ReportPackage entity by IDs.
func (rpmuo *ReportPackageManifestUpdateOne) AddPackageIDs(ids ...int) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.AddPackageIDs(ids...)
	return rpmuo
}

// AddPackages adds the "packages" edges to the ReportPackage entity.
func (rpmuo *ReportPackageManifestUpdateOne) AddPackages(r ...*ReportPackage) *ReportPackageManifestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpmuo.AddPackageIDs(ids...)
}

// Mutation returns the ReportPackageManifestMutation object of the builder.
func (rpmuo *ReportPackageManifestUpdateOne) Mutation() *ReportPackageManifestMutation {
	return rpmuo.mutation
}

// ClearPackages clears all "packages" edges to the ReportPackage entity.
func (rpmuo *ReportPackageManifestUpdateOne) ClearPackages() *ReportPackageManifestUpdateOne {
	rpmuo.mutation.ClearPackages()
	return rpmuo
}

// RemovePackageIDs removes the "packages" edge to ReportPackage entities by IDs.
func (rpmuo *ReportPackageManifestUpdateOne) RemovePackageIDs(ids ...int) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.RemovePackageIDs(ids...)
	return rpmuo
}

// RemovePackages removes "packages" edges to ReportPackage entities.
func (rpmuo *ReportPackageManifestUpdateOne) RemovePackages(r ...*ReportPackage) *ReportPackageManifestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpmuo.RemovePackageIDs(ids...)
}

// Where appends a list predicates to the ReportPackageManifestUpdate builder.
func (rpmuo *ReportPackageManifestUpdateOne) Where(ps ...predicate.ReportPackageManifest) *ReportPackageManifestUpdateOne {
	rpmuo.mutation.Where(ps...)
	return rpmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpmuo *ReportPackageManifestUpdateOne) Select(field string, fields ...string) *ReportPackageManifestUpdateOne {
	rpmuo.fields = append([]string{field}, fields...)
	return rpmuo
}

// Save executes the query and returns the updated ReportPackageManifest entity.
func (rpmuo *ReportPackageManifestUpdateOne) Save(ctx context.Context) (*ReportPackageManifest, error) {
	return withHooks(ctx, rpmuo.sqlSave, rpmuo.mutation, rpmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpmuo *ReportPackageManifestUpdateOne) SaveX(ctx context.Context) *ReportPackageManifest {
	node, err := rpmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpmuo *ReportPackageManifestUpdateOne) Exec(ctx context.Context) error {
	_, err := rpmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpmuo *ReportPackageManifestUpdateOne) ExecX(ctx context.Context) {
	if err := rpmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpmuo *ReportPackageManifestUpdateOne) check() error {
	if v, ok := rpmuo.mutation.ManifestID(); ok {
		if err := reportpackagemanifest.ManifestIDValidator(v); err != nil {
			return &ValidationError{Name: "manifest_id", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.manifest_id": %w`, err)}
		}
	}
	if v, ok := rpmuo.mutation.SourceType(); ok {
		if err := reportpackagemanifest.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.source_type": %w`, err)}
		}
	}
	if v, ok := rpmuo.mutation.Namespace(); ok {
		if err := reportpackagemanifest.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.namespace": %w`, err)}
		}
	}
	if v, ok := rpmuo.mutation.Path(); ok {
		if err := reportpackagemanifest.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.path": %w`, err)}
		}
	}
	if v, ok := rpmuo.mutation.DisplayPath(); ok {
		if err := reportpackagemanifest.DisplayPathValidator(v); err != nil {
			return &ValidationError{Name: "display_path", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.display_path": %w`, err)}
		}
	}
	if v, ok := rpmuo.mutation.Ecosystem(); ok {
		if err := reportpackagemanifest.EcosystemValidator(v); err != nil {
			return &ValidationError{Name: "ecosystem", err: fmt.Errorf(`ent: validator failed for field "ReportPackageManifest.ecosystem": %w`, err)}
		}
	}
	return nil
}

func (rpmuo *ReportPackageManifestUpdateOne) sqlSave(ctx context.Context) (_node *ReportPackageManifest, err error) {
	if err := rpmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportpackagemanifest.Table, reportpackagemanifest.Columns, sqlgraph.NewFieldSpec(reportpackagemanifest.FieldID, field.TypeInt))
	id, ok := rpmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportPackageManifest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reportpackagemanifest.FieldID)
		for _, f := range fields {
			if !reportpackagemanifest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reportpackagemanifest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpmuo.mutation.ManifestID(); ok {
		_spec.SetField(reportpackagemanifest.FieldManifestID, field.TypeString, value)
	}
	if value, ok := rpmuo.mutation.SourceType(); ok {
		_spec.SetField(reportpackagemanifest.FieldSourceType, field.TypeString, value)
	}
	if value, ok := rpmuo.mutation.Namespace(); ok {
		_spec.SetField(reportpackagemanifest.FieldNamespace, field.TypeString, value)
	}
	if value, ok := rpmuo.mutation.Path(); ok {
		_spec.SetField(reportpackagemanifest.FieldPath, field.TypeString, value)
	}
	if value, ok := rpmuo.mutation.DisplayPath(); ok {
		_spec.SetField(reportpackagemanifest.FieldDisplayPath, field.TypeString, value)
	}
	if value, ok := rpmuo.mutation.Ecosystem(); ok {
		_spec.SetField(reportpackagemanifest.FieldEcosystem, field.TypeString, value)
	}
	if value, ok := rpmuo.mutation.CreatedAt(); ok {
		_spec.SetField(reportpackagemanifest.FieldCreatedAt, field.TypeTime, value)
	}
	if rpmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(reportpackagemanifest.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rpmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(reportpackagemanifest.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportpackagemanifest.FieldUpdatedAt, field.TypeTime)
	}
	if rpmuo.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reportpackagemanifest.PackagesTable,
			Columns: reportpackagemanifest.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpmuo.mutation.RemovedPackagesIDs(); len(nodes) > 0 && !rpmuo.mutation.PackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reportpackagemanifest.PackagesTable,
			Columns: reportpackagemanifest.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpmuo.mutation.PackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reportpackagemanifest.PackagesTable,
			Columns: reportpackagemanifest.PackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReportPackageManifest{config: rpmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportpackagemanifest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpmuo.mutation.done = true
	return _node, nil
}
