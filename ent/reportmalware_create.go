// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/reportmalware"
	"github.com/safedep/vet/ent/reportpackage"
)

// ReportMalwareCreate is the builder for creating a ReportMalware entity.
type ReportMalwareCreate struct {
	config
	mutation *ReportMalwareMutation
	hooks    []Hook
}

// SetAnalysisID sets the "analysis_id" field.
func (rmc *ReportMalwareCreate) SetAnalysisID(s string) *ReportMalwareCreate {
	rmc.mutation.SetAnalysisID(s)
	return rmc
}

// SetIsMalware sets the "is_malware" field.
func (rmc *ReportMalwareCreate) SetIsMalware(b bool) *ReportMalwareCreate {
	rmc.mutation.SetIsMalware(b)
	return rmc
}

// SetNillableIsMalware sets the "is_malware" field if the given value is not nil.
func (rmc *ReportMalwareCreate) SetNillableIsMalware(b *bool) *ReportMalwareCreate {
	if b != nil {
		rmc.SetIsMalware(*b)
	}
	return rmc
}

// SetIsSuspicious sets the "is_suspicious" field.
func (rmc *ReportMalwareCreate) SetIsSuspicious(b bool) *ReportMalwareCreate {
	rmc.mutation.SetIsSuspicious(b)
	return rmc
}

// SetNillableIsSuspicious sets the "is_suspicious" field if the given value is not nil.
func (rmc *ReportMalwareCreate) SetNillableIsSuspicious(b *bool) *ReportMalwareCreate {
	if b != nil {
		rmc.SetIsSuspicious(*b)
	}
	return rmc
}

// SetConfidence sets the "confidence" field.
func (rmc *ReportMalwareCreate) SetConfidence(s string) *ReportMalwareCreate {
	rmc.mutation.SetConfidence(s)
	return rmc
}

// SetNillableConfidence sets the "confidence" field if the given value is not nil.
func (rmc *ReportMalwareCreate) SetNillableConfidence(s *string) *ReportMalwareCreate {
	if s != nil {
		rmc.SetConfidence(*s)
	}
	return rmc
}

// SetReport sets the "report" field.
func (rmc *ReportMalwareCreate) SetReport(m map[string]interface{}) *ReportMalwareCreate {
	rmc.mutation.SetReport(m)
	return rmc
}

// SetVerificationRecord sets the "verification_record" field.
func (rmc *ReportMalwareCreate) SetVerificationRecord(m map[string]interface{}) *ReportMalwareCreate {
	rmc.mutation.SetVerificationRecord(m)
	return rmc
}

// SetCreatedAt sets the "created_at" field.
func (rmc *ReportMalwareCreate) SetCreatedAt(t time.Time) *ReportMalwareCreate {
	rmc.mutation.SetCreatedAt(t)
	return rmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmc *ReportMalwareCreate) SetNillableCreatedAt(t *time.Time) *ReportMalwareCreate {
	if t != nil {
		rmc.SetCreatedAt(*t)
	}
	return rmc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmc *ReportMalwareCreate) SetUpdatedAt(t time.Time) *ReportMalwareCreate {
	rmc.mutation.SetUpdatedAt(t)
	return rmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmc *ReportMalwareCreate) SetNillableUpdatedAt(t *time.Time) *ReportMalwareCreate {
	if t != nil {
		rmc.SetUpdatedAt(*t)
	}
	return rmc
}

// SetPackageID sets the "package" edge to the ReportPackage entity by ID.
func (rmc *ReportMalwareCreate) SetPackageID(id int) *ReportMalwareCreate {
	rmc.mutation.SetPackageID(id)
	return rmc
}

// SetNillablePackageID sets the "package" edge to the ReportPackage entity by ID if the given value is not nil.
func (rmc *ReportMalwareCreate) SetNillablePackageID(id *int) *ReportMalwareCreate {
	if id != nil {
		rmc = rmc.SetPackageID(*id)
	}
	return rmc
}

// SetPackage sets the "package" edge to the ReportPackage entity.
func (rmc *ReportMalwareCreate) SetPackage(r *ReportPackage) *ReportMalwareCreate {
	return rmc.SetPackageID(r.ID)
}

// Mutation returns the ReportMalwareMutation object of the builder.
func (rmc *ReportMalwareCreate) Mutation() *ReportMalwareMutation {
	return rmc.mutation
}

// Save creates the ReportMalware in the database.
func (rmc *ReportMalwareCreate) Save(ctx context.Context) (*ReportMalware, error) {
	rmc.defaults()
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *ReportMalwareCreate) SaveX(ctx context.Context) *ReportMalware {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *ReportMalwareCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *ReportMalwareCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmc *ReportMalwareCreate) defaults() {
	if _, ok := rmc.mutation.IsMalware(); !ok {
		v := reportmalware.DefaultIsMalware
		rmc.mutation.SetIsMalware(v)
	}
	if _, ok := rmc.mutation.IsSuspicious(); !ok {
		v := reportmalware.DefaultIsSuspicious
		rmc.mutation.SetIsSuspicious(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *ReportMalwareCreate) check() error {
	if _, ok := rmc.mutation.AnalysisID(); !ok {
		return &ValidationError{Name: "analysis_id", err: errors.New(`ent: missing required field "ReportMalware.analysis_id"`)}
	}
	if v, ok := rmc.mutation.AnalysisID(); ok {
		if err := reportmalware.AnalysisIDValidator(v); err != nil {
			return &ValidationError{Name: "analysis_id", err: fmt.Errorf(`ent: validator failed for field "ReportMalware.analysis_id": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.IsMalware(); !ok {
		return &ValidationError{Name: "is_malware", err: errors.New(`ent: missing required field "ReportMalware.is_malware"`)}
	}
	if _, ok := rmc.mutation.IsSuspicious(); !ok {
		return &ValidationError{Name: "is_suspicious", err: errors.New(`ent: missing required field "ReportMalware.is_suspicious"`)}
	}
	return nil
}

func (rmc *ReportMalwareCreate) sqlSave(ctx context.Context) (*ReportMalware, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *ReportMalwareCreate) createSpec() (*ReportMalware, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportMalware{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(reportmalware.Table, sqlgraph.NewFieldSpec(reportmalware.FieldID, field.TypeInt))
	)
	if value, ok := rmc.mutation.AnalysisID(); ok {
		_spec.SetField(reportmalware.FieldAnalysisID, field.TypeString, value)
		_node.AnalysisID = value
	}
	if value, ok := rmc.mutation.IsMalware(); ok {
		_spec.SetField(reportmalware.FieldIsMalware, field.TypeBool, value)
		_node.IsMalware = value
	}
	if value, ok := rmc.mutation.IsSuspicious(); ok {
		_spec.SetField(reportmalware.FieldIsSuspicious, field.TypeBool, value)
		_node.IsSuspicious = value
	}
	if value, ok := rmc.mutation.Confidence(); ok {
		_spec.SetField(reportmalware.FieldConfidence, field.TypeString, value)
		_node.Confidence = value
	}
	if value, ok := rmc.mutation.Report(); ok {
		_spec.SetField(reportmalware.FieldReport, field.TypeJSON, value)
		_node.Report = value
	}
	if value, ok := rmc.mutation.VerificationRecord(); ok {
		_spec.SetField(reportmalware.FieldVerificationRecord, field.TypeJSON, value)
		_node.VerificationRecord = value
	}
	if value, ok := rmc.mutation.CreatedAt(); ok {
		_spec.SetField(reportmalware.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rmc.mutation.UpdatedAt(); ok {
		_spec.SetField(reportmalware.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rmc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reportmalware.PackageTable,
			Columns: []string{reportmalware.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpackage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.report_package_malware_analysis = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReportMalwareCreateBulk is the builder for creating many ReportMalware entities in bulk.
type ReportMalwareCreateBulk struct {
	config
	err      error
	builders []*ReportMalwareCreate
}

// Save creates the ReportMalware entities in the database.
func (rmcb *ReportMalwareCreateBulk) Save(ctx context.Context) ([]*ReportMalware, error) {
	if rmcb.err != nil {
		return nil, rmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*ReportMalware, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportMalwareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *ReportMalwareCreateBulk) SaveX(ctx context.Context) []*ReportMalware {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *ReportMalwareCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *ReportMalwareCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
