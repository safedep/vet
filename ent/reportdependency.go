// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportdependency"
	"github.com/safedep/vet/ent/reportpackage"
)

// ReportDependency is the model entity for the ReportDependency schema.
type ReportDependency struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DependencyPackageID holds the value of the "dependency_package_id" field.
	DependencyPackageID string `json:"dependency_package_id,omitempty"`
	// DependencyName holds the value of the "dependency_name" field.
	DependencyName string `json:"dependency_name,omitempty"`
	// DependencyVersion holds the value of the "dependency_version" field.
	DependencyVersion string `json:"dependency_version,omitempty"`
	// DependencyEcosystem holds the value of the "dependency_ecosystem" field.
	DependencyEcosystem string `json:"dependency_ecosystem,omitempty"`
	// DependencyType holds the value of the "dependency_type" field.
	DependencyType string `json:"dependency_type,omitempty"`
	// Depth holds the value of the "depth" field.
	Depth int `json:"depth,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportDependencyQuery when eager-loading is set.
	Edges                       ReportDependencyEdges `json:"edges"`
	report_package_dependencies *int
	selectValues                sql.SelectValues
}

// ReportDependencyEdges holds the relations/edges for other nodes in the graph.
type ReportDependencyEdges struct {
	// Package holds the value of the package edge.
	Package *ReportPackage `json:"package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportDependencyEdges) PackageOrErr() (*ReportPackage, error) {
	if e.Package != nil {
		return e.Package, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportpackage.Label}
	}
	return nil, &NotLoadedError{edge: "package"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportdependency.FieldID, reportdependency.FieldDepth:
			values[i] = new(sql.NullInt64)
		case reportdependency.FieldDependencyPackageID, reportdependency.FieldDependencyName, reportdependency.FieldDependencyVersion, reportdependency.FieldDependencyEcosystem, reportdependency.FieldDependencyType:
			values[i] = new(sql.NullString)
		case reportdependency.FieldCreatedAt, reportdependency.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reportdependency.ForeignKeys[0]: // report_package_dependencies
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportDependency fields.
func (rd *ReportDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportdependency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rd.ID = int(value.Int64)
		case reportdependency.FieldDependencyPackageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_package_id", values[i])
			} else if value.Valid {
				rd.DependencyPackageID = value.String
			}
		case reportdependency.FieldDependencyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_name", values[i])
			} else if value.Valid {
				rd.DependencyName = value.String
			}
		case reportdependency.FieldDependencyVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_version", values[i])
			} else if value.Valid {
				rd.DependencyVersion = value.String
			}
		case reportdependency.FieldDependencyEcosystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_ecosystem", values[i])
			} else if value.Valid {
				rd.DependencyEcosystem = value.String
			}
		case reportdependency.FieldDependencyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_type", values[i])
			} else if value.Valid {
				rd.DependencyType = value.String
			}
		case reportdependency.FieldDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field depth", values[i])
			} else if value.Valid {
				rd.Depth = int(value.Int64)
			}
		case reportdependency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rd.CreatedAt = value.Time
			}
		case reportdependency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rd.UpdatedAt = value.Time
			}
		case reportdependency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_package_dependencies", value)
			} else if value.Valid {
				rd.report_package_dependencies = new(int)
				*rd.report_package_dependencies = int(value.Int64)
			}
		default:
			rd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportDependency.
// This includes values selected through modifiers, order, etc.
func (rd *ReportDependency) Value(name string) (ent.Value, error) {
	return rd.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the ReportDependency entity.
func (rd *ReportDependency) QueryPackage() *ReportPackageQuery {
	return NewReportDependencyClient(rd.config).QueryPackage(rd)
}

// Update returns a builder for updating this ReportDependency.
// Note that you need to call ReportDependency.Unwrap() before calling this method if this ReportDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (rd *ReportDependency) Update() *ReportDependencyUpdateOne {
	return NewReportDependencyClient(rd.config).UpdateOne(rd)
}

// Unwrap unwraps the ReportDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rd *ReportDependency) Unwrap() *ReportDependency {
	_tx, ok := rd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportDependency is not a transactional entity")
	}
	rd.config.driver = _tx.drv
	return rd
}

// String implements the fmt.Stringer.
func (rd *ReportDependency) String() string {
	var builder strings.Builder
	builder.WriteString("ReportDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rd.ID))
	builder.WriteString("dependency_package_id=")
	builder.WriteString(rd.DependencyPackageID)
	builder.WriteString(", ")
	builder.WriteString("dependency_name=")
	builder.WriteString(rd.DependencyName)
	builder.WriteString(", ")
	builder.WriteString("dependency_version=")
	builder.WriteString(rd.DependencyVersion)
	builder.WriteString(", ")
	builder.WriteString("dependency_ecosystem=")
	builder.WriteString(rd.DependencyEcosystem)
	builder.WriteString(", ")
	builder.WriteString("dependency_type=")
	builder.WriteString(rd.DependencyType)
	builder.WriteString(", ")
	builder.WriteString("depth=")
	builder.WriteString(fmt.Sprintf("%v", rd.Depth))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportDependencies is a parsable slice of ReportDependency.
type ReportDependencies []*ReportDependency
