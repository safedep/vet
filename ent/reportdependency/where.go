// Code generated by ent, DO NOT EDIT.

package reportdependency

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldID, id))
}

// DependencyPackageID applies equality check predicate on the "dependency_package_id" field. It's identical to DependencyPackageIDEQ.
func DependencyPackageID(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyPackageID, v))
}

// DependencyName applies equality check predicate on the "dependency_name" field. It's identical to DependencyNameEQ.
func DependencyName(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyName, v))
}

// DependencyVersion applies equality check predicate on the "dependency_version" field. It's identical to DependencyVersionEQ.
func DependencyVersion(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyVersion, v))
}

// DependencyEcosystem applies equality check predicate on the "dependency_ecosystem" field. It's identical to DependencyEcosystemEQ.
func DependencyEcosystem(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyEcosystem, v))
}

// DependencyType applies equality check predicate on the "dependency_type" field. It's identical to DependencyTypeEQ.
func DependencyType(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyType, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDepth, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldUpdatedAt, v))
}

// DependencyPackageIDEQ applies the EQ predicate on the "dependency_package_id" field.
func DependencyPackageIDEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyPackageID, v))
}

// DependencyPackageIDNEQ applies the NEQ predicate on the "dependency_package_id" field.
func DependencyPackageIDNEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldDependencyPackageID, v))
}

// DependencyPackageIDIn applies the In predicate on the "dependency_package_id" field.
func DependencyPackageIDIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldDependencyPackageID, vs...))
}

// DependencyPackageIDNotIn applies the NotIn predicate on the "dependency_package_id" field.
func DependencyPackageIDNotIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldDependencyPackageID, vs...))
}

// DependencyPackageIDGT applies the GT predicate on the "dependency_package_id" field.
func DependencyPackageIDGT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldDependencyPackageID, v))
}

// DependencyPackageIDGTE applies the GTE predicate on the "dependency_package_id" field.
func DependencyPackageIDGTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldDependencyPackageID, v))
}

// DependencyPackageIDLT applies the LT predicate on the "dependency_package_id" field.
func DependencyPackageIDLT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldDependencyPackageID, v))
}

// DependencyPackageIDLTE applies the LTE predicate on the "dependency_package_id" field.
func DependencyPackageIDLTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldDependencyPackageID, v))
}

// DependencyPackageIDContains applies the Contains predicate on the "dependency_package_id" field.
func DependencyPackageIDContains(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContains(FieldDependencyPackageID, v))
}

// DependencyPackageIDHasPrefix applies the HasPrefix predicate on the "dependency_package_id" field.
func DependencyPackageIDHasPrefix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasPrefix(FieldDependencyPackageID, v))
}

// DependencyPackageIDHasSuffix applies the HasSuffix predicate on the "dependency_package_id" field.
func DependencyPackageIDHasSuffix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasSuffix(FieldDependencyPackageID, v))
}

// DependencyPackageIDEqualFold applies the EqualFold predicate on the "dependency_package_id" field.
func DependencyPackageIDEqualFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEqualFold(FieldDependencyPackageID, v))
}

// DependencyPackageIDContainsFold applies the ContainsFold predicate on the "dependency_package_id" field.
func DependencyPackageIDContainsFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContainsFold(FieldDependencyPackageID, v))
}

// DependencyNameEQ applies the EQ predicate on the "dependency_name" field.
func DependencyNameEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyName, v))
}

// DependencyNameNEQ applies the NEQ predicate on the "dependency_name" field.
func DependencyNameNEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldDependencyName, v))
}

// DependencyNameIn applies the In predicate on the "dependency_name" field.
func DependencyNameIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldDependencyName, vs...))
}

// DependencyNameNotIn applies the NotIn predicate on the "dependency_name" field.
func DependencyNameNotIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldDependencyName, vs...))
}

// DependencyNameGT applies the GT predicate on the "dependency_name" field.
func DependencyNameGT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldDependencyName, v))
}

// DependencyNameGTE applies the GTE predicate on the "dependency_name" field.
func DependencyNameGTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldDependencyName, v))
}

// DependencyNameLT applies the LT predicate on the "dependency_name" field.
func DependencyNameLT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldDependencyName, v))
}

// DependencyNameLTE applies the LTE predicate on the "dependency_name" field.
func DependencyNameLTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldDependencyName, v))
}

// DependencyNameContains applies the Contains predicate on the "dependency_name" field.
func DependencyNameContains(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContains(FieldDependencyName, v))
}

// DependencyNameHasPrefix applies the HasPrefix predicate on the "dependency_name" field.
func DependencyNameHasPrefix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasPrefix(FieldDependencyName, v))
}

// DependencyNameHasSuffix applies the HasSuffix predicate on the "dependency_name" field.
func DependencyNameHasSuffix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasSuffix(FieldDependencyName, v))
}

// DependencyNameEqualFold applies the EqualFold predicate on the "dependency_name" field.
func DependencyNameEqualFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEqualFold(FieldDependencyName, v))
}

// DependencyNameContainsFold applies the ContainsFold predicate on the "dependency_name" field.
func DependencyNameContainsFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContainsFold(FieldDependencyName, v))
}

// DependencyVersionEQ applies the EQ predicate on the "dependency_version" field.
func DependencyVersionEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyVersion, v))
}

// DependencyVersionNEQ applies the NEQ predicate on the "dependency_version" field.
func DependencyVersionNEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldDependencyVersion, v))
}

// DependencyVersionIn applies the In predicate on the "dependency_version" field.
func DependencyVersionIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldDependencyVersion, vs...))
}

// DependencyVersionNotIn applies the NotIn predicate on the "dependency_version" field.
func DependencyVersionNotIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldDependencyVersion, vs...))
}

// DependencyVersionGT applies the GT predicate on the "dependency_version" field.
func DependencyVersionGT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldDependencyVersion, v))
}

// DependencyVersionGTE applies the GTE predicate on the "dependency_version" field.
func DependencyVersionGTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldDependencyVersion, v))
}

// DependencyVersionLT applies the LT predicate on the "dependency_version" field.
func DependencyVersionLT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldDependencyVersion, v))
}

// DependencyVersionLTE applies the LTE predicate on the "dependency_version" field.
func DependencyVersionLTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldDependencyVersion, v))
}

// DependencyVersionContains applies the Contains predicate on the "dependency_version" field.
func DependencyVersionContains(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContains(FieldDependencyVersion, v))
}

// DependencyVersionHasPrefix applies the HasPrefix predicate on the "dependency_version" field.
func DependencyVersionHasPrefix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasPrefix(FieldDependencyVersion, v))
}

// DependencyVersionHasSuffix applies the HasSuffix predicate on the "dependency_version" field.
func DependencyVersionHasSuffix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasSuffix(FieldDependencyVersion, v))
}

// DependencyVersionEqualFold applies the EqualFold predicate on the "dependency_version" field.
func DependencyVersionEqualFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEqualFold(FieldDependencyVersion, v))
}

// DependencyVersionContainsFold applies the ContainsFold predicate on the "dependency_version" field.
func DependencyVersionContainsFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContainsFold(FieldDependencyVersion, v))
}

// DependencyEcosystemEQ applies the EQ predicate on the "dependency_ecosystem" field.
func DependencyEcosystemEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyEcosystem, v))
}

// DependencyEcosystemNEQ applies the NEQ predicate on the "dependency_ecosystem" field.
func DependencyEcosystemNEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldDependencyEcosystem, v))
}

// DependencyEcosystemIn applies the In predicate on the "dependency_ecosystem" field.
func DependencyEcosystemIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldDependencyEcosystem, vs...))
}

// DependencyEcosystemNotIn applies the NotIn predicate on the "dependency_ecosystem" field.
func DependencyEcosystemNotIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldDependencyEcosystem, vs...))
}

// DependencyEcosystemGT applies the GT predicate on the "dependency_ecosystem" field.
func DependencyEcosystemGT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldDependencyEcosystem, v))
}

// DependencyEcosystemGTE applies the GTE predicate on the "dependency_ecosystem" field.
func DependencyEcosystemGTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldDependencyEcosystem, v))
}

// DependencyEcosystemLT applies the LT predicate on the "dependency_ecosystem" field.
func DependencyEcosystemLT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldDependencyEcosystem, v))
}

// DependencyEcosystemLTE applies the LTE predicate on the "dependency_ecosystem" field.
func DependencyEcosystemLTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldDependencyEcosystem, v))
}

// DependencyEcosystemContains applies the Contains predicate on the "dependency_ecosystem" field.
func DependencyEcosystemContains(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContains(FieldDependencyEcosystem, v))
}

// DependencyEcosystemHasPrefix applies the HasPrefix predicate on the "dependency_ecosystem" field.
func DependencyEcosystemHasPrefix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasPrefix(FieldDependencyEcosystem, v))
}

// DependencyEcosystemHasSuffix applies the HasSuffix predicate on the "dependency_ecosystem" field.
func DependencyEcosystemHasSuffix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasSuffix(FieldDependencyEcosystem, v))
}

// DependencyEcosystemEqualFold applies the EqualFold predicate on the "dependency_ecosystem" field.
func DependencyEcosystemEqualFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEqualFold(FieldDependencyEcosystem, v))
}

// DependencyEcosystemContainsFold applies the ContainsFold predicate on the "dependency_ecosystem" field.
func DependencyEcosystemContainsFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContainsFold(FieldDependencyEcosystem, v))
}

// DependencyTypeEQ applies the EQ predicate on the "dependency_type" field.
func DependencyTypeEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDependencyType, v))
}

// DependencyTypeNEQ applies the NEQ predicate on the "dependency_type" field.
func DependencyTypeNEQ(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldDependencyType, v))
}

// DependencyTypeIn applies the In predicate on the "dependency_type" field.
func DependencyTypeIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldDependencyType, vs...))
}

// DependencyTypeNotIn applies the NotIn predicate on the "dependency_type" field.
func DependencyTypeNotIn(vs ...string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldDependencyType, vs...))
}

// DependencyTypeGT applies the GT predicate on the "dependency_type" field.
func DependencyTypeGT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldDependencyType, v))
}

// DependencyTypeGTE applies the GTE predicate on the "dependency_type" field.
func DependencyTypeGTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldDependencyType, v))
}

// DependencyTypeLT applies the LT predicate on the "dependency_type" field.
func DependencyTypeLT(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldDependencyType, v))
}

// DependencyTypeLTE applies the LTE predicate on the "dependency_type" field.
func DependencyTypeLTE(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldDependencyType, v))
}

// DependencyTypeContains applies the Contains predicate on the "dependency_type" field.
func DependencyTypeContains(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContains(FieldDependencyType, v))
}

// DependencyTypeHasPrefix applies the HasPrefix predicate on the "dependency_type" field.
func DependencyTypeHasPrefix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasPrefix(FieldDependencyType, v))
}

// DependencyTypeHasSuffix applies the HasSuffix predicate on the "dependency_type" field.
func DependencyTypeHasSuffix(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldHasSuffix(FieldDependencyType, v))
}

// DependencyTypeIsNil applies the IsNil predicate on the "dependency_type" field.
func DependencyTypeIsNil() predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIsNull(FieldDependencyType))
}

// DependencyTypeNotNil applies the NotNil predicate on the "dependency_type" field.
func DependencyTypeNotNil() predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotNull(FieldDependencyType))
}

// DependencyTypeEqualFold applies the EqualFold predicate on the "dependency_type" field.
func DependencyTypeEqualFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEqualFold(FieldDependencyType, v))
}

// DependencyTypeContainsFold applies the ContainsFold predicate on the "dependency_type" field.
func DependencyTypeContainsFold(v string) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldContainsFold(FieldDependencyType, v))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v int) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldDepth, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportDependency {
	return predicate.ReportDependency(sql.FieldNotNull(FieldUpdatedAt))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.ReportDependency {
	return predicate.ReportDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.ReportPackage) predicate.ReportDependency {
	return predicate.ReportDependency(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportDependency) predicate.ReportDependency {
	return predicate.ReportDependency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportDependency) predicate.ReportDependency {
	return predicate.ReportDependency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportDependency) predicate.ReportDependency {
	return predicate.ReportDependency(sql.NotPredicates(p))
}
