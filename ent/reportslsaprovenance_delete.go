// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/predicate"
	"github.com/safedep/vet/ent/reportslsaprovenance"
)

// ReportSlsaProvenanceDelete is the builder for deleting a ReportSlsaProvenance entity.
type ReportSlsaProvenanceDelete struct {
	config
	hooks    []Hook
	mutation *ReportSlsaProvenanceMutation
}

// Where appends a list predicates to the ReportSlsaProvenanceDelete builder.
func (rspd *ReportSlsaProvenanceDelete) Where(ps ...predicate.ReportSlsaProvenance) *ReportSlsaProvenanceDelete {
	rspd.mutation.Where(ps...)
	return rspd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rspd *ReportSlsaProvenanceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rspd.sqlExec, rspd.mutation, rspd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rspd *ReportSlsaProvenanceDelete) ExecX(ctx context.Context) int {
	n, err := rspd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rspd *ReportSlsaProvenanceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(reportslsaprovenance.Table, sqlgraph.NewFieldSpec(reportslsaprovenance.FieldID, field.TypeInt))
	if ps := rspd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rspd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rspd.mutation.done = true
	return affected, err
}

// ReportSlsaProvenanceDeleteOne is the builder for deleting a single ReportSlsaProvenance entity.
type ReportSlsaProvenanceDeleteOne struct {
	rspd *ReportSlsaProvenanceDelete
}

// Where appends a list predicates to the ReportSlsaProvenanceDelete builder.
func (rspdo *ReportSlsaProvenanceDeleteOne) Where(ps ...predicate.ReportSlsaProvenance) *ReportSlsaProvenanceDeleteOne {
	rspdo.rspd.mutation.Where(ps...)
	return rspdo
}

// Exec executes the deletion query.
func (rspdo *ReportSlsaProvenanceDeleteOne) Exec(ctx context.Context) error {
	n, err := rspdo.rspd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{reportslsaprovenance.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rspdo *ReportSlsaProvenanceDeleteOne) ExecX(ctx context.Context) {
	if err := rspdo.Exec(ctx); err != nil {
		panic(err)
	}
}
