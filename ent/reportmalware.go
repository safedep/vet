// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportmalware"
	"github.com/safedep/vet/ent/reportpackage"
)

// ReportMalware is the model entity for the ReportMalware schema.
type ReportMalware struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AnalysisID holds the value of the "analysis_id" field.
	AnalysisID string `json:"analysis_id,omitempty"`
	// IsMalware holds the value of the "is_malware" field.
	IsMalware bool `json:"is_malware,omitempty"`
	// IsSuspicious holds the value of the "is_suspicious" field.
	IsSuspicious bool `json:"is_suspicious,omitempty"`
	// Confidence holds the value of the "confidence" field.
	Confidence string `json:"confidence,omitempty"`
	// Report holds the value of the "report" field.
	Report map[string]interface{} `json:"report,omitempty"`
	// VerificationRecord holds the value of the "verification_record" field.
	VerificationRecord map[string]interface{} `json:"verification_record,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportMalwareQuery when eager-loading is set.
	Edges                           ReportMalwareEdges `json:"edges"`
	report_package_malware_analysis *int
	selectValues                    sql.SelectValues
}

// ReportMalwareEdges holds the relations/edges for other nodes in the graph.
type ReportMalwareEdges struct {
	// Package holds the value of the package edge.
	Package *ReportPackage `json:"package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportMalwareEdges) PackageOrErr() (*ReportPackage, error) {
	if e.Package != nil {
		return e.Package, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportpackage.Label}
	}
	return nil, &NotLoadedError{edge: "package"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportMalware) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportmalware.FieldReport, reportmalware.FieldVerificationRecord:
			values[i] = new([]byte)
		case reportmalware.FieldIsMalware, reportmalware.FieldIsSuspicious:
			values[i] = new(sql.NullBool)
		case reportmalware.FieldID:
			values[i] = new(sql.NullInt64)
		case reportmalware.FieldAnalysisID, reportmalware.FieldConfidence:
			values[i] = new(sql.NullString)
		case reportmalware.FieldCreatedAt, reportmalware.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reportmalware.ForeignKeys[0]: // report_package_malware_analysis
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportMalware fields.
func (rm *ReportMalware) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportmalware.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rm.ID = int(value.Int64)
		case reportmalware.FieldAnalysisID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field analysis_id", values[i])
			} else if value.Valid {
				rm.AnalysisID = value.String
			}
		case reportmalware.FieldIsMalware:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_malware", values[i])
			} else if value.Valid {
				rm.IsMalware = value.Bool
			}
		case reportmalware.FieldIsSuspicious:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_suspicious", values[i])
			} else if value.Valid {
				rm.IsSuspicious = value.Bool
			}
		case reportmalware.FieldConfidence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field confidence", values[i])
			} else if value.Valid {
				rm.Confidence = value.String
			}
		case reportmalware.FieldReport:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field report", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rm.Report); err != nil {
					return fmt.Errorf("unmarshal field report: %w", err)
				}
			}
		case reportmalware.FieldVerificationRecord:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field verification_record", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rm.VerificationRecord); err != nil {
					return fmt.Errorf("unmarshal field verification_record: %w", err)
				}
			}
		case reportmalware.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rm.CreatedAt = value.Time
			}
		case reportmalware.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rm.UpdatedAt = value.Time
			}
		case reportmalware.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_package_malware_analysis", value)
			} else if value.Valid {
				rm.report_package_malware_analysis = new(int)
				*rm.report_package_malware_analysis = int(value.Int64)
			}
		default:
			rm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportMalware.
// This includes values selected through modifiers, order, etc.
func (rm *ReportMalware) Value(name string) (ent.Value, error) {
	return rm.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the ReportMalware entity.
func (rm *ReportMalware) QueryPackage() *ReportPackageQuery {
	return NewReportMalwareClient(rm.config).QueryPackage(rm)
}

// Update returns a builder for updating this ReportMalware.
// Note that you need to call ReportMalware.Unwrap() before calling this method if this ReportMalware
// was returned from a transaction, and the transaction was committed or rolled back.
func (rm *ReportMalware) Update() *ReportMalwareUpdateOne {
	return NewReportMalwareClient(rm.config).UpdateOne(rm)
}

// Unwrap unwraps the ReportMalware entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rm *ReportMalware) Unwrap() *ReportMalware {
	_tx, ok := rm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportMalware is not a transactional entity")
	}
	rm.config.driver = _tx.drv
	return rm
}

// String implements the fmt.Stringer.
func (rm *ReportMalware) String() string {
	var builder strings.Builder
	builder.WriteString("ReportMalware(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rm.ID))
	builder.WriteString("analysis_id=")
	builder.WriteString(rm.AnalysisID)
	builder.WriteString(", ")
	builder.WriteString("is_malware=")
	builder.WriteString(fmt.Sprintf("%v", rm.IsMalware))
	builder.WriteString(", ")
	builder.WriteString("is_suspicious=")
	builder.WriteString(fmt.Sprintf("%v", rm.IsSuspicious))
	builder.WriteString(", ")
	builder.WriteString("confidence=")
	builder.WriteString(rm.Confidence)
	builder.WriteString(", ")
	builder.WriteString("report=")
	builder.WriteString(fmt.Sprintf("%v", rm.Report))
	builder.WriteString(", ")
	builder.WriteString("verification_record=")
	builder.WriteString(fmt.Sprintf("%v", rm.VerificationRecord))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportMalwares is a parsable slice of ReportMalware.
type ReportMalwares []*ReportMalware
