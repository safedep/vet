// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/predicate"
	"github.com/safedep/vet/ent/reportpackagemanifest"
)

// ReportPackageManifestDelete is the builder for deleting a ReportPackageManifest entity.
type ReportPackageManifestDelete struct {
	config
	hooks    []Hook
	mutation *ReportPackageManifestMutation
}

// Where appends a list predicates to the ReportPackageManifestDelete builder.
func (rpmd *ReportPackageManifestDelete) Where(ps ...predicate.ReportPackageManifest) *ReportPackageManifestDelete {
	rpmd.mutation.Where(ps...)
	return rpmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rpmd *ReportPackageManifestDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rpmd.sqlExec, rpmd.mutation, rpmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rpmd *ReportPackageManifestDelete) ExecX(ctx context.Context) int {
	n, err := rpmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rpmd *ReportPackageManifestDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(reportpackagemanifest.Table, sqlgraph.NewFieldSpec(reportpackagemanifest.FieldID, field.TypeInt))
	if ps := rpmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rpmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rpmd.mutation.done = true
	return affected, err
}

// ReportPackageManifestDeleteOne is the builder for deleting a single ReportPackageManifest entity.
type ReportPackageManifestDeleteOne struct {
	rpmd *ReportPackageManifestDelete
}

// Where appends a list predicates to the ReportPackageManifestDelete builder.
func (rpmdo *ReportPackageManifestDeleteOne) Where(ps ...predicate.ReportPackageManifest) *ReportPackageManifestDeleteOne {
	rpmdo.rpmd.mutation.Where(ps...)
	return rpmdo
}

// Exec executes the deletion query.
func (rpmdo *ReportPackageManifestDeleteOne) Exec(ctx context.Context) error {
	n, err := rpmdo.rpmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{reportpackagemanifest.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpmdo *ReportPackageManifestDeleteOne) ExecX(ctx context.Context) {
	if err := rpmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
