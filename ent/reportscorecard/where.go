// Code generated by ent, DO NOT EDIT.

package reportscorecard

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldID, id))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldScore, v))
}

// ScorecardVersion applies equality check predicate on the "scorecard_version" field. It's identical to ScorecardVersionEQ.
func ScorecardVersion(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldScorecardVersion, v))
}

// RepoName applies equality check predicate on the "repo_name" field. It's identical to RepoNameEQ.
func RepoName(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldRepoName, v))
}

// RepoCommit applies equality check predicate on the "repo_commit" field. It's identical to RepoCommitEQ.
func RepoCommit(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldRepoCommit, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldUpdatedAt, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float32) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldScore, v))
}

// ScorecardVersionEQ applies the EQ predicate on the "scorecard_version" field.
func ScorecardVersionEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldScorecardVersion, v))
}

// ScorecardVersionNEQ applies the NEQ predicate on the "scorecard_version" field.
func ScorecardVersionNEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldScorecardVersion, v))
}

// ScorecardVersionIn applies the In predicate on the "scorecard_version" field.
func ScorecardVersionIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldScorecardVersion, vs...))
}

// ScorecardVersionNotIn applies the NotIn predicate on the "scorecard_version" field.
func ScorecardVersionNotIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldScorecardVersion, vs...))
}

// ScorecardVersionGT applies the GT predicate on the "scorecard_version" field.
func ScorecardVersionGT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldScorecardVersion, v))
}

// ScorecardVersionGTE applies the GTE predicate on the "scorecard_version" field.
func ScorecardVersionGTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldScorecardVersion, v))
}

// ScorecardVersionLT applies the LT predicate on the "scorecard_version" field.
func ScorecardVersionLT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldScorecardVersion, v))
}

// ScorecardVersionLTE applies the LTE predicate on the "scorecard_version" field.
func ScorecardVersionLTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldScorecardVersion, v))
}

// ScorecardVersionContains applies the Contains predicate on the "scorecard_version" field.
func ScorecardVersionContains(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContains(FieldScorecardVersion, v))
}

// ScorecardVersionHasPrefix applies the HasPrefix predicate on the "scorecard_version" field.
func ScorecardVersionHasPrefix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasPrefix(FieldScorecardVersion, v))
}

// ScorecardVersionHasSuffix applies the HasSuffix predicate on the "scorecard_version" field.
func ScorecardVersionHasSuffix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasSuffix(FieldScorecardVersion, v))
}

// ScorecardVersionEqualFold applies the EqualFold predicate on the "scorecard_version" field.
func ScorecardVersionEqualFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEqualFold(FieldScorecardVersion, v))
}

// ScorecardVersionContainsFold applies the ContainsFold predicate on the "scorecard_version" field.
func ScorecardVersionContainsFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContainsFold(FieldScorecardVersion, v))
}

// RepoNameEQ applies the EQ predicate on the "repo_name" field.
func RepoNameEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldRepoName, v))
}

// RepoNameNEQ applies the NEQ predicate on the "repo_name" field.
func RepoNameNEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldRepoName, v))
}

// RepoNameIn applies the In predicate on the "repo_name" field.
func RepoNameIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldRepoName, vs...))
}

// RepoNameNotIn applies the NotIn predicate on the "repo_name" field.
func RepoNameNotIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldRepoName, vs...))
}

// RepoNameGT applies the GT predicate on the "repo_name" field.
func RepoNameGT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldRepoName, v))
}

// RepoNameGTE applies the GTE predicate on the "repo_name" field.
func RepoNameGTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldRepoName, v))
}

// RepoNameLT applies the LT predicate on the "repo_name" field.
func RepoNameLT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldRepoName, v))
}

// RepoNameLTE applies the LTE predicate on the "repo_name" field.
func RepoNameLTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldRepoName, v))
}

// RepoNameContains applies the Contains predicate on the "repo_name" field.
func RepoNameContains(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContains(FieldRepoName, v))
}

// RepoNameHasPrefix applies the HasPrefix predicate on the "repo_name" field.
func RepoNameHasPrefix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasPrefix(FieldRepoName, v))
}

// RepoNameHasSuffix applies the HasSuffix predicate on the "repo_name" field.
func RepoNameHasSuffix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasSuffix(FieldRepoName, v))
}

// RepoNameEqualFold applies the EqualFold predicate on the "repo_name" field.
func RepoNameEqualFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEqualFold(FieldRepoName, v))
}

// RepoNameContainsFold applies the ContainsFold predicate on the "repo_name" field.
func RepoNameContainsFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContainsFold(FieldRepoName, v))
}

// RepoCommitEQ applies the EQ predicate on the "repo_commit" field.
func RepoCommitEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldRepoCommit, v))
}

// RepoCommitNEQ applies the NEQ predicate on the "repo_commit" field.
func RepoCommitNEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldRepoCommit, v))
}

// RepoCommitIn applies the In predicate on the "repo_commit" field.
func RepoCommitIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldRepoCommit, vs...))
}

// RepoCommitNotIn applies the NotIn predicate on the "repo_commit" field.
func RepoCommitNotIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldRepoCommit, vs...))
}

// RepoCommitGT applies the GT predicate on the "repo_commit" field.
func RepoCommitGT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldRepoCommit, v))
}

// RepoCommitGTE applies the GTE predicate on the "repo_commit" field.
func RepoCommitGTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldRepoCommit, v))
}

// RepoCommitLT applies the LT predicate on the "repo_commit" field.
func RepoCommitLT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldRepoCommit, v))
}

// RepoCommitLTE applies the LTE predicate on the "repo_commit" field.
func RepoCommitLTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldRepoCommit, v))
}

// RepoCommitContains applies the Contains predicate on the "repo_commit" field.
func RepoCommitContains(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContains(FieldRepoCommit, v))
}

// RepoCommitHasPrefix applies the HasPrefix predicate on the "repo_commit" field.
func RepoCommitHasPrefix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasPrefix(FieldRepoCommit, v))
}

// RepoCommitHasSuffix applies the HasSuffix predicate on the "repo_commit" field.
func RepoCommitHasSuffix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasSuffix(FieldRepoCommit, v))
}

// RepoCommitEqualFold applies the EqualFold predicate on the "repo_commit" field.
func RepoCommitEqualFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEqualFold(FieldRepoCommit, v))
}

// RepoCommitContainsFold applies the ContainsFold predicate on the "repo_commit" field.
func RepoCommitContainsFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContainsFold(FieldRepoCommit, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldHasSuffix(FieldDate, v))
}

// DateIsNil applies the IsNil predicate on the "date" field.
func DateIsNil() predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIsNull(FieldDate))
}

// DateNotNil applies the NotNil predicate on the "date" field.
func DateNotNil() predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotNull(FieldDate))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldContainsFold(FieldDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.FieldNotNull(FieldUpdatedAt))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ReportScorecard {
	return predicate.ReportScorecard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.ReportProject) predicate.ReportScorecard {
	return predicate.ReportScorecard(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChecks applies the HasEdge predicate on the "checks" edge.
func HasChecks() predicate.ReportScorecard {
	return predicate.ReportScorecard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChecksTable, ChecksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChecksWith applies the HasEdge predicate on the "checks" edge with a given conditions (other predicates).
func HasChecksWith(preds ...predicate.ReportScorecardCheck) predicate.ReportScorecard {
	return predicate.ReportScorecard(func(s *sql.Selector) {
		step := newChecksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportScorecard) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportScorecard) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportScorecard) predicate.ReportScorecard {
	return predicate.ReportScorecard(sql.NotPredicates(p))
}
