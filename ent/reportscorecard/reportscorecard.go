// Code generated by ent, DO NOT EDIT.

package reportscorecard

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportscorecard type in the database.
	Label = "report_scorecard"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldScorecardVersion holds the string denoting the scorecard_version field in the database.
	FieldScorecardVersion = "scorecard_version"
	// FieldRepoName holds the string denoting the repo_name field in the database.
	FieldRepoName = "repo_name"
	// FieldRepoCommit holds the string denoting the repo_commit field in the database.
	FieldRepoCommit = "repo_commit"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeChecks holds the string denoting the checks edge name in mutations.
	EdgeChecks = "checks"
	// Table holds the table name of the reportscorecard in the database.
	Table = "report_scorecards"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "report_scorecards"
	// ProjectInverseTable is the table name for the ReportProject entity.
	// It exists in this package in order to avoid circular dependency with the "reportproject" package.
	ProjectInverseTable = "report_projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "report_project_scorecard"
	// ChecksTable is the table that holds the checks relation/edge.
	ChecksTable = "report_scorecard_checks"
	// ChecksInverseTable is the table name for the ReportScorecardCheck entity.
	// It exists in this package in order to avoid circular dependency with the "reportscorecardcheck" package.
	ChecksInverseTable = "report_scorecard_checks"
	// ChecksColumn is the table column denoting the checks relation/edge.
	ChecksColumn = "report_scorecard_checks"
)

// Columns holds all SQL columns for reportscorecard fields.
var Columns = []string{
	FieldID,
	FieldScore,
	FieldScorecardVersion,
	FieldRepoName,
	FieldRepoCommit,
	FieldDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "report_scorecards"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"report_project_scorecard",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ReportScorecard queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByScorecardVersion orders the results by the scorecard_version field.
func ByScorecardVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScorecardVersion, opts...).ToFunc()
}

// ByRepoName orders the results by the repo_name field.
func ByRepoName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoName, opts...).ToFunc()
}

// ByRepoCommit orders the results by the repo_commit field.
func ByRepoCommit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoCommit, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByChecksCount orders the results by checks count.
func ByChecksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChecksStep(), opts...)
	}
}

// ByChecks orders the results by checks terms.
func ByChecks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChecksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
	)
}
func newChecksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChecksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChecksTable, ChecksColumn),
	)
}
