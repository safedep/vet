// Code generated by ent, DO NOT EDIT.

package reportlicense

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/safedep/vet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLTE(FieldID, id))
}

// LicenseID applies equality check predicate on the "license_id" field. It's identical to LicenseIDEQ.
func LicenseID(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldLicenseID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldName, v))
}

// SpdxID applies equality check predicate on the "spdx_id" field. It's identical to SpdxIDEQ.
func SpdxID(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldSpdxID, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldUpdatedAt, v))
}

// LicenseIDEQ applies the EQ predicate on the "license_id" field.
func LicenseIDEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldLicenseID, v))
}

// LicenseIDNEQ applies the NEQ predicate on the "license_id" field.
func LicenseIDNEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNEQ(FieldLicenseID, v))
}

// LicenseIDIn applies the In predicate on the "license_id" field.
func LicenseIDIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIn(FieldLicenseID, vs...))
}

// LicenseIDNotIn applies the NotIn predicate on the "license_id" field.
func LicenseIDNotIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotIn(FieldLicenseID, vs...))
}

// LicenseIDGT applies the GT predicate on the "license_id" field.
func LicenseIDGT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGT(FieldLicenseID, v))
}

// LicenseIDGTE applies the GTE predicate on the "license_id" field.
func LicenseIDGTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGTE(FieldLicenseID, v))
}

// LicenseIDLT applies the LT predicate on the "license_id" field.
func LicenseIDLT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLT(FieldLicenseID, v))
}

// LicenseIDLTE applies the LTE predicate on the "license_id" field.
func LicenseIDLTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLTE(FieldLicenseID, v))
}

// LicenseIDContains applies the Contains predicate on the "license_id" field.
func LicenseIDContains(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContains(FieldLicenseID, v))
}

// LicenseIDHasPrefix applies the HasPrefix predicate on the "license_id" field.
func LicenseIDHasPrefix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasPrefix(FieldLicenseID, v))
}

// LicenseIDHasSuffix applies the HasSuffix predicate on the "license_id" field.
func LicenseIDHasSuffix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasSuffix(FieldLicenseID, v))
}

// LicenseIDEqualFold applies the EqualFold predicate on the "license_id" field.
func LicenseIDEqualFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEqualFold(FieldLicenseID, v))
}

// LicenseIDContainsFold applies the ContainsFold predicate on the "license_id" field.
func LicenseIDContainsFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContainsFold(FieldLicenseID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContainsFold(FieldName, v))
}

// SpdxIDEQ applies the EQ predicate on the "spdx_id" field.
func SpdxIDEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldSpdxID, v))
}

// SpdxIDNEQ applies the NEQ predicate on the "spdx_id" field.
func SpdxIDNEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNEQ(FieldSpdxID, v))
}

// SpdxIDIn applies the In predicate on the "spdx_id" field.
func SpdxIDIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIn(FieldSpdxID, vs...))
}

// SpdxIDNotIn applies the NotIn predicate on the "spdx_id" field.
func SpdxIDNotIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotIn(FieldSpdxID, vs...))
}

// SpdxIDGT applies the GT predicate on the "spdx_id" field.
func SpdxIDGT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGT(FieldSpdxID, v))
}

// SpdxIDGTE applies the GTE predicate on the "spdx_id" field.
func SpdxIDGTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGTE(FieldSpdxID, v))
}

// SpdxIDLT applies the LT predicate on the "spdx_id" field.
func SpdxIDLT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLT(FieldSpdxID, v))
}

// SpdxIDLTE applies the LTE predicate on the "spdx_id" field.
func SpdxIDLTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLTE(FieldSpdxID, v))
}

// SpdxIDContains applies the Contains predicate on the "spdx_id" field.
func SpdxIDContains(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContains(FieldSpdxID, v))
}

// SpdxIDHasPrefix applies the HasPrefix predicate on the "spdx_id" field.
func SpdxIDHasPrefix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasPrefix(FieldSpdxID, v))
}

// SpdxIDHasSuffix applies the HasSuffix predicate on the "spdx_id" field.
func SpdxIDHasSuffix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasSuffix(FieldSpdxID, v))
}

// SpdxIDIsNil applies the IsNil predicate on the "spdx_id" field.
func SpdxIDIsNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIsNull(FieldSpdxID))
}

// SpdxIDNotNil applies the NotNil predicate on the "spdx_id" field.
func SpdxIDNotNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotNull(FieldSpdxID))
}

// SpdxIDEqualFold applies the EqualFold predicate on the "spdx_id" field.
func SpdxIDEqualFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEqualFold(FieldSpdxID, v))
}

// SpdxIDContainsFold applies the ContainsFold predicate on the "spdx_id" field.
func SpdxIDContainsFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContainsFold(FieldSpdxID, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldContainsFold(FieldURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ReportLicense {
	return predicate.ReportLicense(sql.FieldNotNull(FieldUpdatedAt))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.ReportLicense {
	return predicate.ReportLicense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.ReportPackage) predicate.ReportLicense {
	return predicate.ReportLicense(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportLicense) predicate.ReportLicense {
	return predicate.ReportLicense(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportLicense) predicate.ReportLicense {
	return predicate.ReportLicense(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportLicense) predicate.ReportLicense {
	return predicate.ReportLicense(sql.NotPredicates(p))
}
