// Code generated by ent, DO NOT EDIT.

package reportproject

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the reportproject type in the database.
	Label = "report_project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStars holds the string denoting the stars field in the database.
	FieldStars = "stars"
	// FieldForks holds the string denoting the forks field in the database.
	FieldForks = "forks"
	// FieldScorecard holds the string denoting the scorecard field in the database.
	FieldScorecard = "scorecard"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the reportproject in the database.
	Table = "report_projects"
)

// Columns holds all SQL columns for reportproject fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURL,
	FieldDescription,
	FieldStars,
	FieldForks,
	FieldScorecard,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the ReportProject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStars orders the results by the stars field.
func ByStars(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStars, opts...).ToFunc()
}

// ByForks orders the results by the forks field.
func ByForks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForks, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
