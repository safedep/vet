// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/safedep/vet/ent/reportlicense"
	"github.com/safedep/vet/ent/reportpackage"
)

// ReportLicense is the model entity for the ReportLicense schema.
type ReportLicense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LicenseID holds the value of the "license_id" field.
	LicenseID string `json:"license_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SpdxID holds the value of the "spdx_id" field.
	SpdxID string `json:"spdx_id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportLicenseQuery when eager-loading is set.
	Edges                   ReportLicenseEdges `json:"edges"`
	report_package_licenses *int
	selectValues            sql.SelectValues
}

// ReportLicenseEdges holds the relations/edges for other nodes in the graph.
type ReportLicenseEdges struct {
	// Package holds the value of the package edge.
	Package *ReportPackage `json:"package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportLicenseEdges) PackageOrErr() (*ReportPackage, error) {
	if e.Package != nil {
		return e.Package, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportpackage.Label}
	}
	return nil, &NotLoadedError{edge: "package"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportLicense) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportlicense.FieldID:
			values[i] = new(sql.NullInt64)
		case reportlicense.FieldLicenseID, reportlicense.FieldName, reportlicense.FieldSpdxID, reportlicense.FieldURL:
			values[i] = new(sql.NullString)
		case reportlicense.FieldCreatedAt, reportlicense.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reportlicense.ForeignKeys[0]: // report_package_licenses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportLicense fields.
func (rl *ReportLicense) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportlicense.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rl.ID = int(value.Int64)
		case reportlicense.FieldLicenseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_id", values[i])
			} else if value.Valid {
				rl.LicenseID = value.String
			}
		case reportlicense.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rl.Name = value.String
			}
		case reportlicense.FieldSpdxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spdx_id", values[i])
			} else if value.Valid {
				rl.SpdxID = value.String
			}
		case reportlicense.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				rl.URL = value.String
			}
		case reportlicense.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rl.CreatedAt = value.Time
			}
		case reportlicense.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rl.UpdatedAt = value.Time
			}
		case reportlicense.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_package_licenses", value)
			} else if value.Valid {
				rl.report_package_licenses = new(int)
				*rl.report_package_licenses = int(value.Int64)
			}
		default:
			rl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportLicense.
// This includes values selected through modifiers, order, etc.
func (rl *ReportLicense) Value(name string) (ent.Value, error) {
	return rl.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the ReportLicense entity.
func (rl *ReportLicense) QueryPackage() *ReportPackageQuery {
	return NewReportLicenseClient(rl.config).QueryPackage(rl)
}

// Update returns a builder for updating this ReportLicense.
// Note that you need to call ReportLicense.Unwrap() before calling this method if this ReportLicense
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *ReportLicense) Update() *ReportLicenseUpdateOne {
	return NewReportLicenseClient(rl.config).UpdateOne(rl)
}

// Unwrap unwraps the ReportLicense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *ReportLicense) Unwrap() *ReportLicense {
	_tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportLicense is not a transactional entity")
	}
	rl.config.driver = _tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *ReportLicense) String() string {
	var builder strings.Builder
	builder.WriteString("ReportLicense(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rl.ID))
	builder.WriteString("license_id=")
	builder.WriteString(rl.LicenseID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rl.Name)
	builder.WriteString(", ")
	builder.WriteString("spdx_id=")
	builder.WriteString(rl.SpdxID)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(rl.URL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportLicenses is a parsable slice of ReportLicense.
type ReportLicenses []*ReportLicense
