// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/codesourcefile"
	"github.com/safedep/vet/ent/depsusageevidence"
	"github.com/safedep/vet/ent/predicate"
)

// DepsUsageEvidenceUpdate is the builder for updating DepsUsageEvidence entities.
type DepsUsageEvidenceUpdate struct {
	config
	hooks    []Hook
	mutation *DepsUsageEvidenceMutation
}

// Where appends a list predicates to the DepsUsageEvidenceUpdate builder.
func (dueu *DepsUsageEvidenceUpdate) Where(ps ...predicate.DepsUsageEvidence) *DepsUsageEvidenceUpdate {
	dueu.mutation.Where(ps...)
	return dueu
}

// SetPackageHint sets the "package_hint" field.
func (dueu *DepsUsageEvidenceUpdate) SetPackageHint(s string) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetPackageHint(s)
	return dueu
}

// SetNillablePackageHint sets the "package_hint" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillablePackageHint(s *string) *DepsUsageEvidenceUpdate {
	if s != nil {
		dueu.SetPackageHint(*s)
	}
	return dueu
}

// ClearPackageHint clears the value of the "package_hint" field.
func (dueu *DepsUsageEvidenceUpdate) ClearPackageHint() *DepsUsageEvidenceUpdate {
	dueu.mutation.ClearPackageHint()
	return dueu
}

// SetModuleName sets the "module_name" field.
func (dueu *DepsUsageEvidenceUpdate) SetModuleName(s string) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetModuleName(s)
	return dueu
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillableModuleName(s *string) *DepsUsageEvidenceUpdate {
	if s != nil {
		dueu.SetModuleName(*s)
	}
	return dueu
}

// SetModuleItem sets the "module_item" field.
func (dueu *DepsUsageEvidenceUpdate) SetModuleItem(s string) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetModuleItem(s)
	return dueu
}

// SetNillableModuleItem sets the "module_item" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillableModuleItem(s *string) *DepsUsageEvidenceUpdate {
	if s != nil {
		dueu.SetModuleItem(*s)
	}
	return dueu
}

// ClearModuleItem clears the value of the "module_item" field.
func (dueu *DepsUsageEvidenceUpdate) ClearModuleItem() *DepsUsageEvidenceUpdate {
	dueu.mutation.ClearModuleItem()
	return dueu
}

// SetModuleAlias sets the "module_alias" field.
func (dueu *DepsUsageEvidenceUpdate) SetModuleAlias(s string) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetModuleAlias(s)
	return dueu
}

// SetNillableModuleAlias sets the "module_alias" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillableModuleAlias(s *string) *DepsUsageEvidenceUpdate {
	if s != nil {
		dueu.SetModuleAlias(*s)
	}
	return dueu
}

// ClearModuleAlias clears the value of the "module_alias" field.
func (dueu *DepsUsageEvidenceUpdate) ClearModuleAlias() *DepsUsageEvidenceUpdate {
	dueu.mutation.ClearModuleAlias()
	return dueu
}

// SetIsWildCardUsage sets the "is_wild_card_usage" field.
func (dueu *DepsUsageEvidenceUpdate) SetIsWildCardUsage(b bool) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetIsWildCardUsage(b)
	return dueu
}

// SetNillableIsWildCardUsage sets the "is_wild_card_usage" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillableIsWildCardUsage(b *bool) *DepsUsageEvidenceUpdate {
	if b != nil {
		dueu.SetIsWildCardUsage(*b)
	}
	return dueu
}

// ClearIsWildCardUsage clears the value of the "is_wild_card_usage" field.
func (dueu *DepsUsageEvidenceUpdate) ClearIsWildCardUsage() *DepsUsageEvidenceUpdate {
	dueu.mutation.ClearIsWildCardUsage()
	return dueu
}

// SetIdentifier sets the "identifier" field.
func (dueu *DepsUsageEvidenceUpdate) SetIdentifier(s string) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetIdentifier(s)
	return dueu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillableIdentifier(s *string) *DepsUsageEvidenceUpdate {
	if s != nil {
		dueu.SetIdentifier(*s)
	}
	return dueu
}

// ClearIdentifier clears the value of the "identifier" field.
func (dueu *DepsUsageEvidenceUpdate) ClearIdentifier() *DepsUsageEvidenceUpdate {
	dueu.mutation.ClearIdentifier()
	return dueu
}

// SetUsageFilePath sets the "usage_file_path" field.
func (dueu *DepsUsageEvidenceUpdate) SetUsageFilePath(s string) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetUsageFilePath(s)
	return dueu
}

// SetNillableUsageFilePath sets the "usage_file_path" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillableUsageFilePath(s *string) *DepsUsageEvidenceUpdate {
	if s != nil {
		dueu.SetUsageFilePath(*s)
	}
	return dueu
}

// SetLine sets the "line" field.
func (dueu *DepsUsageEvidenceUpdate) SetLine(u uint) *DepsUsageEvidenceUpdate {
	dueu.mutation.ResetLine()
	dueu.mutation.SetLine(u)
	return dueu
}

// SetNillableLine sets the "line" field if the given value is not nil.
func (dueu *DepsUsageEvidenceUpdate) SetNillableLine(u *uint) *DepsUsageEvidenceUpdate {
	if u != nil {
		dueu.SetLine(*u)
	}
	return dueu
}

// AddLine adds u to the "line" field.
func (dueu *DepsUsageEvidenceUpdate) AddLine(u int) *DepsUsageEvidenceUpdate {
	dueu.mutation.AddLine(u)
	return dueu
}

// SetUsedInID sets the "used_in" edge to the CodeSourceFile entity by ID.
func (dueu *DepsUsageEvidenceUpdate) SetUsedInID(id int) *DepsUsageEvidenceUpdate {
	dueu.mutation.SetUsedInID(id)
	return dueu
}

// SetUsedIn sets the "used_in" edge to the CodeSourceFile entity.
func (dueu *DepsUsageEvidenceUpdate) SetUsedIn(c *CodeSourceFile) *DepsUsageEvidenceUpdate {
	return dueu.SetUsedInID(c.ID)
}

// Mutation returns the DepsUsageEvidenceMutation object of the builder.
func (dueu *DepsUsageEvidenceUpdate) Mutation() *DepsUsageEvidenceMutation {
	return dueu.mutation
}

// ClearUsedIn clears the "used_in" edge to the CodeSourceFile entity.
func (dueu *DepsUsageEvidenceUpdate) ClearUsedIn() *DepsUsageEvidenceUpdate {
	dueu.mutation.ClearUsedIn()
	return dueu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dueu *DepsUsageEvidenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dueu.sqlSave, dueu.mutation, dueu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dueu *DepsUsageEvidenceUpdate) SaveX(ctx context.Context) int {
	affected, err := dueu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dueu *DepsUsageEvidenceUpdate) Exec(ctx context.Context) error {
	_, err := dueu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dueu *DepsUsageEvidenceUpdate) ExecX(ctx context.Context) {
	if err := dueu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dueu *DepsUsageEvidenceUpdate) check() error {
	if dueu.mutation.UsedInCleared() && len(dueu.mutation.UsedInIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DepsUsageEvidence.used_in"`)
	}
	return nil
}

func (dueu *DepsUsageEvidenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dueu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(depsusageevidence.Table, depsusageevidence.Columns, sqlgraph.NewFieldSpec(depsusageevidence.FieldID, field.TypeInt))
	if ps := dueu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dueu.mutation.PackageHint(); ok {
		_spec.SetField(depsusageevidence.FieldPackageHint, field.TypeString, value)
	}
	if dueu.mutation.PackageHintCleared() {
		_spec.ClearField(depsusageevidence.FieldPackageHint, field.TypeString)
	}
	if value, ok := dueu.mutation.ModuleName(); ok {
		_spec.SetField(depsusageevidence.FieldModuleName, field.TypeString, value)
	}
	if value, ok := dueu.mutation.ModuleItem(); ok {
		_spec.SetField(depsusageevidence.FieldModuleItem, field.TypeString, value)
	}
	if dueu.mutation.ModuleItemCleared() {
		_spec.ClearField(depsusageevidence.FieldModuleItem, field.TypeString)
	}
	if value, ok := dueu.mutation.ModuleAlias(); ok {
		_spec.SetField(depsusageevidence.FieldModuleAlias, field.TypeString, value)
	}
	if dueu.mutation.ModuleAliasCleared() {
		_spec.ClearField(depsusageevidence.FieldModuleAlias, field.TypeString)
	}
	if value, ok := dueu.mutation.IsWildCardUsage(); ok {
		_spec.SetField(depsusageevidence.FieldIsWildCardUsage, field.TypeBool, value)
	}
	if dueu.mutation.IsWildCardUsageCleared() {
		_spec.ClearField(depsusageevidence.FieldIsWildCardUsage, field.TypeBool)
	}
	if value, ok := dueu.mutation.Identifier(); ok {
		_spec.SetField(depsusageevidence.FieldIdentifier, field.TypeString, value)
	}
	if dueu.mutation.IdentifierCleared() {
		_spec.ClearField(depsusageevidence.FieldIdentifier, field.TypeString)
	}
	if value, ok := dueu.mutation.UsageFilePath(); ok {
		_spec.SetField(depsusageevidence.FieldUsageFilePath, field.TypeString, value)
	}
	if value, ok := dueu.mutation.Line(); ok {
		_spec.SetField(depsusageevidence.FieldLine, field.TypeUint, value)
	}
	if value, ok := dueu.mutation.AddedLine(); ok {
		_spec.AddField(depsusageevidence.FieldLine, field.TypeUint, value)
	}
	if dueu.mutation.UsedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   depsusageevidence.UsedInTable,
			Columns: []string{depsusageevidence.UsedInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codesourcefile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dueu.mutation.UsedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   depsusageevidence.UsedInTable,
			Columns: []string{depsusageevidence.UsedInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codesourcefile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dueu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{depsusageevidence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dueu.mutation.done = true
	return n, nil
}

// DepsUsageEvidenceUpdateOne is the builder for updating a single DepsUsageEvidence entity.
type DepsUsageEvidenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepsUsageEvidenceMutation
}

// SetPackageHint sets the "package_hint" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetPackageHint(s string) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetPackageHint(s)
	return dueuo
}

// SetNillablePackageHint sets the "package_hint" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillablePackageHint(s *string) *DepsUsageEvidenceUpdateOne {
	if s != nil {
		dueuo.SetPackageHint(*s)
	}
	return dueuo
}

// ClearPackageHint clears the value of the "package_hint" field.
func (dueuo *DepsUsageEvidenceUpdateOne) ClearPackageHint() *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.ClearPackageHint()
	return dueuo
}

// SetModuleName sets the "module_name" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetModuleName(s string) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetModuleName(s)
	return dueuo
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillableModuleName(s *string) *DepsUsageEvidenceUpdateOne {
	if s != nil {
		dueuo.SetModuleName(*s)
	}
	return dueuo
}

// SetModuleItem sets the "module_item" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetModuleItem(s string) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetModuleItem(s)
	return dueuo
}

// SetNillableModuleItem sets the "module_item" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillableModuleItem(s *string) *DepsUsageEvidenceUpdateOne {
	if s != nil {
		dueuo.SetModuleItem(*s)
	}
	return dueuo
}

// ClearModuleItem clears the value of the "module_item" field.
func (dueuo *DepsUsageEvidenceUpdateOne) ClearModuleItem() *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.ClearModuleItem()
	return dueuo
}

// SetModuleAlias sets the "module_alias" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetModuleAlias(s string) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetModuleAlias(s)
	return dueuo
}

// SetNillableModuleAlias sets the "module_alias" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillableModuleAlias(s *string) *DepsUsageEvidenceUpdateOne {
	if s != nil {
		dueuo.SetModuleAlias(*s)
	}
	return dueuo
}

// ClearModuleAlias clears the value of the "module_alias" field.
func (dueuo *DepsUsageEvidenceUpdateOne) ClearModuleAlias() *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.ClearModuleAlias()
	return dueuo
}

// SetIsWildCardUsage sets the "is_wild_card_usage" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetIsWildCardUsage(b bool) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetIsWildCardUsage(b)
	return dueuo
}

// SetNillableIsWildCardUsage sets the "is_wild_card_usage" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillableIsWildCardUsage(b *bool) *DepsUsageEvidenceUpdateOne {
	if b != nil {
		dueuo.SetIsWildCardUsage(*b)
	}
	return dueuo
}

// ClearIsWildCardUsage clears the value of the "is_wild_card_usage" field.
func (dueuo *DepsUsageEvidenceUpdateOne) ClearIsWildCardUsage() *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.ClearIsWildCardUsage()
	return dueuo
}

// SetIdentifier sets the "identifier" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetIdentifier(s string) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetIdentifier(s)
	return dueuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillableIdentifier(s *string) *DepsUsageEvidenceUpdateOne {
	if s != nil {
		dueuo.SetIdentifier(*s)
	}
	return dueuo
}

// ClearIdentifier clears the value of the "identifier" field.
func (dueuo *DepsUsageEvidenceUpdateOne) ClearIdentifier() *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.ClearIdentifier()
	return dueuo
}

// SetUsageFilePath sets the "usage_file_path" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetUsageFilePath(s string) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetUsageFilePath(s)
	return dueuo
}

// SetNillableUsageFilePath sets the "usage_file_path" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillableUsageFilePath(s *string) *DepsUsageEvidenceUpdateOne {
	if s != nil {
		dueuo.SetUsageFilePath(*s)
	}
	return dueuo
}

// SetLine sets the "line" field.
func (dueuo *DepsUsageEvidenceUpdateOne) SetLine(u uint) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.ResetLine()
	dueuo.mutation.SetLine(u)
	return dueuo
}

// SetNillableLine sets the "line" field if the given value is not nil.
func (dueuo *DepsUsageEvidenceUpdateOne) SetNillableLine(u *uint) *DepsUsageEvidenceUpdateOne {
	if u != nil {
		dueuo.SetLine(*u)
	}
	return dueuo
}

// AddLine adds u to the "line" field.
func (dueuo *DepsUsageEvidenceUpdateOne) AddLine(u int) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.AddLine(u)
	return dueuo
}

// SetUsedInID sets the "used_in" edge to the CodeSourceFile entity by ID.
func (dueuo *DepsUsageEvidenceUpdateOne) SetUsedInID(id int) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.SetUsedInID(id)
	return dueuo
}

// SetUsedIn sets the "used_in" edge to the CodeSourceFile entity.
func (dueuo *DepsUsageEvidenceUpdateOne) SetUsedIn(c *CodeSourceFile) *DepsUsageEvidenceUpdateOne {
	return dueuo.SetUsedInID(c.ID)
}

// Mutation returns the DepsUsageEvidenceMutation object of the builder.
func (dueuo *DepsUsageEvidenceUpdateOne) Mutation() *DepsUsageEvidenceMutation {
	return dueuo.mutation
}

// ClearUsedIn clears the "used_in" edge to the CodeSourceFile entity.
func (dueuo *DepsUsageEvidenceUpdateOne) ClearUsedIn() *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.ClearUsedIn()
	return dueuo
}

// Where appends a list predicates to the DepsUsageEvidenceUpdate builder.
func (dueuo *DepsUsageEvidenceUpdateOne) Where(ps ...predicate.DepsUsageEvidence) *DepsUsageEvidenceUpdateOne {
	dueuo.mutation.Where(ps...)
	return dueuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dueuo *DepsUsageEvidenceUpdateOne) Select(field string, fields ...string) *DepsUsageEvidenceUpdateOne {
	dueuo.fields = append([]string{field}, fields...)
	return dueuo
}

// Save executes the query and returns the updated DepsUsageEvidence entity.
func (dueuo *DepsUsageEvidenceUpdateOne) Save(ctx context.Context) (*DepsUsageEvidence, error) {
	return withHooks(ctx, dueuo.sqlSave, dueuo.mutation, dueuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dueuo *DepsUsageEvidenceUpdateOne) SaveX(ctx context.Context) *DepsUsageEvidence {
	node, err := dueuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dueuo *DepsUsageEvidenceUpdateOne) Exec(ctx context.Context) error {
	_, err := dueuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dueuo *DepsUsageEvidenceUpdateOne) ExecX(ctx context.Context) {
	if err := dueuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dueuo *DepsUsageEvidenceUpdateOne) check() error {
	if dueuo.mutation.UsedInCleared() && len(dueuo.mutation.UsedInIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DepsUsageEvidence.used_in"`)
	}
	return nil
}

func (dueuo *DepsUsageEvidenceUpdateOne) sqlSave(ctx context.Context) (_node *DepsUsageEvidence, err error) {
	if err := dueuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(depsusageevidence.Table, depsusageevidence.Columns, sqlgraph.NewFieldSpec(depsusageevidence.FieldID, field.TypeInt))
	id, ok := dueuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DepsUsageEvidence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dueuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, depsusageevidence.FieldID)
		for _, f := range fields {
			if !depsusageevidence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != depsusageevidence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dueuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dueuo.mutation.PackageHint(); ok {
		_spec.SetField(depsusageevidence.FieldPackageHint, field.TypeString, value)
	}
	if dueuo.mutation.PackageHintCleared() {
		_spec.ClearField(depsusageevidence.FieldPackageHint, field.TypeString)
	}
	if value, ok := dueuo.mutation.ModuleName(); ok {
		_spec.SetField(depsusageevidence.FieldModuleName, field.TypeString, value)
	}
	if value, ok := dueuo.mutation.ModuleItem(); ok {
		_spec.SetField(depsusageevidence.FieldModuleItem, field.TypeString, value)
	}
	if dueuo.mutation.ModuleItemCleared() {
		_spec.ClearField(depsusageevidence.FieldModuleItem, field.TypeString)
	}
	if value, ok := dueuo.mutation.ModuleAlias(); ok {
		_spec.SetField(depsusageevidence.FieldModuleAlias, field.TypeString, value)
	}
	if dueuo.mutation.ModuleAliasCleared() {
		_spec.ClearField(depsusageevidence.FieldModuleAlias, field.TypeString)
	}
	if value, ok := dueuo.mutation.IsWildCardUsage(); ok {
		_spec.SetField(depsusageevidence.FieldIsWildCardUsage, field.TypeBool, value)
	}
	if dueuo.mutation.IsWildCardUsageCleared() {
		_spec.ClearField(depsusageevidence.FieldIsWildCardUsage, field.TypeBool)
	}
	if value, ok := dueuo.mutation.Identifier(); ok {
		_spec.SetField(depsusageevidence.FieldIdentifier, field.TypeString, value)
	}
	if dueuo.mutation.IdentifierCleared() {
		_spec.ClearField(depsusageevidence.FieldIdentifier, field.TypeString)
	}
	if value, ok := dueuo.mutation.UsageFilePath(); ok {
		_spec.SetField(depsusageevidence.FieldUsageFilePath, field.TypeString, value)
	}
	if value, ok := dueuo.mutation.Line(); ok {
		_spec.SetField(depsusageevidence.FieldLine, field.TypeUint, value)
	}
	if value, ok := dueuo.mutation.AddedLine(); ok {
		_spec.AddField(depsusageevidence.FieldLine, field.TypeUint, value)
	}
	if dueuo.mutation.UsedInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   depsusageevidence.UsedInTable,
			Columns: []string{depsusageevidence.UsedInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codesourcefile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dueuo.mutation.UsedInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   depsusageevidence.UsedInTable,
			Columns: []string{depsusageevidence.UsedInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codesourcefile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DepsUsageEvidence{config: dueuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dueuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{depsusageevidence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dueuo.mutation.done = true
	return _node, nil
}
