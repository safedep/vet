// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/predicate"
	"github.com/safedep/vet/ent/reportscorecard"
	"github.com/safedep/vet/ent/reportscorecardcheck"
)

// ReportScorecardCheckUpdate is the builder for updating ReportScorecardCheck entities.
type ReportScorecardCheckUpdate struct {
	config
	hooks    []Hook
	mutation *ReportScorecardCheckMutation
}

// Where appends a list predicates to the ReportScorecardCheckUpdate builder.
func (rscu *ReportScorecardCheckUpdate) Where(ps ...predicate.ReportScorecardCheck) *ReportScorecardCheckUpdate {
	rscu.mutation.Where(ps...)
	return rscu
}

// SetName sets the "name" field.
func (rscu *ReportScorecardCheckUpdate) SetName(s string) *ReportScorecardCheckUpdate {
	rscu.mutation.SetName(s)
	return rscu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rscu *ReportScorecardCheckUpdate) SetNillableName(s *string) *ReportScorecardCheckUpdate {
	if s != nil {
		rscu.SetName(*s)
	}
	return rscu
}

// SetScore sets the "score" field.
func (rscu *ReportScorecardCheckUpdate) SetScore(f float32) *ReportScorecardCheckUpdate {
	rscu.mutation.ResetScore()
	rscu.mutation.SetScore(f)
	return rscu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rscu *ReportScorecardCheckUpdate) SetNillableScore(f *float32) *ReportScorecardCheckUpdate {
	if f != nil {
		rscu.SetScore(*f)
	}
	return rscu
}

// AddScore adds f to the "score" field.
func (rscu *ReportScorecardCheckUpdate) AddScore(f float32) *ReportScorecardCheckUpdate {
	rscu.mutation.AddScore(f)
	return rscu
}

// SetReason sets the "reason" field.
func (rscu *ReportScorecardCheckUpdate) SetReason(s string) *ReportScorecardCheckUpdate {
	rscu.mutation.SetReason(s)
	return rscu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (rscu *ReportScorecardCheckUpdate) SetNillableReason(s *string) *ReportScorecardCheckUpdate {
	if s != nil {
		rscu.SetReason(*s)
	}
	return rscu
}

// ClearReason clears the value of the "reason" field.
func (rscu *ReportScorecardCheckUpdate) ClearReason() *ReportScorecardCheckUpdate {
	rscu.mutation.ClearReason()
	return rscu
}

// SetCreatedAt sets the "created_at" field.
func (rscu *ReportScorecardCheckUpdate) SetCreatedAt(t time.Time) *ReportScorecardCheckUpdate {
	rscu.mutation.SetCreatedAt(t)
	return rscu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rscu *ReportScorecardCheckUpdate) SetNillableCreatedAt(t *time.Time) *ReportScorecardCheckUpdate {
	if t != nil {
		rscu.SetCreatedAt(*t)
	}
	return rscu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rscu *ReportScorecardCheckUpdate) ClearCreatedAt() *ReportScorecardCheckUpdate {
	rscu.mutation.ClearCreatedAt()
	return rscu
}

// SetUpdatedAt sets the "updated_at" field.
func (rscu *ReportScorecardCheckUpdate) SetUpdatedAt(t time.Time) *ReportScorecardCheckUpdate {
	rscu.mutation.SetUpdatedAt(t)
	return rscu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rscu *ReportScorecardCheckUpdate) SetNillableUpdatedAt(t *time.Time) *ReportScorecardCheckUpdate {
	if t != nil {
		rscu.SetUpdatedAt(*t)
	}
	return rscu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rscu *ReportScorecardCheckUpdate) ClearUpdatedAt() *ReportScorecardCheckUpdate {
	rscu.mutation.ClearUpdatedAt()
	return rscu
}

// SetScorecardID sets the "scorecard" edge to the ReportScorecard entity by ID.
func (rscu *ReportScorecardCheckUpdate) SetScorecardID(id int) *ReportScorecardCheckUpdate {
	rscu.mutation.SetScorecardID(id)
	return rscu
}

// SetNillableScorecardID sets the "scorecard" edge to the ReportScorecard entity by ID if the given value is not nil.
func (rscu *ReportScorecardCheckUpdate) SetNillableScorecardID(id *int) *ReportScorecardCheckUpdate {
	if id != nil {
		rscu = rscu.SetScorecardID(*id)
	}
	return rscu
}

// SetScorecard sets the "scorecard" edge to the ReportScorecard entity.
func (rscu *ReportScorecardCheckUpdate) SetScorecard(r *ReportScorecard) *ReportScorecardCheckUpdate {
	return rscu.SetScorecardID(r.ID)
}

// Mutation returns the ReportScorecardCheckMutation object of the builder.
func (rscu *ReportScorecardCheckUpdate) Mutation() *ReportScorecardCheckMutation {
	return rscu.mutation
}

// ClearScorecard clears the "scorecard" edge to the ReportScorecard entity.
func (rscu *ReportScorecardCheckUpdate) ClearScorecard() *ReportScorecardCheckUpdate {
	rscu.mutation.ClearScorecard()
	return rscu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rscu *ReportScorecardCheckUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rscu.sqlSave, rscu.mutation, rscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rscu *ReportScorecardCheckUpdate) SaveX(ctx context.Context) int {
	affected, err := rscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rscu *ReportScorecardCheckUpdate) Exec(ctx context.Context) error {
	_, err := rscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscu *ReportScorecardCheckUpdate) ExecX(ctx context.Context) {
	if err := rscu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rscu *ReportScorecardCheckUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reportscorecardcheck.Table, reportscorecardcheck.Columns, sqlgraph.NewFieldSpec(reportscorecardcheck.FieldID, field.TypeInt))
	if ps := rscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rscu.mutation.Name(); ok {
		_spec.SetField(reportscorecardcheck.FieldName, field.TypeString, value)
	}
	if value, ok := rscu.mutation.Score(); ok {
		_spec.SetField(reportscorecardcheck.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rscu.mutation.AddedScore(); ok {
		_spec.AddField(reportscorecardcheck.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rscu.mutation.Reason(); ok {
		_spec.SetField(reportscorecardcheck.FieldReason, field.TypeString, value)
	}
	if rscu.mutation.ReasonCleared() {
		_spec.ClearField(reportscorecardcheck.FieldReason, field.TypeString)
	}
	if value, ok := rscu.mutation.CreatedAt(); ok {
		_spec.SetField(reportscorecardcheck.FieldCreatedAt, field.TypeTime, value)
	}
	if rscu.mutation.CreatedAtCleared() {
		_spec.ClearField(reportscorecardcheck.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rscu.mutation.UpdatedAt(); ok {
		_spec.SetField(reportscorecardcheck.FieldUpdatedAt, field.TypeTime, value)
	}
	if rscu.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportscorecardcheck.FieldUpdatedAt, field.TypeTime)
	}
	if rscu.mutation.ScorecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportscorecardcheck.ScorecardTable,
			Columns: []string{reportscorecardcheck.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportscorecard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rscu.mutation.ScorecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportscorecardcheck.ScorecardTable,
			Columns: []string{reportscorecardcheck.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportscorecard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportscorecardcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rscu.mutation.done = true
	return n, nil
}

// ReportScorecardCheckUpdateOne is the builder for updating a single ReportScorecardCheck entity.
type ReportScorecardCheckUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportScorecardCheckMutation
}

// SetName sets the "name" field.
func (rscuo *ReportScorecardCheckUpdateOne) SetName(s string) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.SetName(s)
	return rscuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rscuo *ReportScorecardCheckUpdateOne) SetNillableName(s *string) *ReportScorecardCheckUpdateOne {
	if s != nil {
		rscuo.SetName(*s)
	}
	return rscuo
}

// SetScore sets the "score" field.
func (rscuo *ReportScorecardCheckUpdateOne) SetScore(f float32) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.ResetScore()
	rscuo.mutation.SetScore(f)
	return rscuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rscuo *ReportScorecardCheckUpdateOne) SetNillableScore(f *float32) *ReportScorecardCheckUpdateOne {
	if f != nil {
		rscuo.SetScore(*f)
	}
	return rscuo
}

// AddScore adds f to the "score" field.
func (rscuo *ReportScorecardCheckUpdateOne) AddScore(f float32) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.AddScore(f)
	return rscuo
}

// SetReason sets the "reason" field.
func (rscuo *ReportScorecardCheckUpdateOne) SetReason(s string) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.SetReason(s)
	return rscuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (rscuo *ReportScorecardCheckUpdateOne) SetNillableReason(s *string) *ReportScorecardCheckUpdateOne {
	if s != nil {
		rscuo.SetReason(*s)
	}
	return rscuo
}

// ClearReason clears the value of the "reason" field.
func (rscuo *ReportScorecardCheckUpdateOne) ClearReason() *ReportScorecardCheckUpdateOne {
	rscuo.mutation.ClearReason()
	return rscuo
}

// SetCreatedAt sets the "created_at" field.
func (rscuo *ReportScorecardCheckUpdateOne) SetCreatedAt(t time.Time) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.SetCreatedAt(t)
	return rscuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rscuo *ReportScorecardCheckUpdateOne) SetNillableCreatedAt(t *time.Time) *ReportScorecardCheckUpdateOne {
	if t != nil {
		rscuo.SetCreatedAt(*t)
	}
	return rscuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rscuo *ReportScorecardCheckUpdateOne) ClearCreatedAt() *ReportScorecardCheckUpdateOne {
	rscuo.mutation.ClearCreatedAt()
	return rscuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rscuo *ReportScorecardCheckUpdateOne) SetUpdatedAt(t time.Time) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.SetUpdatedAt(t)
	return rscuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rscuo *ReportScorecardCheckUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReportScorecardCheckUpdateOne {
	if t != nil {
		rscuo.SetUpdatedAt(*t)
	}
	return rscuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rscuo *ReportScorecardCheckUpdateOne) ClearUpdatedAt() *ReportScorecardCheckUpdateOne {
	rscuo.mutation.ClearUpdatedAt()
	return rscuo
}

// SetScorecardID sets the "scorecard" edge to the ReportScorecard entity by ID.
func (rscuo *ReportScorecardCheckUpdateOne) SetScorecardID(id int) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.SetScorecardID(id)
	return rscuo
}

// SetNillableScorecardID sets the "scorecard" edge to the ReportScorecard entity by ID if the given value is not nil.
func (rscuo *ReportScorecardCheckUpdateOne) SetNillableScorecardID(id *int) *ReportScorecardCheckUpdateOne {
	if id != nil {
		rscuo = rscuo.SetScorecardID(*id)
	}
	return rscuo
}

// SetScorecard sets the "scorecard" edge to the ReportScorecard entity.
func (rscuo *ReportScorecardCheckUpdateOne) SetScorecard(r *ReportScorecard) *ReportScorecardCheckUpdateOne {
	return rscuo.SetScorecardID(r.ID)
}

// Mutation returns the ReportScorecardCheckMutation object of the builder.
func (rscuo *ReportScorecardCheckUpdateOne) Mutation() *ReportScorecardCheckMutation {
	return rscuo.mutation
}

// ClearScorecard clears the "scorecard" edge to the ReportScorecard entity.
func (rscuo *ReportScorecardCheckUpdateOne) ClearScorecard() *ReportScorecardCheckUpdateOne {
	rscuo.mutation.ClearScorecard()
	return rscuo
}

// Where appends a list predicates to the ReportScorecardCheckUpdate builder.
func (rscuo *ReportScorecardCheckUpdateOne) Where(ps ...predicate.ReportScorecardCheck) *ReportScorecardCheckUpdateOne {
	rscuo.mutation.Where(ps...)
	return rscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rscuo *ReportScorecardCheckUpdateOne) Select(field string, fields ...string) *ReportScorecardCheckUpdateOne {
	rscuo.fields = append([]string{field}, fields...)
	return rscuo
}

// Save executes the query and returns the updated ReportScorecardCheck entity.
func (rscuo *ReportScorecardCheckUpdateOne) Save(ctx context.Context) (*ReportScorecardCheck, error) {
	return withHooks(ctx, rscuo.sqlSave, rscuo.mutation, rscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rscuo *ReportScorecardCheckUpdateOne) SaveX(ctx context.Context) *ReportScorecardCheck {
	node, err := rscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rscuo *ReportScorecardCheckUpdateOne) Exec(ctx context.Context) error {
	_, err := rscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscuo *ReportScorecardCheckUpdateOne) ExecX(ctx context.Context) {
	if err := rscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rscuo *ReportScorecardCheckUpdateOne) sqlSave(ctx context.Context) (_node *ReportScorecardCheck, err error) {
	_spec := sqlgraph.NewUpdateSpec(reportscorecardcheck.Table, reportscorecardcheck.Columns, sqlgraph.NewFieldSpec(reportscorecardcheck.FieldID, field.TypeInt))
	id, ok := rscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportScorecardCheck.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reportscorecardcheck.FieldID)
		for _, f := range fields {
			if !reportscorecardcheck.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reportscorecardcheck.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rscuo.mutation.Name(); ok {
		_spec.SetField(reportscorecardcheck.FieldName, field.TypeString, value)
	}
	if value, ok := rscuo.mutation.Score(); ok {
		_spec.SetField(reportscorecardcheck.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rscuo.mutation.AddedScore(); ok {
		_spec.AddField(reportscorecardcheck.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rscuo.mutation.Reason(); ok {
		_spec.SetField(reportscorecardcheck.FieldReason, field.TypeString, value)
	}
	if rscuo.mutation.ReasonCleared() {
		_spec.ClearField(reportscorecardcheck.FieldReason, field.TypeString)
	}
	if value, ok := rscuo.mutation.CreatedAt(); ok {
		_spec.SetField(reportscorecardcheck.FieldCreatedAt, field.TypeTime, value)
	}
	if rscuo.mutation.CreatedAtCleared() {
		_spec.ClearField(reportscorecardcheck.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rscuo.mutation.UpdatedAt(); ok {
		_spec.SetField(reportscorecardcheck.FieldUpdatedAt, field.TypeTime, value)
	}
	if rscuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(reportscorecardcheck.FieldUpdatedAt, field.TypeTime)
	}
	if rscuo.mutation.ScorecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportscorecardcheck.ScorecardTable,
			Columns: []string{reportscorecardcheck.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportscorecard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rscuo.mutation.ScorecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportscorecardcheck.ScorecardTable,
			Columns: []string{reportscorecardcheck.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportscorecard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReportScorecardCheck{config: rscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportscorecardcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rscuo.mutation.done = true
	return _node, nil
}
