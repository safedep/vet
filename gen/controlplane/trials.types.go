// Package controlplane provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package controlplane

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for ApiErrorCode.
const (
	ApiErrorCodeApiGuardError ApiErrorCode = "api_guard_error"

	ApiErrorCodeApiGuardInvalidCredentials ApiErrorCode = "api_guard_invalid_credentials"

	ApiErrorCodeApiGuardRateLimitExceeded ApiErrorCode = "api_guard_rate_limit_exceeded"

	ApiErrorCodeApiGuardUnauthorized ApiErrorCode = "api_guard_unauthorized"

	ApiErrorCodeAppFeatureNotEnabled ApiErrorCode = "app_feature_not_enabled"

	ApiErrorCodeAppGenericError ApiErrorCode = "app_generic_error"

	ApiErrorCodeAppInsufficientParameters ApiErrorCode = "app_insufficient_parameters"

	ApiErrorCodeAppPackageVersionNotFound ApiErrorCode = "app_package_version_not_found"

	ApiErrorCodeAppSecurityError ApiErrorCode = "app_security_error"
)

// Defines values for ApiErrorType.
const (
	ApiErrorTypeInternalError ApiErrorType = "internal_error"

	ApiErrorTypeInvalidRequest ApiErrorType = "invalid_request"

	ApiErrorTypeOperationFailed ApiErrorType = "operation_failed"
)

// ApiError defines model for ApiError.
type ApiError struct {
	// An error code identifying the error
	Code *ApiErrorCode `json:"code,omitempty"`

	// A descriptive message about the error meant for developer consumption
	Message *string `json:"message,omitempty"`

	// Optional error specific attributes
	Params *ApiError_Params `json:"params,omitempty"`

	// An optional service or domain specific error group
	Type *ApiErrorType `json:"type,omitempty"`
}

// An error code identifying the error
type ApiErrorCode string

// Optional error specific attributes
type ApiError_Params struct {
	AdditionalProperties map[string]struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"-"`
}

// An optional service or domain specific error group
type ApiErrorType string

// TrialRequest defines model for TrialRequest.
type TrialRequest struct {
	Email openapi_types.Email `json:"email"`
}

// TrialResponse defines model for TrialResponse.
type TrialResponse struct {
	// The expiry time of the API key
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// The ID of the trial registration request created in the system
	Id *string `json:"id,omitempty"`
}

// RegisterTrialUserJSONBody defines parameters for RegisterTrialUser.
type RegisterTrialUserJSONBody TrialRequest

// RegisterTrialUserJSONRequestBody defines body for RegisterTrialUser for application/json ContentType.
type RegisterTrialUserJSONRequestBody RegisterTrialUserJSONBody

// Getter for additional properties for ApiError_Params. Returns the specified
// element and whether it was found
func (a ApiError_Params) Get(fieldName string) (value struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApiError_Params
func (a *ApiError_Params) Set(fieldName string, value struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApiError_Params to handle AdditionalProperties
func (a *ApiError_Params) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApiError_Params to handle AdditionalProperties
func (a ApiError_Params) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
