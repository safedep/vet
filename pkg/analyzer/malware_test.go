package analyzer

import (
	"testing"

	malysisv1 "buf.build/gen/go/safedep/api/protocolbuffers/go/safedep/messages/malysis/v1"
	"github.com/safedep/vet/pkg/models"
	"github.com/stretchr/testify/assert"
)

func TestMalwareAnalyzerDecision(t *testing.T) {
	pkgDetail := models.NewPackageDetail(models.EcosystemNpm, "test", "1.0.0")
	pkgManifest := models.NewPackageManifestFromLocal("test", models.EcosystemNpm)

	cases := []struct {
		name   string
		config MalwareAnalyzerConfig
		pkg    *models.Package
		assert func(*models.Package)
	}{
		{
			name:   "no malware analysis result",
			config: MalwareAnalyzerConfig{},
			pkg: &models.Package{
				Manifest:       pkgManifest,
				PackageDetails: pkgDetail,
			},
			assert: func(pkg *models.Package) {
				assert.Nil(t, pkg.GetMalwareAnalysisResult())
			},
		},
		{
			name:   "when malware with verification record",
			config: MalwareAnalyzerConfig{},
			pkg: &models.Package{
				Manifest:       pkgManifest,
				PackageDetails: pkgDetail,
				MalwareAnalysis: &models.MalwareAnalysisResult{
					Report: &malysisv1.Report{
						Inference: &malysisv1.Report_Inference{
							IsMalware: true,
						},
					},
					VerificationRecord: &malysisv1.VerificationRecord{
						IsMalware: true,
					},
				},
			},
			assert: func(pkg *models.Package) {
				assert.True(t, pkg.GetMalwareAnalysisResult().IsMalware)
			},
		},
		{
			name:   "when malware without verification record",
			config: MalwareAnalyzerConfig{},
			pkg: &models.Package{
				Manifest:       pkgManifest,
				PackageDetails: pkgDetail,
				MalwareAnalysis: &models.MalwareAnalysisResult{
					Report: &malysisv1.Report{
						Inference: &malysisv1.Report_Inference{
							IsMalware: true,
						},
					},
				},
			},
			assert: func(pkg *models.Package) {
				assert.False(t, pkg.GetMalwareAnalysisResult().IsMalware)
				assert.True(t, pkg.GetMalwareAnalysisResult().IsSuspicious)
			},
		},
		{
			name:   "when malware without verification record and trusted analysis",
			config: MalwareAnalyzerConfig{TrustAutomatedAnalysis: true},
			pkg: &models.Package{
				Manifest:       pkgManifest,
				PackageDetails: pkgDetail,
				MalwareAnalysis: &models.MalwareAnalysisResult{
					Report: &malysisv1.Report{
						Inference: &malysisv1.Report_Inference{
							Confidence: malysisv1.Report_Evidence_CONFIDENCE_HIGH,
							IsMalware:  true,
						},
					},
				},
			},
			assert: func(pkg *models.Package) {
				assert.True(t, pkg.GetMalwareAnalysisResult().IsMalware)
			},
		},
		{
			name:   "when malware without verification record and trusted analysis with low confidence",
			config: MalwareAnalyzerConfig{TrustAutomatedAnalysis: true},
			pkg: &models.Package{
				Manifest:       pkgManifest,
				PackageDetails: pkgDetail,
				MalwareAnalysis: &models.MalwareAnalysisResult{
					Report: &malysisv1.Report{
						Inference: &malysisv1.Report_Inference{
							Confidence: malysisv1.Report_Evidence_CONFIDENCE_LOW,
							IsMalware:  true,
						},
					},
				},
			},
			assert: func(pkg *models.Package) {
				assert.False(t, pkg.GetMalwareAnalysisResult().IsMalware)
				assert.True(t, pkg.GetMalwareAnalysisResult().IsSuspicious)
			},
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			a := &malwareAnalyzer{config: tc.config}
			err := a.applyMalwareDecision(tc.pkg)
			assert.NoError(t, err)
			tc.assert(tc.pkg)
		})
	}
}
