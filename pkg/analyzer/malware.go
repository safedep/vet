package analyzer

import (
	"sync"

	malysisv1 "buf.build/gen/go/safedep/api/protocolbuffers/go/safedep/messages/malysis/v1"
	"github.com/safedep/vet/pkg/common/logger"
	"github.com/safedep/vet/pkg/models"
	"github.com/safedep/vet/pkg/readers"
)

type MalwareAnalyzerConfig struct {
	// Flag to trust automated analysis results without needing
	// a verification record
	TrustAutomatedAnalysis bool
}

type malwareAnalyzer struct {
	config MalwareAnalyzerConfig
	m      sync.Mutex
}

var _ Analyzer = (*malwareAnalyzer)(nil)

func NewMalwareAnalyzer(config MalwareAnalyzerConfig) (*malwareAnalyzer, error) {
	return &malwareAnalyzer{
		config: config,
	}, nil
}

func (a *malwareAnalyzer) Name() string {
	return "MalwareAnalyzer"
}

func (a *malwareAnalyzer) Analyze(manifest *models.PackageManifest,
	handler AnalyzerEventHandler) error {
	return readers.NewManifestModelReader(manifest).EnumPackages(func(pkg *models.Package) error {
		return a.applyMalwareDecision(pkg)
	})
}

func (a *malwareAnalyzer) Finish() error {
	return nil
}

// The malware analyzer makes a decision based on configuration and malware analysis results.
// The decision involves:
//
// - No action if the package is not classified as malware
// - Malware if a verfication record is available to confirm
// - Malware if `TrustAutomatedAnalysis` config is enabled and confidence is high
// - Suspicious for all other cases
func (a *malwareAnalyzer) applyMalwareDecision(pkg *models.Package) error {
	ma := pkg.GetMalwareAnalysisResult()
	if ma == nil || ma.Report == nil {
		logger.Warnf("MalwareAnalyzer: No malware analysis result found for package %s/%s/%s",
			pkg.GetControlTowerSpecEcosystem(), pkg.GetName(), pkg.GetVersion())
		return nil
	}

	a.m.Lock()
	defer a.m.Unlock()

	report := ma.Report
	if !report.GetInference().GetIsMalware() {
		return nil
	}

	vr := ma.VerificationRecord
	if vr != nil && vr.GetIsMalware() {
		logger.Warnf("MalwareAnalyzer: Package %s/%s/%s is classified as malwars with verification record",
			pkg.GetControlTowerSpecEcosystem(), pkg.GetName(), pkg.GetVersion())
		ma.IsMalware = true
		return nil
	}

	if a.config.TrustAutomatedAnalysis &&
		report.GetInference().GetConfidence() == malysisv1.Report_Evidence_CONFIDENCE_HIGH {
		logger.Warnf("MalwareAnalyzer: Package %s/%s/%s is classified as malware",
			pkg.GetControlTowerSpecEcosystem(), pkg.GetName(), pkg.GetVersion())
		ma.IsMalware = true
	}

	logger.Warnf("MalwareAnalyzer: Package %s/%s/%s is classified as malware with low confidence",
		pkg.GetControlTowerSpecEcosystem(), pkg.GetName(), pkg.GetVersion())
	ma.IsSuspicious = true

	return nil
}
