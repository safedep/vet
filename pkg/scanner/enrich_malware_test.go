package scanner

import (
	"sync"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"google.golang.org/grpc"
)

func TestMalysisMalwareEnricher(t *testing.T) {
	t.Run("NewMalysisMalwareEnricher", func(t *testing.T) {
		t.Run("should reject nil grpc client connection", func(t *testing.T) {
			_, err := NewMalysisMalwareEnricher(nil, DefaultMalysisMalwareEnricherConfig())
			assert.Error(t, err)
			assert.ErrorContains(t, err, "grpc client connection is required")
		})

		t.Run("should wait till max timeout", func(t *testing.T) {
			enricher, err := NewMalysisMalwareEnricher(&grpc.ClientConn{}, MalysisMalwareEnricherConfig{
				Timeout:          1,
				QueryWorkerCount: 0,
			})

			if err != nil {
				t.Fatalf("failed to create enricher: %v", err)
			}

			var wg sync.WaitGroup

			wg.Add(1)
			go func() {
				defer wg.Done()
				_ = enricher.Wait()
			}()

			closer := make(chan bool)
			go func() {
				wg.Wait()
				close(closer)
			}()

			timer := time.NewTimer(2 * time.Second)
			select {
			case <-timer.C:
				assert.Fail(t, "timeout occurred instead of completion")
			case <-closer:
				timer.Stop()
			}
		})
	})
}
